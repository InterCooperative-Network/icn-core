searchState.loadedDescShard("icn_ccl", 0, "Reads a CCL source file from disk and compiles it to WASM …\nCompiles a CCL source string into WASM bytecode and …\nCCL Error types and handling\nCCL Standard Library\nReturns true if two types are considered compatible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type can be stored/compared\nReturns true if this type behaves like an integer number.\nConverts a Pest <code>Pair</code> into an AST node.\nReturns true if values of this type live in guest memory …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this error is recoverable\nCreate a mana limit error\nCreate a parsing error with position information\nCreate a resource limit error\nGet error severity level\nGet suggestions for fixing this error\nCreate a type error with detailed context\nStandard macros for cooperative governance patterns.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnd-of-input\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a CCL file from disk, recursively loading any …\nConvert escaped sequences like <code>\\n</code> or <code>\\&quot;</code> into their actual …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStandard constants available in CCL\nAdd cooperative economics helpers\nAdd governance helper functions for common patterns\nExpand a macro call by replacing parameters\nReturns the argument unchanged.\nGenerate policy statements for all constants and macros\nGet a constant value by name\nGet all available constant names\nGet a macro definition by name\nGet all available macro names\nCalls <code>U::from(self)</code>.\nCheck if a name is a standard library constant\nCheck if a name is a standard library macro\nRegister a new macro with the standard library\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")