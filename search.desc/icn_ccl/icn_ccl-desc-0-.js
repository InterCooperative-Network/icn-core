searchState.loadedDescShard("icn_ccl", 0, "Reads a CCL source file from disk and compiles it to WASM …\nCompiles a CCL source string into WASM bytecode and …\nCCL Error types and handling\nCCL Standard Library\nReturns true if two types are considered compatible.\nReturns true if two types are considered compatible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type behaves like an integer number.\nReturns true if this type behaves like an integer number.\nConverts a Pest <code>Pair</code> into an AST node.\nConvert to legacy TypeAnnotationNode for backward …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this error is recoverable\nCreate a mana limit error\nCreate a parsing error with position information\nCreate a resource limit error\nGet error severity level\nGet suggestions for fixing this error\nCreate a type error with detailed context\nStandard macros for cooperative governance patterns.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe optimizer applies various transformations to the AST …\nMain expression folding with constant propagation and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimize the entire AST\nEnd-of-input\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\nReturns the argument unchanged.\nReturns the argument unchanged.\n/////////////////////// ///////////////////////\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n/////////////////////// ///////////////////////\nParse a CCL file from disk, recursively loading any …\nMain parsing function for CCL 0.1 programs\nParse a contract declaration\nParse a function declaration (CCL 0.1 style)\nParse function for new CCL 0.1 functions (wrapper for AST …\nParse an import statement\nParse type expressions (new CCL 0.1 type system)\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\nConvert escaped sequences like <code>\\n</code> or <code>\\&quot;</code> into their actual …\nFunction signature for type checking\nMonomorphized instance of a generic type or function\nThe semantic analyzer performs type checking and ensures …\nRepresents a struct type definition\nSymbol table entry containing type information\nType parameter scope for tracking generic type parameters\nAnalyze the entire AST for semantic correctness\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro definition structure\nCategories of standard library functions\nStandard library function signature\nCCL Standard Library\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate documentation for the standard library\nGet all function name-function pairs\nGet all function names\nLook up a function by name\nGet all function names by category\nGet a macro definition by name\nCheck if a function or macro exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new standard library instance with all built-in …\nRegister a macro definition\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")