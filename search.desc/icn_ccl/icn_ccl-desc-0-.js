searchState.loadedDescShard("icn_ccl", 0, "Extended CLI commands for CCL developer tooling\nReads a CCL source file from disk and compiles it to WASM …\nCompiles a CCL source string into WASM bytecode and …\nCCL/WASM debugger integration\nCCL Error types and handling\nLanguage Server Protocol implementation for CCL\nCCL Migration Tools\nCCL package manager for managing dependencies and …\nCCL Standard Library\nReturns true if two types are considered compatible.\nReturns true if two types are considered compatible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type behaves like an integer number.\nReturns true if this type behaves like an integer number.\nConverts a Pest <code>Pair</code> into an AST node.\nConvert to legacy TypeAnnotationNode for backward …\nAdd a dependency to the package manifest\nGenerate debug symbols for a compiled CCL contract\nInitialize a new CCL package\nInstall dependencies for a CCL package\nStart interactive debugging session\nSource mapping between CCL and WASM for debugging\nWASM debugger integration for CCL contracts\nRepresents a location in CCL source code\nComplete source map for a CCL contract\nMapping between CCL source and WASM bytecode locations\nRepresents a location in WASM bytecode\nAdd a function mapping\nAdd a mapping between CCL and WASM locations\nAdd a variable mapping\nFind CCL location for a WASM instruction\nFind WASM location for a CCL source position\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize source map from JSON\nGet all breakpoint locations for a CCL file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new source map\nSerialize source map to JSON\nBreakpoint in a CCL contract\nDebugger state\nStack frame information\nWASM debugger for CCL contracts\nAdd a breakpoint at a CCL source location\nContinue execution until next breakpoint\nEvaluate an expression in the current context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all breakpoints\nGet current call stack\nGet local variables at current location\nGet the source map\nGet current debugger state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new WASM debugger with source map\nRemove a breakpoint\nEnable or disable a breakpoint\nSet a variable value (for debugging)\nStart debugging (this would interface with actual WASM …\nStep into function calls\nStep to next instruction\nStep out of current function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this error is recoverable\nCreate a mana limit error\nCreate a parsing error with position information\nCreate a resource limit error\nGet error severity level\nGet suggestions for fixing this error\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a type error with detailed context\nStandard macros for cooperative governance patterns.\nAutocompletion support for CCL LSP\nDiagnostic generation for CCL LSP\nCode formatting for CCL files\nHover information provider for CCL LSP\nNavigation features for CCL LSP (go-to-definition, find …\nMain LSP server implementation for CCL\nProvide autocompletion items for CCL\nGenerate LSP diagnostics from CCL parse and semantic errors\nConvert an LSP Position to line/character\nConvert a line/character position to LSP Position\nFormat a CCL document and return text edits\nFormat a specific range of text\nProvide hover information for symbols at a given position\nCreate an LSP Location from URI and range\nCreate an LSP Range from start and end positions\nFind all references to a symbol\nProvide go-to-definition functionality\nConvert a text position (line, character) to LSP Position\nMain CCL Language Server\nDocument state stored for each open CCL file\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent CCL version\nRepresents a CCL version\nFunction signature update\nKeyword replacement\nMigration engine for CCL contracts\nMigration report showing what changes will be made\nMigration rule for transforming code between versions\nTypes of migration rules\nRegular expression replacement\nSyntax structure change\nSimple text replacement\nAdd a custom migration rule\nConvert from JavaScript/TypeScript governance code to CCL\nConvert from Solidity to CCL (basic conversion)\nDetect the CCL version of a contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a migration report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigrate a contract from one version to another\nMigrate a CCL file\nThe optimizer applies various transformations to the AST …\nMain expression folding with constant propagation and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimize the entire AST\nPackage manifest definition for CCL packages\nCCL package registry for sharing governance patterns and …\nDependency resolution for CCL packages\nAuthor information\nBuild configuration\nDependency specification\nPackage metadata\nPackage information\nCCL package manifest (package.ccl)\nVersion requirement for dependencies\nAdd a dependency\nAdd a development dependency\nGet all dependencies (runtime + dev)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad manifest from TOML file\nCheck if package has dependency\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a version satisfies this requirement\nCreate a new package manifest\nSave manifest to TOML format\nPackage information in the registry\nRegistry API client\nRegistry errors\nGet default ICN registry\nDownload package\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet package information\nList all versions of a package\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new registry client\nPublish a package (requires authentication)\nSearch for packages\n<code>ToString::to_string</code>, but without panic on OOM.\nDependency resolver\nResolved dependency with specific version\nDependency resolution errors\nCheck for version conflicts in resolved dependencies\nGet the dependency tree as a flat list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new dependency resolver\nResolve all dependencies for a package manifest\n<code>ToString::to_string</code>, but without panic on OOM.\nEnd-of-input\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\nReturns the argument unchanged.\nReturns the argument unchanged.\n/////////////////////// ///////////////////////\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n/////////////////////// ///////////////////////\nParse a CCL file from disk, recursively loading any …\nMain parsing function for CCL 0.1 programs\nParse a contract declaration\nParse a function declaration (CCL 0.1 style)\nParse function for new CCL 0.1 functions (wrapper for AST …\nParse an import statement\nParse type expressions (new CCL 0.1 type system)\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\n/////////////////////// ///////////////////////\nConvert escaped sequences like <code>\\n</code> or <code>\\&quot;</code> into their actual …\nFunction signature for type checking\nMonomorphized instance of a generic type or function\nThe semantic analyzer performs type checking and ensures …\nRepresents a struct type definition\nSymbol table entry containing type information\nType parameter scope for tracking generic type parameters\nAnalyze the entire AST for semantic correctness\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro definition structure\nCategories of standard library functions\nStandard library function signature\nCCL Standard Library\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate documentation for the standard library\nGet all function name-function pairs\nGet all function names\nLook up a function by name\nGet all function names by category\nGet a macro definition by name\nCheck if a function or macro exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new standard library instance with all built-in …\nRegister a macro definition\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")