searchState.loadedDescShard("icn_common", 0, "ICN Common Crate\nRepresents a Content Identifier (CID).\nRepresents a generic error that can occur within the ICN …\nRepresents a generic block in a Content-Addressed DAG.\nRepresents a link within a DagBlock, pointing to another …\nRepresents a Decentralized Identifier (DID).\nMinimal DID document containing the public verifying key …\nDuplicate or replayed message detected\nDeterministic time provider returning a fixed timestamp.\nBasic metadata about an ICN node used for diagnostics and …\nIdentifies a membership scope such as a community, …\nRepresents the operational status of an ICN node.\nOperation was rejected by a policy engine or CCL contract.\nTrait for types that can produce a canonical byte …\nWrapper for raw Ed25519 signature bytes used by <code>Signable</code> …\nUses <code>std::time::SystemTime</code> as the source of time.\nProvides the current time for deterministic operations.\nRepresents a generic transaction within the ICN.\nDID of the block author.\nThe CID of this block (calculated from the data and …\nCompute a Merkle-style CID for a block using SHA-256 of …\nOpaque data payload of the block.\nOptional URL fragment without the leading <code>#</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a CID from its raw bytes.\nMaximum compute units the sender is willing to expend.\nPrice per compute unit the sender is willing to pay.\nTransaction ID (e.g. hash of the contents).\nThe identifier this document describes.\nMethod specific identifier string (without path, query, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks to other <code>DagBlock</code>s.\nDID method name, e.g. <code>&quot;key&quot;</code> or <code>&quot;web&quot;</code>.\nHuman friendly name of the node.\nCreate a new <code>FixedTimeProvider</code> returning <code>ts</code>.\nConstruct a new <code>Did</code> from a method name and identifier …\nCreate a CID using a truncated hash of the provided data.\nCreate a CID using SHA-256 of the provided data bytes.\nNonce ensuring transaction uniqueness.\nParse a CID string produced by <code>Cid::to_string</code>.\nOptional path component beginning with <code>/</code>.\nSerialized transaction-specific data.\nDescribes the type of data in [<code>payload</code>].\nRaw public key bytes associated with the DID.\nOptional URL query string without the leading <code>?</code>.\nOptional recipient DID.\nOptional scope this block belongs to.\nDID of the sender.\nSign <code>self</code> with the provided Ed25519 [<code>SigningKey</code>].\nOptional Ed25519 signature of the block contents.\nOptional Ed25519 signature of the transaction content.\nOptional status or informational message.\nUnix timestamp when the block was created.\nUnix timestamp when the transaction was created.\nReturn the bytes that should be signed.\nEncode this CID to a multibase string.\nReturn the current Unix timestamp in seconds.\nVerify a signature against <code>self</code> using the provided […\nVerify that a block’s CID matches the Merkle hash of its …\nSemantic version of the running software.\nRetry an asynchronous operation with jittered exponential …")