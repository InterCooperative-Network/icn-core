searchState.loadedDescShard("icn_common", 0, "ICN Common Crate\nRepresents a Content Identifier (CID).\nRepresents a generic error that can occur within the …\nRepresents a generic block in a Content-Addressed DAG.\nRepresents a link within a DagBlock, pointing to another …\nRepresents a Decentralized Identifier (DID).\nMinimal DID document containing the public verifying key …\nDuplicate or replayed message detected\nDeterministic time provider returning a fixed timestamp.\nBasic metadata about an ICN node used for diagnostics and …\nIdentifies a membership scope such as a community, …\nRepresents the operational status of an ICN node.\nOperation was rejected by a policy engine or CCL contract.\nTrait for types that can produce a canonical byte …\nWrapper for raw Ed25519 signature bytes used by <code>Signable</code> …\nUses <code>std::time::SystemTime</code> as the source of time.\nProvides the current time for deterministic operations.\nRepresents a generic transaction within the ICN.\nDID of the block author.\nThe CID of this block (calculated from the data and …\nCompute a Merkle-style CID for a block using SHA-256 of …\nOpaque data payload of the block.\nOptional URL fragment without the leading <code>#</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a CID from its raw bytes.\nTransaction ID (e.g. hash of the contents).\nThe identifier this document describes.\nMethod specific identifier string (without path, query, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks to other <code>DagBlock</code>s.\nMaximum compute units the sender is willing to expend.\nPrice per compute unit the sender is willing to pay.\nDID method name, e.g. <code>&quot;key&quot;</code> or <code>&quot;web&quot;</code>.\nHuman friendly name of the node.\nCreate a new <code>FixedTimeProvider</code> returning <code>ts</code>.\nConstruct a new <code>Did</code> from a method name and identifier …\nCreate a CID using a truncated hash of the provided data.\nCreate a CID using SHA-256 of the provided data bytes.\nNonce ensuring transaction uniqueness.\nParse a CID string produced by <code>Cid::to_string</code>.\nOptional path component beginning with <code>/</code>.\nSerialized transaction-specific data.\nDescribes the type of data in [<code>payload</code>].\nRaw public key bytes associated with the DID.\nOptional URL query string without the leading <code>?</code>.\nOptional recipient DID.\nOptional scope this block belongs to.\nDID of the sender.\nSign <code>self</code> with the provided Ed25519 [<code>SigningKey</code>].\nOptional Ed25519 signature of the block contents.\nOptional Ed25519 signature of the transaction content.\nOptional status or informational message.\nUnix timestamp when the block was created.\nUnix timestamp when the transaction was created.\nReturn the bytes that should be signed.\nEncode this CID to a multibase string.\nReturn the current Unix timestamp in seconds.\nVerify a signature against <code>self</code> using the provided […\nVerify that a block’s CID matches the Merkle hash of its …\nSemantic version of the running software.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresentation of a token balance.\nIdentifier for a resource token class.\nMetadata describing a token class.\nAmount of tokens held.\nOptional human readable description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates if the tokens are fungible or non-fungible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether tokens can be transferred between accounts.\nDID of the issuer that created the token class.\nOptional scope that this token is limited to.\nUnit name or symbol (e.g. “kg”, “credit”).\nRetry an asynchronous operation with jittered exponential …\nBulletproofs proving system\nGroth16 zk-SNARK proofs\nCatch-all for custom or future proof systems\nA verifiable credential proof generated via a …\nSupported zero-knowledge proof backends.\nBackend proving system used for this proof.\nOptional challenge used in the proof generation.\nType or semantic tag of the claim being proven.\nFields from the credential that were disclosed in plain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDID of the credential holder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDID of the credential issuer.\nRaw bytes of the zero-knowledge proof.\nCID of the credential schema this proof adheres to.")