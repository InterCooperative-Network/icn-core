searchState.loadedDescShard("icn_zk", 0, "Reusable zero-knowledge circuits for ICN credential proofs.\nProve that <code>current_year &gt;= birth_year + 18</code>.\nProve age over 18, membership status, and reputation …\nProve that <code>min ≤ balance ≤ max</code>.\nTrait for estimating relative circuit complexity.\nSerialized circuit parameters produced by a trusted setup.\nStorage trait for circuit parameters keyed by circuit name.\nProve knowledge of membership boolean (must equal <code>true</code>).\nProve that a private membership flag matches an expected …\nIn-memory implementation of <code>CircuitParametersStorage</code>.\nProve that <code>reputation &gt;= threshold</code>.\nReputation thresholds required to prove or verify each …\nProve that <code>not_before ≤ timestamp ≤ not_after</code>.\nBalance amount to validate (private).\nBirth year of the subject (private).\nBirth year of the subject (private).\nReturns a complexity score used for mana cost calculation.\nCurrent year (public).\nCurrent year (public).\nExpected membership value published by the verifier …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate parameters from an existing proving key.\nFetch parameters for the given circuit name if present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the prover is a member (public).\nMembership flag (public).\nMaximum acceptable balance (public).\nMembership flag provided by the prover (private).\nMinimum acceptable balance (public).\nLatest acceptable timestamp (public).\nEarliest acceptable timestamp (public).\nPrepare the verifying key for use in verification.\nDerive a prepared verifying key from the stored proving …\nCreate a Groth16 proof for the provided circuit and …\nCreate Groth16 proofs for multiple circuits in parallel.\nConvert the parameters into a <code>ProvingKey</code>.\nCompressed Groth16 proving key bytes.\nStore parameters for the given circuit name.\nReputation score (public).\nReputation score (public).\nGenerate Groth16 parameters for a given circuit.\nRequired threshold.\nRequired reputation threshold.\nTimestamp to validate (private).\nVerify a Groth16 proof with the given verifying key and …\nVerify multiple Groth16 proofs with a single verifying key.\nCount the number of constraints for the provided circuit.\nLog information about all constraints in the provided …\nPrint basic statistics about a synthesized constraint …")