searchState.loadedDescShard("icn_economics", 0, "ICN Economics Crate\nMaximum mana spend allowed per single operation.\nAbstraction over the persistence layer storing account …\nThin wrapper exposing convenience methods over a <code>ManaLedger</code>…\nEnforces spending limits and forwards to a …\nAdapter over a <code>ResourceLedger</code> with optional DAG event …\nEvents emitted when resource token balances change.\nReturns a list of all known account DIDs.\nComprehensive economic automation and policy enforcement …\nExposes a public function to charge mana, wrapping …\nCRDT-backed mana ledger for conflict-free distributed mana …\nCreate a marketplace bid with balance validation.\nCreate a marketplace offer with token validation.\nCredit mana to the account.\nCredit every known account with additional mana.\nCredits mana to all known accounts using their reputation …\nCredits mana to the given DID using the provided ledger.\nCredits the specified account with additional mana.\nExecute a marketplace transaction by transferring tokens …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the mana balance for a DID.\nRetrieve the account balance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new adapter around the provided ledger …\nCreate a new enforcer using the supplied adapter.\nCalculates the final mana price for a resource based on …\nPlaceholder function demonstrating use of common types for …\nPersist a new balance for a DID.\nSpend mana from the account.\nDeduct mana from an account via the underlying ledger.\nSpend mana after applying basic policy checks.\nPolicy is active\nAdjust mana regeneration rates\nIndividual allocation entry\nResult of allocation plan execution\nResource allocation metrics\nAllocation optimization suggestion\nStatus of resource allocation\nResource allocation strategies\nAnti-competitive behavior\nAnti-manipulation policy\nAutomatic actions taken when thresholds are reached\nCancelled before execution\nImplement circuit breakers\nCompetition adjustment\nSuccessfully completed\nContribution-based allocation\nPolicy is deprecated\nDynamic pricing model\nConfiguration for economic automation\nComprehensive economic automation engine\nStatistics about economic automation\nTypes of economic events\nEconomic health metrics\nEconomic inequality measure\nEconomic penalties for violations\nEconomic policy definition\nImplement emergency resource allocation\nExcessive resource consumption\nCurrently executing\nFailed during execution\nFair allocation based on need\nTrigger governance proposal\nHybrid strategy combining multiple approaches\nLottery-based random allocation\nState of a mana account\nMana penalty\nMana regeneration occurred\nMana regeneration policy\nMarket participation ban\nMarket behavior policy\nMarket making configuration\nMarket making performance metrics\nMarket making state\nMarket manipulation\nMarket making position\nMarket transaction executed\nMerit-based allocation using reputation\nNetwork congestion\nNetwork fee level\nTypes of allocation optimizations\nPartially completed with some failures\nTypes of economic penalties\nPlanning phase\nEconomic policy directive\nStatus of economic policy\nTypes of economic policies\nEconomic policy violation\nDynamic price adjustment\nReasons for price adjustments\nActivate price controls\nPrice volatility level\nPricing policy\nQuality of service changes\nReady for execution\nReputation penalty\nResource allocation optimized\nResource allocation policy\nResource allocation plan\nHoarding resources\nResource pricing information\nResource access restriction\nResource access restriction\nResource utilization rate\nRisk metrics for market making\nRisk management parameters for market making\nSupply and demand imbalance\nPolicy is suspended\nEconomic threshold reached\nEconomic threshold types\nToken confiscation\nTotal mana supply threshold\nAverage transaction volume\nUnfair pricing practices\nPolicy is being updated\nTypes of policy violations\nWarning only\nAccount DID\nNumber of active policies\nNumber of active pricing models\nEconomic activity level\nAllocation identifier\nResource allocation optimization interval\nIndividual allocations\nAmount of penalty (mana, tokens, etc.)\nAllocated amount\nApply economic penalty for policy violation\nAverage spread captured\nCurrent mana balance\nBase price for the resource\nBase mana regeneration rate per second\nCalculate optimal mana price for a job\nMaximum mana capacity\nCompetition factor\nPosition concentration risk\nAllocation conditions\nCreation timestamp\nCurrent market price\nCurrent market price\nDuration of penalty\nCurrent economic health score\nEnable dynamic pricing\nEnable automatic mana regeneration\nEnable automatic market making\nEnable economic policy enforcement\nEnable predictive economic modeling\nEnable automatic resource allocation\nWhen the restriction expires (None for permanent, Unix …\nEnforcement level\nPolicy enforcement strictness (0.0 to 1.0)\nEntry price\nExecute resource allocation plan\nExecution time\nNumber of failed allocations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet economic automation statistics\nEconomic health check interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInventory levels\nInventory target levels\nInventory turnover rate\nJustification for allocation\nLast regeneration time\nLast update timestamp\nLast price update\nLast update time\nLiquidity risk\nMana distribution inequality (Gini coefficient)\nNumber of managed mana accounts\nMarket liquidity level\nMarket making spread percentage\nMaximum mana capacity multiplier\nMaximum daily loss\nMaximum drawdown\nMaximum loss per trade\nMaximum position size\nCreate a new economic automation engine\nOverall economic health score (0.0 to 1.0)\nPolicy parameters\nType of penalty\nNumber of pending allocations\nPerformance metrics\nPlan identifier\nPolicy identifier\nPolicy type\nPosition identifier\nPosition size limits\nActive market making positions\nPrice adjustment speed (0.0 to 1.0)\nPrice history\nPrice stability index\nQuality adjustment factor\nReason for the restriction\nRecipient DID\nCurrent regeneration rate\nReputation-based bonuses\nResource utilization efficiency\nResource type being allocated\nResource type\nThe resource being restricted\nAdditional restrictions\nRisk metrics\nRisk management parameters\nAllocation score/priority\nSeverity of the restriction (0.0 to 1.0)\nSeverity level (0.0 to 1.0)\nPosition size\nStart the economic automation engine\nExecution status\nPolicy status\nStop the economic automation engine\nStop loss threshold\nAllocation strategy used\nSuccess rate\nNumber of successful allocations\nSupply and demand factors\nGet event receiver for economic events\nTarget spread percentage\nPosition timestamp\nTotal amount allocated\nTotal amount available for allocation\nTotal mana under management\nTotal profit/loss\nTotal trades executed\nTotal volume traded\nUnrealized P&amp;L\nUsage history\nCurrent value at risk\nCRDT-backed mana ledger that enables conflict-free …\nConfiguration for CRDT mana ledger.\nStatistics about a CRDT mana ledger.\nNumber of accounts in the ledger.\nAverage mana balance per account.\nWhether to enable event store recording.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a snapshot of current balances for debugging or …\nGet statistics about the CRDT ledger.\nInitial mana balances for accounts (for bootstrapping).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHighest balance in the ledger.\nMerge state from another CRDT mana ledger.\nLowest balance in the ledger.\nCreate a new CRDT mana ledger with the given configuration.\nGet the node ID for this ledger instance.\nNode identifier for this ledger instance.\nNode ID of this ledger instance.\nTotal mana across all accounts.\nAdd an event store for recording ledger operations.\nCreate a new CRDT mana ledger with a specific node ID.\nAdjust account balances\nArbitration process initiated\nAsset freeze as dispute resolution\nBalance adjustment as part of dispute resolution\nBalance discrepancies\nCommunity voting on resolution\nCompensation provided as dispute resolution\nProvide compensation\nTypes of compensation\nCritical severity - economic system integrity at risk\nSeverity levels for economic disputes\nDouble spending or accounting errors\nDouble spending evidence\nA specific economic dispute\nConfiguration for economic dispute resolution\nManages economic dispute detection and resolution\nTypes of economic disputes that can occur\nEvidence supporting an economic dispute\nEconomic penalty imposed as dispute resolution\nResolution actions for economic disputes\nCurrent status of economic dispute resolution\nEscalate to governance for policy decision\nEscalated to governance level\nWitness testimony or external verification\nResolution rejected or failed\nFee imposition\nFee waiver\nDispute filed but not yet reviewed\nFreeze disputed assets pending further investigation\nHigh severity - major economic loss or systemic issues\nImpose penalties or fees\nLow severity - minor discrepancies\nMana compensation\nMana penalty\nDisputed mana distribution or allocation\nMarketplace transaction disputes\nMediation in progress\nMedium severity - significant economic impact\nMutual credit disagreements\nNo action required (dispute invalid)\nTypes of economic penalties\nPrice manipulation evidence\nPrice manipulation or unfair pricing\nRedistribute resources\nTrait for providing reputation scores for arbitrator …\nDispute resolved\nConflicting resource allocation claims\nResource allocation logs\nResource allocation priority\nResource redistribution as part of dispute resolution\nReverse disputed transactions\nToken confiscation\nToken compensation\nDisputed token transfers or balances\nTrading restrictions\nTransaction records as evidence\nUnder investigation by economic authorities\nAdd a qualified arbitrator\nAdd an economic authority who can resolve disputes\nApply a resolution to the economic system\nArbitration timeout (seconds)\nEnable automatic dispute detection\nMinimum severity for automatic resolution\nDescription of the dispute\nDetect economic disputes from transaction patterns\nUnique identifier for this dispute\nType of economic dispute\nAmount in dispute (if applicable)\nToken class or resource type involved\nEvidence supporting the dispute\nFile a new economic dispute\nTimestamp when dispute was filed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active disputes\nGet the reputation score for a given DID\nGet dispute resolution history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum time for dispute investigation (seconds)\nCheck if a DID is qualified as an arbitrator\nMaximum number of concurrent disputes per account\nMediation timeout (seconds)\nMinimum amount threshold for disputes (below this …\nCreate a new economic dispute resolver\nCreate a new resolver with reputation provider\nParties involved in the dispute\nProcess periodic maintenance tasks\nEnable reputation-based arbitrator selection\nCurrent resolution status\nResolve a dispute\nNode scope where dispute occurred\nSeverity level of the dispute\nCommunity voting period (seconds)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBulk purchasing tokens for collective buying power\nTokens can be freely transferred to any account\nFungible tokens where each unit is interchangeable (e.g., …\nTokens can only be transferred back to the issuer\nLocal currency tokens with geographic/community …\nMutual credit tokens for community exchange\nNon-fungible tokens representing unique items (e.g., …\nTokens cannot be transferred once issued\nTrait defining generic token accounting behaviour.\nTokens can only be transferred to authorized accounts\nDefines scoping rules for token operations.\nSemi-fungible tokens with both fungible and unique …\nTime banking tokens representing labor hours\nEnhanced metadata for a token class with comprehensive …\nIdentifier for a particular token class stored in a …\nDefines the type of token and its properties.\nRecord of a token transfer for audit trails.\nDefines how tokens can be transferred between accounts.\nReturn a list of all account DIDs stored in this ledger.\nRetrieve a list of all account DIDs stored in the ledger.\nAmount transferred.\nDecrease the balance of <code>owner</code> in the given class by <code>amount</code>.\nCheck if a transfer operation is allowed under token rules.\nToken class being transferred.\nCommunity/federation scope limitations\nCreate a new token class with the given id and metadata.\nUnix timestamp when this token class was created.\nCredit <code>amount</code> of mana to the account.\nAdd <code>amount</code> of mana to every stored account.\nNumber of decimal places for display (0 for whole numbers …\nDetailed description of the token’s purpose.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccount sending the tokens.\nGeographic scope limitations\nRetrieve the balance for <code>owner</code> in the specified class.\nReturn the current mana balance for <code>account</code>.\nFetch metadata for a token class if it exists.\nGet transfer history for an account in a specific token …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDID of the issuer/creator of this token class.\nList all token classes in the ledger.\nMaximum supply limit\nOptional metadata about the transfer.\nOptional metadata for specialized token types.\nMinimum balance required for operations\nIncrease the balance of <code>owner</code> in the given class by <code>amount</code>.\nHuman readable name for the token.\nCreate or load a ledger persisted on disk at <code>path</code>.\nCreate or load a ledger persisted on disk at <code>path</code>.\nOpen or create a sled database at <code>path</code> for mana accounting.\nOpen or create a sled database at <code>path</code> for token …\nCreate a new bulk purchasing token class.\nCreate a new fungible token class.\nCreate a new local currency token class.\nCreate a new mutual credit token class.\nCreate a new time banking token class.\nScoping rules and limitations.\nPersist a new balance for <code>account</code>.\nDeduct <code>amount</code> of mana from the account, erroring if the …\nSymbol or abbreviation for the token.\nUnix timestamp of the transfer.\nAccount receiving the tokens.\nType of token defining its core properties.\nTransaction hash or CID for verification.\nTransfer tokens between accounts within the same class.\nUnique identifier for this transfer.\nRules governing how tokens can be transferred.\nUpdate metadata for an existing token class (only issuer …\nTime-based validity restrictions\nList of authorized recipient DIDs\nBid has been accepted by seller.\nOffer is active and accepting bids.\nBid is active and waiting for response.\nStatus of a marketplace bid.\nBulk purchasing opportunity.\nOffer has been cancelled.\nTransaction was cancelled before completion.\nTransaction has been completed successfully.\nDigital delivery via download or email.\nDigital goods or content.\nThere’s a dispute that needs resolution.\nOffer has expired.\nBid has expired.\nOffer has been fulfilled.\nDetails about how an item or service will be delivered.\nMethods for fulfilling marketplace transactions.\nIn-memory marketplace store for testing and development.\nIn-person service or pickup.\nTransaction is being fulfilled.\nTypes of items that can be traded in the marketplace.\nLabor hours or time banking.\nConfiguration for creating a labor hours marketplace offer\nRepresents a bid to buy goods or services with tokens.\nRepresents an offer to sell goods or services for tokens.\nTrait for marketplace functionality.\nRepresents a completed marketplace transaction.\nFilter criteria for searching marketplace offers.\nStatus of a marketplace offer.\nOffer is temporarily paused.\nPayment has been made, awaiting fulfillment.\nPhysical delivery to an address.\nPhysical goods.\nConfiguration for creating a physical good marketplace …\nBid has been rejected by seller.\nRemote service provision.\nServices offered by individuals or organizations.\nConfiguration for creating a service marketplace offer\nStatus of a marketplace transaction.\nBid has been withdrawn by buyer.\nActual delivery or completion date.\nUnique identifier for this bid.\nWinning bid.\nDID of the account making the bid.\nBuyer DID.\nUnix timestamp when transaction was completed.\nCreate a new bid on an offer.\nCreate a new offer in the marketplace.\nUnix timestamp when offer was created.\nUnix timestamp when bid was created.\nDescription of the item or service.\nExpected delivery or completion date.\nUnix timestamp when offer expires (None = no expiration).\nUnix timestamp when bid expires.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDelivery or fulfillment details.\nGet a bid by ID.\nGet an offer by ID.\nGet transaction history for a user.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of item being offered.\nItem type and details.\nFilter by item type.\nMaximum number of results.\nList all bids for an offer.\nList all offers matching criteria.\nOptional metadata about the offer.\nOptional metadata about the bid.\nMethod of delivery or service provision.\nCreate a new in-memory marketplace store.\nCreate a new bid on a marketplace offer.\nCreate a new marketplace offer for labor hours.\nCreate a new marketplace offer for physical goods.\nCreate a new marketplace offer for services.\nUnique identifier for this offer.\nOffer this bid is responding to.\nOffer that was fulfilled.\nToken class that payment should be made in.\nToken class for payment.\nToken class used for payment.\nFilter by token class.\nPrice per unit in the specified token class.\nPrice per unit offered (can be different from asking …\nFinal price per unit.\nFilter by price range.\nQuantity available.\nQuantity requested.\nQuantity traded.\nRecord a completed transaction.\nGeographic or community scope for this offer.\nFilter by scope.\nDID of the account making the offer.\nSeller DID.\nFilter by seller.\nCurrent status of the offer.\nCurrent status of the bid.\nStatus of the transaction.\nFilter by status.\nTotal price paid.\nTracking information or notes.\nUnique identifier for this transaction.\nUpdate an existing bid.\nUpdate an existing offer.\nDelivery address.\nLocation for service or pickup.\nDelivery mechanism.\nCategory of the good.\nCondition (new, used, etc.).\nType of digital content.\nDuration or unit of service.\nExperience level.\nLicense terms.\nMinimum quantity needed to activate.\nType of service.\nType of work or skill.\nTarget product for bulk buying.\nCounts calls to <code>credit_mana</code>.\nCounts calls to <code>get_balance</code>.\nCounts calls to <code>spend_mana</code>.\nResource class identifier for mutual aid tokens.\nGrant non-transferable mutual aid tokens to a recipient.\nConsume mutual aid tokens from the owner’s balance.\nCredit line is active and available.\nCredit is active and being used.\nAgreement is active\nAgreement has been cancelled\nCredit line has been closed.\nOther community arrangement.\nStatistics about a mutual credit community.\nSpecialized functionality for mutual credit systems. …\nStatus of a credit line.\nCredit scoring information for mutual credit systems.\nStatus of a mutual credit transaction.\nCredit line is in default.\nCredit is in default.\nAgreement is in default\nCredit has been forgiven.\nGoods or services provided.\nIn-memory mutual credit store for development and testing.\nA mutual credit agreement between two parties\nConfiguration for extending mutual credit\nStatus of a mutual credit agreement\nTrait for managing mutual credit systems.\nRecord of a mutual credit transaction.\nCredit is overdue.\nCredit has been fully repaid.\nAgreement has been fully repaid\nMethods for repaying mutual credit.\nRecord of a payment made towards mutual credit.\nCredit line is temporarily suspended.\nDirect token transfer.\nWork performed for creditor.\nDID of the account receiving credit.\nNumber of active credit lines.\nUnique identifier for this agreement\nAmount of credit extended.\nAmount repaid.\nAmount of credit extended\nCalculate credit score for an account based on activity.\nNumber of community members.\nCommunity reputation score.\nCreate a credit line for a community member.\nCreate a new credit line.\nUnix timestamp when credit line was created.\nUnix timestamp when credit was extended.\nUnique identifier for this credit line.\nMaximum credit limit.\nCredit scoring factors.\nCurrent credit used.\nAccount extending credit (creditor).\nDID of the creditor (lender)\nAccount receiving credit (debtor).\nDID of the debtor (borrower)\nUnix timestamp when repayment is due.\nEconomic activity score.\nUnix timestamp when credit line expires (None = no …\nExtend mutual credit between two entities\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all credit lines for an account.\nGet community credit statistics.\nGet credit transaction history for an account.\nGet a credit line by ID.\nGet a credit transaction by ID.\nInterest rate (basis points, e.g., 500 = 5%).\nInterest rate applied.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen the agreement was issued (Unix timestamp)\nLast updated timestamp.\nOptional metadata.\nMethod of repayment.\nNetwork trust score.\nPayment history score.\nPurpose of the credit.\nPurpose or description of the credit\nRecord a mutual credit transaction.\nUnix timestamp of repayment.\nRepay mutual credit by burning tokens.\nWhen repayment is due (Unix timestamp)\nHistory of repayments made\nRepayment rate as a percentage.\nRepayment history.\nOverall creditworthiness score (0-1000).\nStatus of the credit line.\nCurrent status of the transaction.\nCurrent status of the agreement\nStore a mutual credit agreement.\nNumber of successfully repaid transactions.\nToken class this credit line applies to.\nToken class involved.\nToken class being used\nTotal credit limit across all members.\nTotal credit currently in use.\nTotal number of credit transactions.\nUnique identifier for this transaction.\nUpdate a credit line.\nUpdate a credit transaction.\nResource class identifier for reputation reward tokens.\nGrant non-transferable reputation tokens to a recipient.\nConsume reputation tokens from the owner’s balance.\nRecord has been cancelled.\nWork has been disputed.\nIn-memory time banking store for development and testing.\nWork has been performed and recorded.\nTrait for managing time banking records.\nSpecialized functionality for time banking tokens. Time …\nStatus of a time banking record.\nConfiguration for recording and minting time tokens\nWork has been verified by beneficiary.\nStatistics about work done in a community.\nNumber of active workers.\nPerson or organization who received the benefit.\nCalculate total hours worked by a person in a time period.\nDescription of the work done.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all time records for a beneficiary.\nGet work statistics for a community.\nGet time records by work type.\nGet a time record by ID.\nGet all time records for a worker.\nNumber of hours worked (can be fractional).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional metadata.\nCreate a new time record.\nUnix timestamp when work was performed.\nRecord time contribution and mint tokens\nNumber of work records.\nUnique identifier for this time record.\nRecord time worked.\nUnix timestamp when record was created.\nSkill level required (beginner, intermediate, advanced, …\nHours by skill level.\nStatus of the time record.\nTotal hours worked.\nUpdate a time record.\nVerify time worked and update record status.\nType of work performed.\nHours by work type.\nPerson who performed the work.")