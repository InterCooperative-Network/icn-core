searchState.loadedDescShard("icn_economics", 0, "ICN Economics Crate\nMaximum mana spend allowed per single operation.\nAbstraction over the persistence layer storing account …\nThin wrapper exposing convenience methods over a <code>ManaLedger</code>…\nLedger for scoped resource tokens keyed by class ID and …\nEnforces spending limits and forwards to a …\nAdapter over a <code>ResourceLedger</code> with optional DAG event …\nEvents emitted when resource token balances change.\nReturns a list of all known account DIDs.\nExposes a public function to charge mana, wrapping …\nCredit mana to the account.\nCredit every known account with additional mana.\nCredits mana to all known accounts using their reputation …\nCredits mana to the given DID using the provided ledger.\nCredits the specified account with additional mana.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the mana balance for a DID.\nRetrieve the account balance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new adapter around the provided ledger …\nCreate a new enforcer using the supplied adapter.\nCalculates the final mana price for a resource based on …\nPlaceholder function demonstrating use of common types for …\nPersist a new balance for a DID.\nSpend mana from the account.\nDeduct mana from an account via the underlying ledger.\nSpend mana after applying basic policy checks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait defining generic token accounting behaviour.\nBasic metadata for a token class.\nIdentifier for a particular token class stored in a …\nReturn a list of all account DIDs stored in this ledger.\nRetrieve a list of all account DIDs stored in the ledger.\nDecrease the balance of <code>owner</code> in the given class by <code>amount</code>.\nCreate a new token class with the given id and metadata.\nCredit <code>amount</code> of mana to the account.\nAdd <code>amount</code> of mana to every stored account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the balance for <code>owner</code> in the specified class.\nReturn the current mana balance for <code>account</code>.\nFetch metadata for a token class if it exists.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrease the balance of <code>owner</code> in the given class by <code>amount</code>.\nHuman readable name for the token.\nCreate or load a ledger persisted on disk at <code>path</code>.\nCreate or load a ledger persisted on disk at <code>path</code>.\nOpen or create a sled database at <code>path</code> for mana accounting.\nOpen or create a sled database at <code>path</code> for token …\nPersist a new balance for <code>account</code>.\nDeduct <code>amount</code> of mana from the account, erroring if the …\nTransfer tokens between accounts within the same class.\nCounts calls to <code>credit_mana</code>.\nCounts calls to <code>get_balance</code>.\nCounts calls to <code>spend_mana</code>.\nResource class identifier for mutual aid tokens.\nGrant non-transferable mutual aid tokens to a recipient.\nConsume mutual aid tokens from the owner’s balance.\nResource class identifier for reputation reward tokens.\nGrant non-transferable reputation tokens to a recipient.\nConsume reputation tokens from the owner’s balance.")