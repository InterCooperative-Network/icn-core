searchState.loadedDescShard("icn_mesh", 0, "ICN Mesh Crate\nRepresents a job submitted to the ICN mesh computing …\nThe job has been assigned to an executor.\nJob has been assigned to an executor.\nBidding period has closed, selection in progress.\nJob is collecting bids from executors.\nJob was cancelled before completion.\nExecute a compiled CCL WASM module referenced by the job’…\nThe job has been completed successfully by an executor.\nJob has completed successfully.\nProvides dynamic capability checking for executors beyond …\nSimple echo job used for basic integration tests.\nJob is currently being executed.\nThe job failed to complete due to an error.\nJob execution failed.\nPlaceholder until more kinds are defined.\nRepresents a mesh job stored in the DAG for lifecycle …\nRepresents a job assignment stored in the DAG.\nMessage broadcast by the Job Manager to announce the …\nRepresents a bid stored in the DAG, linked to a specific …\nRepresents a snapshot of a job’s execution state for …\nUnique identifier for a mesh job.\nKinds of mesh jobs that can be executed.\nComplete lifecycle information for a job, reconstructed …\nStatus of a job in its lifecycle.\nRepresents an execution receipt stored in the DAG.\nDetailed specification for a mesh job.\nRepresents the current state of a mesh job in its …\nProvides latency information for executors.\nMessage sent by an executor to the job’s originating …\nMessage broadcast by a node to announce a new mesh job …\nRepresents a bid submitted by an executor node for a …\nNo-op implementation of DynamicCapabilityChecker that …\nLatency store that always returns <code>None</code>.\nRepresents intermediate output produced during a …\nThe job has been submitted and is awaiting executor …\nRepresents the current progress status of a job execution. …\nHelper type that wraps bid selection based on reputation.\nExecution resource capabilities offered in a bid.\nPolicy configuration for executor selection.\nMessage sent by an Executor to the Job Manager to submit …\nJob has been submitted and is awaiting bids.\nAdd a bid to this lifecycle.\nAdd a checkpoint to this lifecycle.\nAdd a partial output receipt to this lifecycle.\nFederation constraints - only executors from these …\nTimestamp when the assignment was made.\nThe DID of the executor that has been assigned the job.\nAssignment information if the job was assigned.\nThe bid being submitted.\nUnique identifier for this bid.\nAll bids received for this job.\nCheck if an executor currently has the specified …\nUnique identifier for this checkpoint.\nCheckpoints saved during job execution.\nResources committed by the assigned executor.\nTimestamp when execution completed.\nList of completed stages.\nThe amount of mana allocated by the submitter for this job…\nThe maximum mana the creator is willing to pay.\nThe amount of mana allocated for this job’s execution.\nNumber of CPU cores available for the job.\nCPU time used in milliseconds.\nDecentralized Identifier (DID) of the entity that …\nThe DID of the job creator/submitter.\nGet the current progress based on the latest checkpoint.\nCurrent execution stage/step.\nGet the current status based on what lifecycle events …\nDecode the job specification from <code>spec_bytes</code> or the …\nDocker sandboxing implementation for secure job execution.\nAny error message if execution failed.\nEstimated time to completion in seconds (if available).\nSerialized execution state that can be used to resume.\nCapabilities that this executor offers.\nDecentralized Identifier (DID) of the executor node …\nThe DID of the executor that has been assigned the job.\nDecentralized Identifier (DID) of the executor submitting …\nThe executor that completed the job.\nExecutor that created this checkpoint.\nExecutor that produced this output.\nExecutor reporting this progress.\nFederation memberships of the executor.\nTrust scope of the executor for this job.\nFederated Learning implementation for privacy-preserving …\nFinal negotiated price for the job.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current resource availability for an executor.\nReturn the round-trip latency in milliseconds for the …\nUnique identifier for this job instance (typically a CID …\nUnique identifier for this job (matches the DAG CID).\nCIDs of input data necessary to run the job.\nCID of any intermediate data produced up to this point.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the job is active (can still change state).\nReturns <code>true</code> if this job represents a compiled CCL WASM …\nCheck if an executor is currently available for new jobs.\nCheck if this is a long-running job (has checkpoints or …\nReturns true if the job is in a terminal state.\nThe core job information.\nIdentifier of the job this bid is for.\nThe ID of the job being announced.\nThe ID of the job that has been assigned.\nThe ID of the job this bid is for.\nThe ID of the job that has been assigned.\nThe ID of the job that was executed.\nThe ID of the job this checkpoint belongs to.\nThe ID of the job this partial output belongs to.\nThe ID of the job this progress report belongs to.\nKey requirements from the <code>JobSpec</code> so executors can filter …\nThe high level kind of job.\nGet the latest checkpoint for this job.\nContent Identifier (CID) of the job’s core executable or …\nThe CID of the job manifest, allowing potential executors …\nOptional CID of the job manifest for convenience.\nContent Identifier (CID) of the job’s executable or data …\nMaximum time in milliseconds the submitter is willing to …\nAmount of memory in megabytes available for the job.\nHuman-readable progress message.\nMinimum reputation score required for executors.\nCreate a new lifecycle from just the job.\nGet all partial outputs ordered by timestamp.\nCID of the partial output data.\nMIME type or format of the output.\nUnique identifier for this partial output.\nSize of the output data in bytes.\nLogical names for outputs that the executor is expected to …\nPartial output receipts for long-running jobs.\nThe price (in mana or a defined token) the executor is …\nThe price (in mana) the executor is charging for the job.\nPercentage completion (0-100).\nPercentage completion (0.0-100.0).\nThe execution receipt being submitted.\nExecution receipt if the job was completed.\nList of remaining stages.\nRequired capabilities that executors must have to bid on …\nMinimum resources required for the job.\nMinimal resources required for the job.\nTrust scope requirements for federation-aware job …\nOptional resource requirements for the job.\nThe resources the executor is committing for this job.\nThe resources the executor is committing for this job.\nCID of the result data.\nPlaceholder function demonstrating use of common types for …\nScores a single bid according to a <code>SelectionPolicy</code>.\nReturns the executor DID with the highest bid score …\nSelects the best executor from a list of bids.\nSet the assignment for this lifecycle.\nSet the receipt for this lifecycle.\nSharded execution implementation for distributing large …\nSigns this job with the provided Ed25519 SigningKey.\nSign the bid using the executor’s signing key.\nSign the submission using the executor’s signing key.\nSign this notice with the provided key.\nSign the checkpoint using the executor’s signing key.\nSign the partial output receipt using the executor’s …\nSignature from the creator_did over the (id, manifest_cid, …\nSignature from the executor over the bid fields.\nSignature from the executor over the bid fields to …\nSignature from the job manager confirming this assignment. …\nOptional signature from the executor over the receipt …\nSignature from the executor over the bid fields.\nSignature from the executor.\nSignature from the executor over the checkpoint data.\nSignature from the executor over the output receipt.\nDetailed specification of the job, including inputs, …\nBinary-encoded specification of the job (bincode …\n<strong>Deprecated</strong> JSON-serialized job spec for backward …\nCurrent execution stage/step.\nThe execution stage that produced this output.\nCurrent status of the job.\nAmount of storage in megabytes required or offered for the …\nTimestamp when the job was submitted.\nTimestamp when the bid was submitted.\nDecentralized Identifier (DID) of the entity that …\nWhether the job executed successfully.\nTimestamp when the checkpoint was created.\nTimestamp when this output was produced.\nTimestamp when this progress was reported.\nCreates the canonical message bytes for signing the bid.\nCreates the canonical message bytes for signing the …\nCreates the canonical message bytes for signing the …\n<code>ToString::to_string</code>, but without panic on OOM.\nVerifies the signature of this job against the provided …\nVerify the bid signature against the executor’s …\nVerify both the embedded bid and this submission signature.\nVerify the signature with the manager’s verifying key.\nVerify the checkpoint signature against the executor’s …\nVerify the partial output receipt signature against the …\nWeight applied to the network latency score.\nWeight applied to the bid price (inverse).\nWeight applied to the executor’s reputation score.\nWeight applied to the offered resources.\nThe ID of the winning bid.\nTemplate describing a standard aid job.\nRequest for community aid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique request identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJob specification to execute when matched.\nMatch aid requests with job templates.\nPull open aid resources from a <code>MutualAidRegistry</code> and match …\nDID of the requester.\nTags describing needed resources.\nTags covered by this template.\nBridge network (default)\nCustom network\nDocker execution configuration.\nResult of Docker container execution.\nNetwork configuration for Docker containers.\nResource limits for Docker containers.\nResource usage statistics from Docker container execution.\nDocker container execution environment with security …\nManages multiple Docker sandboxes and execution.\nSecurity configuration for Docker containers.\nHost network (dangerous - avoid in production)\nNetwork mode for Docker containers.\nNo network access\nLinux capabilities to add (if any)\nAllow outbound internet access\nCheck if Docker is available on the system.\nCommand to execute\nContainer ID for reference\nCPU cores limit (can be fractional, e.g., 1.5)\nCPU shares (relative weight)\nTotal CPU time used\nDisk I/O read limit in bytes per second\nDisk bytes read\nDisk I/O write limit in bytes per second\nDisk bytes written\nDNS servers to use\nLinux capabilities to drop\nKill all running containers (emergency cleanup).\nEnvironment variables\nExecute a job in a managed Docker sandbox.\nExecute a job in the Docker sandbox.\nContainer image and execution parameters\nExecution time\nExit code of the container\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Docker sandbox from job specifications.\nCreate Docker resource limits from mesh job resource …\nGet current capacity information.\nCreate resource limits for high-security jobs.\nDisable inter-container communication\nDocker image to use\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate network configuration with limited internet access.\nMemory limit in bytes\nNetwork mode (none, bridge, host, custom)\nNetwork bandwidth limit in bytes per second\nNetwork configuration\nNetwork bytes received\nNetwork bytes transmitted\nCreate a new Docker sandbox manager.\nDisable privilege escalation\nPeak memory usage in bytes\nMaximum PIDs (process limit)\nExposed ports (internal_port -&gt; external_port)\nRun container with read-only root filesystem\nResource limits for the container\nResource usage statistics\nCreate restricted network configuration (no external …\nCreate secure default configuration.\nSecurity configuration\nSecurity options (e.g., seccomp, apparmor)\nStandard error\nStandard output\nImage tag/version\nExecution timeout\nCreate configuration for trusted executors.\nUser to run as (format: “uid:gid” or “user:group”)\nVolume mounts (host_path -&gt; container_path)\nWorking directory\nActivation functions for neural networks.\nAllow sharing of aggregated statistics\nAggregating updates\nQuality metrics for aggregation.\nResult of federated training aggregation.\nAggregation strategies for combining model updates.\nRound was cancelled\nClassification with class names\nCollecting model updates\nRound completed successfully\nTraining should continue\nConverged based on accuracy improvement\nConverged based on loss stabilization\nConvergence criteria for stopping training.\nConvergence status of federated training.\nCustom model with user-defined architecture\nCustom aggregation function\nCustom proof mechanism\nData distribution characteristics.\nData sharing levels for privacy.\nInformation about training dataset.\nDifferential privacy configuration.\nDiverged (quality decreased)\nHomomorphic encryption schemes.\nRound failed\nFederated averaging (FedAvg)\nConfiguration for federated learning coordinator.\nFederated learning coordinator that manages the training …\nInformation about a federated learning participant.\nA federated learning training round.\nFull data sharing (not recommended for privacy)\nHomomorphic encryption configuration.\nRound is being set up\nNeural network layer specification.\nNeural network layer types.\nLinear model (regression, classification)\nLoss functions for training.\nReached maximum rounds\nMedian aggregation (robust to outliers)\nModel architecture specification.\nModel metadata.\nSpecification for a federated learning model.\nUpdate from a participant after local training.\nNo raw data sharing, only model updates\nMulti-label classification\nNeural network with layer specifications\nNoise mechanisms for differential privacy.\nOptimizer types for training.\nHistory of participant involvement.\nPrivacy configuration for federated learning.\nCryptographic proof that training was performed correctly.\nTypes of training proofs.\nQuality thresholds for accepting contributions.\nRegression with value range\nRegularization types.\nConfiguration for a training round.\nStatus of a training round.\nSecure aggregation with cryptographic protection\nStatus of a federated learning session.\nAllow sharing of synthetic data\nTrusted execution environment attestation\nTarget/label information.\nTimed out\nLocal training in progress\nTraining hyperparameters.\nMetadata about local training.\nTree-based model\nVerifiable computation proof\nWaiting for participants to join\nWeighted average by dataset size\nWeighted average by contribution quality\nZero-knowledge proof of computation\nAggregation strategy\nNumber of anomalous contributions detected\nModel architecture identifier\nAverage contribution quality\nBatch size for local training\nCancel a federated learning session.\nClipping threshold for gradients\nComputational capacity\nConsensus score among participants\nVariance in participant contributions\nConvergence criteria\nConvergence status\nCreation timestamp\nDataset information the model was trained on\nDataset size the participant has\nDeadline for this round\nDefault timeout for rounds\nDelta parameter for (ε,δ)-differential privacy\nRegional/demographic distribution info\nParticipant’s DID\nDifferential privacy settings\nData distribution characteristics\nPrivacy budget (epsilon)\nParticipants excluded and reasons\nFeature dimensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet coordinator capacity.\nGet session status and results.\nGlobal model accuracy after aggregation\nGlobal model loss after aggregation\nGlobal model state at start of round\nNew global model after aggregation\nGradient norms for quality assessment\nHomomorphic encryption settings\nHyperparameters for training\nParticipants included in aggregation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether data is IID (independent and identically …\nKey size\nLayer type\nLearning rate\nLocal accuracy (if applicable)\nNumber of local epochs per round\nLocal training epochs\nLocal training loss\nNumber of local samples used\nMaximum concurrent sessions\nMaximum data sharing allowed\nMaximum gradient norm (for anomaly detection)\nMaximum loss increase allowed\nMaximum rounds of federated training\nMaximum rounds per session\nMaximum training time\nModel metadata\nModel accuracy metrics\nMinimum accuracy improvement required\nMinimum participants for any session\nMinimum gradient norm\nMinimum improvement required to continue training\nMinimum number of participants required\nMinimum participants required to proceed\nModel name/identifier\nCreate a new federated learning coordinator.\nNoise budget for operations\nNoise mechanism\nOptimizer type\nModel parameters (serialized weights, etc.)\nLayer-specific parameters\nModel parameters after local training\nParticipant who created this update\nParticipants in this round\nParticipation history\nMaximum rounds without improvement before stopping\nPrivacy configuration\nProcess a model update from a participant.\nProof data\nProof of training (if required)\nType of proof\nAggregation quality metrics\nQuality thresholds for contributions\nGeographic/network region\nReliability score (0-1)\nReputation score\nCompute resources used\nTraining parameters for this round\nRound number (0-based)\nRound this update belongs to\nEncryption scheme\nSecure aggregation settings\nSignature from participant\nCreate a simple neural network model specification.\nDataset size (number of samples)\nSkewness measure (0 = uniform, higher = more skewed)\nStart a new federated learning session.\nRound status\nSuccessful completions\nTarget accuracy to reach\nLabel/target information\nTarget number of participants\nTotal rounds participated in\nTraining metadata\nTraining time taken\nNumber of units/neurons\nLast update timestamp\nVerification key\nModel version\nCounts the total number of bids received across all jobs.\nCounts the total number of jobs that have been assigned to …\nTracks the number of jobs currently in the bidding phase.\nCounts the total number of jobs that have been completed …\nTracks the number of jobs currently being executed.\nCounts the total number of jobs that have failed.\nCounts the total number of jobs submitted to the mesh.\nRecords the time from job submission to assignment in …\nRecords the time from job submission to completion in …\nRecords the time from job assignment to receipt processing …\nTracks the number of jobs currently waiting in the runtime …\nCounts calls to <code>schedule_mesh_job</code>.\nCounts calls to <code>select_executor</code>.\nMetadata about the aggregation process.\nStrategy for aggregating shard results.\nSimple concatenation of outputs\nCustom aggregation logic\nCustom validation script/expression\nData processing sharding strategy.\nData range specification for partitioning.\nA single shard of a larger job that can be executed …\nJob sharding engine that splits jobs into executable …\nMap-reduce style aggregation\nMap-reduce sharding strategy.\nMaximum output size in bytes\nMinimum output size in bytes\nNo aggregation (keep separate)\nExpected output format for shard results.\nUnit for data range specifications.\nRendering job sharding strategy (by frame ranges).\nRequired file format/magic bytes\nShard coordinator that manages distributed execution.\nMetadata about shard execution.\nInput data for a job shard.\nSpecification for expected output from a shard.\nResult from executing a single shard.\nAggregated result from all shards of a job.\nTrait for job sharding strategies.\nAverage/statistical aggregation\nValidation rule for shard outputs.\nFinal aggregated output (if applicable)\nAggregation metadata\nTime taken for aggregation\nCalculate optimal number of shards for a job\nDetermine if a job can be sharded\nCancel all active shard executions.\nCompletion time\nCoordinate execution of multiple job shards.\nCoordinator that performed aggregation\nSplit a job into shards\nRange specification for data partitioning\nDependencies on other shards (for complex workflows)\nEnding offset (exclusive)\nError message (if failed)\nEstimate resource requirements for sharded execution.\nExecution receipt from the executor\nTime taken to execute\nExecutor that ran this shard\nExpected output specification\nNumber of failed shards\nExpected output format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current coordination capacity.\nBinary data (for small inputs)\nCIDs of input data for this shard\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParent job ID\nThe actual job specification for this shard\nMaximum expected output size in bytes\nExecution metadata\nCreate a new job sharding engine.\nCreate a new shard coordinator.\nOutput data CID (if successful)\nKey-value parameters for this shard\nID of the parent job this shard belongs to\nPriority of this shard (higher numbers = higher priority)\nRegister a custom sharding strategy for a job kind.\nResources used\nUnique identifier for this shard\nShard that was executed\nShard index (0-based)\nInput data specific to this shard\nShard a job into executable pieces.\nResults from all shards\nDetermine if a job should be sharded.\nStarting offset (inclusive)\nStart time\nStrategy used for aggregation\nWhether execution was successful\nOverall success status\nNumber of successful shards\nTotal execution time across all shards\nTotal number of shards in the job\nUnit of the range (bytes, records, frames, etc.)\nValidate that shards are correctly formed\nOutput validation rules")