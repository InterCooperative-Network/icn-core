searchState.loadedDescShard("icn_mesh", 0, "ICN Mesh Crate\nRepresents a job submitted to the ICN mesh computing …\nThe job has been assigned to an executor.\nExecute a compiled CCL WASM module referenced by the job’…\nThe job has been completed successfully by an executor.\nSimple echo job used for basic integration tests.\nThe job failed to complete due to an error.\nPlaceholder until more kinds are defined.\nMessage broadcast by the Job Manager to announce the …\nUnique identifier for a mesh job.\nKinds of mesh jobs that can be executed.\nDetailed specification for a mesh job.\nRepresents the current state of a mesh job in its …\nMessage sent by an executor to the job’s originating …\nMessage broadcast by a node to announce a new mesh job …\nRepresents a bid submitted by an executor node for a …\nThe job has been submitted and is awaiting executor …\nHelper type that wraps bid selection based on reputation.\nExecution resource capabilities offered in a bid.\nPolicy configuration for executor selection.\nMessage sent by an Executor to the Job Manager to submit …\nThe bid being submitted.\nThe amount of mana allocated by the submitter for this job…\nThe maximum mana the creator is willing to pay.\nNumber of CPU cores available for the job.\nDecentralized Identifier (DID) of the entity that …\nThe DID of the job creator/submitter.\nDecentralized Identifier (DID) of the executor node …\nThe DID of the executor that has been assigned the job.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for this job instance (typically a CID …\nCIDs of input data necessary to run the job.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this job represents a compiled CCL WASM …\nIdentifier of the job this bid is for.\nThe ID of the job being announced.\nThe ID of the job that has been assigned.\nKey requirements from the <code>JobSpec</code> so executors can filter …\nThe high level kind of job.\nContent Identifier (CID) of the job’s core executable or …\nThe CID of the job manifest, allowing potential executors …\nOptional CID of the job manifest for convenience.\nMaximum time in milliseconds the submitter is willing to …\nAmount of memory in megabytes available for the job.\nLogical names for outputs that the executor is expected to …\nThe price (in mana or a defined token) the executor is …\nThe execution receipt being submitted.\nMinimum resources required for the job.\nMinimal resources required for the job.\nThe resources the executor is committing for this job.\nPlaceholder function demonstrating use of common types for …\nScores a single bid according to a <code>SelectionPolicy</code>.\nReturns the executor DID with the highest bid score …\nSelects the best executor from a list of bids.\nSigns this job with the provided Ed25519 SigningKey.\nSign the bid using the executor’s signing key.\nSign the submission using the executor’s signing key.\nSign this notice with the provided key.\nSignature from the creator_did over the (id, manifest_cid, …\nSignature from the executor over the bid fields.\nSignature from the executor over the bid fields to …\nSignature from the job manager confirming this assignment. …\nOptional signature from the executor over the receipt …\nDetailed specification of the job, including inputs, …\nCreates the canonical message bytes for signing the bid.\nVerifies the signature of this job against the provided …\nVerify the bid signature against the executor’s …\nVerify both the embedded bid and this submission signature.\nVerify the signature with the manager’s verifying key.\nWeight applied to the bid price (inverse).\nWeight applied to the executor’s reputation score.\nWeight applied to the offered resources.")