searchState.loadedDescShard("icn_mesh", 0, "ICN Mesh Crate\nRepresents a job submitted to the ICN mesh computing …\nThe job has been assigned to an executor.\nJob has been assigned to an executor.\nBidding period has closed, selection in progress.\nJob is collecting bids from executors.\nJob was cancelled before completion.\nExecute a compiled CCL WASM module referenced by the job’…\nThe job has been completed successfully by an executor.\nJob has completed successfully.\nSimple echo job used for basic integration tests.\nJob is currently being executed.\nThe job failed to complete due to an error.\nJob execution failed.\nPlaceholder until more kinds are defined.\nRepresents a mesh job stored in the DAG for lifecycle …\nRepresents a job assignment stored in the DAG.\nMessage broadcast by the Job Manager to announce the …\nRepresents a bid stored in the DAG, linked to a specific …\nUnique identifier for a mesh job.\nKinds of mesh jobs that can be executed.\nComplete lifecycle information for a job, reconstructed …\nStatus of a job in its lifecycle.\nRepresents an execution receipt stored in the DAG.\nDetailed specification for a mesh job.\nRepresents the current state of a mesh job in its …\nProvides latency information for executors.\nMessage sent by an executor to the job’s originating …\nMessage broadcast by a node to announce a new mesh job …\nRepresents a bid submitted by an executor node for a …\nLatency store that always returns <code>None</code>.\nThe job has been submitted and is awaiting executor …\nHelper type that wraps bid selection based on reputation.\nExecution resource capabilities offered in a bid.\nPolicy configuration for executor selection.\nMessage sent by an Executor to the Job Manager to submit …\nJob has been submitted and is awaiting bids.\nAdd a bid to this lifecycle.\nTimestamp when the assignment was made.\nThe DID of the executor that has been assigned the job.\nAssignment information if the job was assigned.\nThe bid being submitted.\nUnique identifier for this bid.\nAll bids received for this job.\nResources committed by the assigned executor.\nTimestamp when execution completed.\nThe amount of mana allocated by the submitter for this job…\nThe maximum mana the creator is willing to pay.\nThe amount of mana allocated for this job’s execution.\nNumber of CPU cores available for the job.\nCPU time used in milliseconds.\nDecentralized Identifier (DID) of the entity that …\nThe DID of the job creator/submitter.\nGet the current status based on what lifecycle events …\nDecode the job specification from <code>spec_bytes</code> or the …\nAny error message if execution failed.\nDecentralized Identifier (DID) of the executor node …\nThe DID of the executor that has been assigned the job.\nDecentralized Identifier (DID) of the executor submitting …\nThe executor that completed the job.\nFinal negotiated price for the job.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the round-trip latency in milliseconds for the …\nUnique identifier for this job instance (typically a CID …\nUnique identifier for this job (matches the DAG CID).\nCIDs of input data necessary to run the job.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the job is active (can still change state).\nReturns <code>true</code> if this job represents a compiled CCL WASM …\nReturns true if the job is in a terminal state.\nThe core job information.\nIdentifier of the job this bid is for.\nThe ID of the job being announced.\nThe ID of the job that has been assigned.\nThe ID of the job this bid is for.\nThe ID of the job that has been assigned.\nThe ID of the job that was executed.\nKey requirements from the <code>JobSpec</code> so executors can filter …\nThe high level kind of job.\nContent Identifier (CID) of the job’s core executable or …\nThe CID of the job manifest, allowing potential executors …\nOptional CID of the job manifest for convenience.\nContent Identifier (CID) of the job’s executable or data …\nMaximum time in milliseconds the submitter is willing to …\nAmount of memory in megabytes available for the job.\nCreate a new lifecycle from just the job.\nLogical names for outputs that the executor is expected to …\nThe price (in mana or a defined token) the executor is …\nThe price (in mana) the executor is charging for the job.\nThe execution receipt being submitted.\nExecution receipt if the job was completed.\nMinimum resources required for the job.\nMinimal resources required for the job.\nOptional resource requirements for the job.\nThe resources the executor is committing for this job.\nThe resources the executor is committing for this job.\nCID of the result data.\nPlaceholder function demonstrating use of common types for …\nScores a single bid according to a <code>SelectionPolicy</code>.\nReturns the executor DID with the highest bid score …\nSelects the best executor from a list of bids.\nSet the assignment for this lifecycle.\nSet the receipt for this lifecycle.\nSigns this job with the provided Ed25519 SigningKey.\nSign the bid using the executor’s signing key.\nSign the submission using the executor’s signing key.\nSign this notice with the provided key.\nSignature from the creator_did over the (id, manifest_cid, …\nSignature from the executor over the bid fields.\nSignature from the executor over the bid fields to …\nSignature from the job manager confirming this assignment. …\nOptional signature from the executor over the receipt …\nSignature from the executor over the bid fields.\nSignature from the executor.\nDetailed specification of the job, including inputs, …\nBinary-encoded specification of the job (bincode …\n<strong>Deprecated</strong> JSON-serialized job spec for backward …\nCurrent status of the job.\nAmount of storage in megabytes required or offered for the …\nTimestamp when the job was submitted.\nTimestamp when the bid was submitted.\nDecentralized Identifier (DID) of the entity that …\nWhether the job executed successfully.\nCreates the canonical message bytes for signing the bid.\nVerifies the signature of this job against the provided …\nVerify the bid signature against the executor’s …\nVerify both the embedded bid and this submission signature.\nVerify the signature with the manager’s verifying key.\nWeight applied to the network latency score.\nWeight applied to the bid price (inverse).\nWeight applied to the executor’s reputation score.\nWeight applied to the offered resources.\nThe ID of the winning bid.\nTemplate describing a standard aid job.\nRequest for community aid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique request identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJob specification to execute when matched.\nMatch aid requests with job templates.\nPull open aid resources from a <code>MutualAidRegistry</code> and match …\nDID of the requester.\nTags describing needed resources.\nTags covered by this template.\nCounts the total number of bids received across all jobs.\nCounts the total number of jobs that have been assigned to …\nTracks the number of jobs currently in the bidding phase.\nCounts the total number of jobs that have been completed …\nTracks the number of jobs currently being executed.\nCounts the total number of jobs that have failed.\nCounts the total number of jobs submitted to the mesh.\nRecords the time from job submission to assignment in …\nRecords the time from job submission to completion in …\nRecords the time from job assignment to receipt processing …\nTracks the number of jobs currently waiting in the runtime …\nCounts calls to <code>schedule_mesh_job</code>.\nCounts calls to <code>select_executor</code>.")