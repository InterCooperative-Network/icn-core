searchState.loadedDescShard("icn_reputation", 0, "ICN Reputation System\nSimple in-memory reputation tracker for tests.\nStore for retrieving and updating executor reputation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric reputation score for the given …\nComprehensive reputation integration with executor …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty reputation store.\nUpdates reputation metrics for an executor.\nRecords an attempt to verify a zero-knowledge proof.\nSets the reputation score for a specific executor.\nSled-backed implementation of the <code>ReputationStore</code> trait.\nTrust Aggregation\nTrust Score Calculation Engine\nTrust Decay Models\nTrust Graph Data Structures and Core Types\nTrust Path Discovery\nBasic trust level\nCached reputation information for performance\nReached community champion status\nSimplified DID resolver trait\nParticipating in discussions\nEstablished trust\nQuality metrics for job execution\nSimplified identity types to avoid circular dependencies …\nHelping with proposal execution\nAlternative executor option\nExecutor ranking information\nExecutor unavailability\nReached governance leader status\nSimplified governance module trait\nGovernance participation\nTypes of governance participation\nGovernance voting weight based on reputation\nHigh trust level\nFailed job execution\nSuccessful job execution\nReasons for job execution failure\nMalicious behavior\nSimplified ManaLedger trait to avoid circular dependencies …\nReached maximum reputation level\nMaximum trust (community leader)\nSimplified mesh types to avoid circular dependencies In a …\nReached network contributor status\nSummary of performance across domains\nSimplified governance types to avoid circular dependencies …\nQuality metrics for proposals\nSubmitting proposals\nQuality issues\nExecutor selection result with reputation factors\nNetwork routing decision with reputation factors\nTypes of reputation events\nConfiguration for reputation integration\nComprehensive reputation integration engine\nStatistics about reputation integration\nReputation milestones\nReputation milestone reached\nResource constraints\nAlternative routing option\nNetwork routing performance\nRouting performance metrics\nRouting preference based on reputation\nTechnical failure\nTimeout\nTrust attestation received\nTrust levels based on reputation\nReached trusted executor status\nLost trusted status due to violations\nUntrusted (new or problematic)\nQuality metrics for voting\nVoting on proposals\nAlternative executors considered\nAlternative routes considered\nAvailability score\nAverage job quality score\nAverage latency\nAverage reputation score across cached entries\nUpdate frequency for background reputation recalculation\nBandwidth efficiency\nBase voting weight\nNumber of cached reputation entries\nCalculate governance voting weight based on reputation\nClarity and completeness\nAlignment with community benefit\nCommunity support level\nCompliance with job requirements\nConfidence level in selection\nConsistency with past voting patterns\nBonus multiplier for consistent good behavior\nConsistency score across all domains\nCost competitiveness\nCredit mana to an account\nDebit mana from an account\nReputation decay rate per day for inactive users\nReputation in specific domains\nFinal effective weight\nEnable reputation-based mana bonuses\nEnable real-time reputation updates\nSelected executor\nAlternative executor DID\nExecutor DID\nNumber of executor rankings maintained\nWeight of reputation in executor selection (0.0 to 1.0)\nExpected performance metrics\nGovernance expertise score\nNumber of failed routes\nFeasibility assessment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current mana balance for a DID\nGet reputation integration statistics\nGet proposal by ID\nGovernance participation score\nWeight of reputation in governance voting (0.0 to 1.0)\nNumber of governance weights calculated\nImplementation success rate\nEvidence of informed decision-making\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJob execution success rate\nLast weight calculation\nLast interaction time\nLast update time\nLast ranking update\nMaximum mana bonus percentage from reputation\nMinimum reputation required for executor role\nMinimum reputation for governance participation\nCreate a new reputation integration engine\nOther factors (cost, capability, availability)\nOutput quality score\nOverall execution score\nParticipant DID\nPeer identifier\nPerformance history summary\nPreference score (higher is better)\nRoute quality score\nQuality track record\nOverall ranking score\nNumber of recent events tracked\nRecord a reputation event\nReason for not selecting\nReason for not selecting\nReliability metrics\nReliability score\nReputation multiplier\nReputation component of score\nResolve a DID to its document\nResource efficiency (resources used vs. allocated)\nSelected route\nAlternative route\nNumber of routing preferences tracked\nNetwork routing reliability\nWeight of reputation in network routing (0.0 to 1.0)\nSelection score\nQuality score\nCurrent reputation score\nSelect best executor for a job based on reputation and …\nSelect best network route based on reputation and …\nTotal selection score\nSpecialization areas\nStart the reputation integration engine\nStop the reputation integration engine\nSuccess rate\nNumber of successful routes\nGet event receiver for reputation events\nTime efficiency (actual vs. estimated)\nTimeliness of vote\nTrust level\nReputation-based trust score for route\nTrust score for this peer\nPenalty multiplier for violations\nCounts calls to <code>record_execution</code> across reputation stores.\nCounts calls to <code>record_proof_attempt</code> across reputation …\nPersistent sled-backed reputation store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpens or creates a sled-backed store at the given path.\nActivity-based trust (based on interaction frequency)\nResult of trust aggregation for an entity\nConfiguration for trust aggregation algorithms\nBayesian combination with prior beliefs\nDifferent methods for combining trust signals\nCustom weighted combination with non-linear transforms\nDirect trust relationship between two entities\nEndorsement from other trusted entities\nFuzzy logic combination\nIndirect trust through intermediaries\nMaximum likelihood estimation\nNetwork position-based trust (centrality measures)\nHistorical performance metrics\nReputation-based trust (from reputation system)\nEngine for aggregating multiple trust signals into …\nDifferent types of trust signals that can be aggregated\nWeighted geometric mean (emphasizes consistency)\nWeighted harmonic mean (emphasizes weakest signals)\nWeighted arithmetic mean\nAggregate trust for multiple entities and return ranked …\nAggregate trust signals for a specific entity\nMethod for combining multiple signals\nConfidence in the aggregated score (0.0 to 1.0)\nConfidence decay factor when fewer signals are available\nThe target entity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum number of signals required for reliable aggregation\nCreate a new trust aggregator with default configuration\nWhether to normalize final scores to [0, 1] range\nOutlier detection threshold (standard deviations)\nBreakdown of scores by signal type\nNumber of signals used in aggregation\nVariance in the input signals\nWeights for different types of trust signals\nTimestamp when aggregation was performed\nFinal aggregated trust score\nCreate a new trust aggregator with custom configuration\nConfiguration parameters for trust score calculation …\nEngine for calculating trust scores using various …\nCalculate PageRank-style trust scores for all nodes in the …\nCalculate trust score for a specific target node from a …\nCalculate weighted trust scores that combine direct and …\nConvergence threshold for iterative algorithms\nDamping factor for PageRank-style calculations (typically …\nWeight for direct vs. indirect trust relationships\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of iterations for iterative algorithms\nMaximum trust score (caps extremely high scores)\nMinimum trust score (prevents scores from going to zero)\nCreate a new trust calculation engine with default …\nCreate a new trust calculation engine with custom …\nCustom decay function combining multiple factors\nRepresents a step interval for step decay model\nDifferent types of decay models for trust relationships\nStatistics about decay effects on the trust graph\nConfiguration for distance-based trust decay\nExponential decay with configurable half-life\nConfiguration for interaction-based trust decay\nLinear decay over a specified period\nSigmoid decay with configurable steepness\nStep decay with discrete levels\nEngine for calculating various types of trust decay\nUpdate a trust graph by applying decay to all edges\nAverage age of all edges in seconds\nAverage decay factor across all edges\nCalculate combined decay factor considering all decay types\nGet statistics about decay effects on the graph\nCalculate distance-based decay factor for a trust path\nCalculate interaction-based decay/boost factor for a trust …\nCalculate time-based decay factor for a trust edge\nGet the percentage of critically decayed edges\nNumber of edges with decay factor &lt; 0.1\nDecay factor per hop (0.0 to 1.0)\nDuration of this interval in seconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate trust score with decay for a specific …\nRate of decay when no interactions occur\nBoost factor for recent positive interactions\nTime period after which lack of interaction causes decay\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum effective distance before trust goes to minimum\nMaximum number of interactions to consider for boost\nMinimum trust score regardless of distance\nMultiplier to apply during this interval\nCreate a new decay calculator with default exponential …\nGet the percentage of significantly decayed edges\nNumber of edges with decay factor &lt; 0.5\nTotal number of edges analyzed\nWhether to use cumulative or per-hop decay\nCreate a decay calculator with custom configurations\nCreate a decay calculator with custom time decay model\nRepresents a trust relationship between two …\nCore trust graph structure representing the network of …\nAdd or update a trust edge in the graph\nCache a computed trust score\nClean up expired edges based on a time provider\nUnix timestamp when this trust relationship was established\nGet the number of edges in the graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe entity extending trust (source)\nGet all entities (DIDs) in the graph\nGet a cached trust score if available and not stale\nGet a trust edge between two entities\nGet all incoming edges to an entity\nGet all outgoing edges from an entity\nIncrement the interaction count\nNumber of successful interactions that contributed to this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear all cached scores\nCheck if this trust edge has expired based on a time …\nOptional metadata about the trust relationship\nCreate a new trust edge with the given parameters\nCreate a new empty trust graph\nGet the number of nodes in the graph\nRemove a trust edge from the graph\nThe entity receiving trust (target)\nUpdate the trust weight and timestamp\nUnix timestamp when this trust relationship was last …\nRaw trust score (0.0 to 1.0)\nConfiguration for trust path discovery algorithms\nRepresents a path through the trust graph\nEngine for discovering trust paths between entities\nAdd an edge to the path and update metrics\nCheck if this path contains a specific node\nDistance penalty factor (applied exponentially with path …\nThe sequence of trust edges forming this path\nCalculate effective trust score with distance penalty\nFind the best trust path between source and target\nFind multiple good trust paths between source and target\nFind all reachable nodes from a source within a given …\nFind the shortest trust path (minimum number of hops) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all intermediate nodes in the path (excluding source …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the path (number of hops)\nMaximum path length to consider\nMaximum number of paths to return\nMinimum trust threshold for considering a path\nCreate a new pathfinder with default configuration\nCreate a new trust path\nThe starting node of the path\nThe ending node of the path\nTime decay half-life in seconds\nThe total trust score along this path\nCreate a new pathfinder with custom configuration")