searchState.loadedDescShard("icn_node", 0, "ICN Node Library This library exposes functionality to …\nICN Node (<code>icn-node</code>)\nFile-based persistence.\nIn-memory store, volatile.\nConfiguration values for running an ICN node.\nRocksDB database backend (requires <code>persist-rocksdb</code> …\nSled database backend (requires <code>persist-sled</code> feature).\nSQLite database backend (requires <code>persist-sqlite</code> feature).\nStorage backends supported by the node.\nApply CLI overrides onto this configuration.\nOverride configuration values with <code>ICN_*</code> environment …\nOptional bearer token for Authorization header auth.\nPath to read the bearer token from if not provided inline.\nPeers this node has joined in a federation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from a TOML or YAML file. The format is …\nPath where governance proposals and votes are persisted …\nIdentifier of the key within the HSM.\nOptional path to an HSM library or connection string.\nInitialize a DAG store based on this configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnvironment variable name containing the passphrase for …\nEncrypted private key file for the node identity.\nHow many days between automatic key rotations.\nPath where the node DID string will be stored/loaded.\nPath where the node’s private key will be stored/loaded …\nEnsure directories for all configured paths exist.\nPath where executor reputation is persisted via sled.\nPersist this configuration to the given path in TOML …\nTLS certificate path for HTTPS. Requires <code>tls_key_path</code> as …\nTLS private key path for HTTPS. Requires <code>tls_cert_path</code> as …\nMinimum TLS version to accept (e.g. “1.3”).\nRequest body for submitting a mesh job. Note: <code>id</code> and …\nRequest body for submitting an execution receipt\nBuild an Axum <code>Router</code> using an already initialized …\nConstruct a router for tests or embedding with optional …\nBearer token required via the <code>Authorization</code> header\nPath to a file containing the bearer token\nOptional path to a configuration file (TOML or YAML)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier of the key within the HSM.\nPath to an HSM library for key retrieval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnvironment variable name containing the passphrase for …\nEncrypted private key file for the node identity.\nLoad or generate the node identity based on the provided …\nPath to store or load the node DID string.\nPath to store or load the node private key (bs58 encoded).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad parameters from the given file path. If the file does …\nUpdate a parameter and persist changes to disk.")