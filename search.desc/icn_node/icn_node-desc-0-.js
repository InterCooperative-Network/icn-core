searchState.loadedDescShard("icn_node", 0, "ICN Node Library This library exposes functionality to …\nICN Node (<code>icn-node</code>)\nStored parameters for a registered zero-knowledge circuit.\nIn-memory registry mapping circuit slugs and versions to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch a circuit record if present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGroth16 proving key bytes.\nRegister a new circuit version.\nCorresponding verifying key bytes.\nList all known versions for a circuit slug.\nFile-based persistence.\nIn-memory store, volatile.\nConfiguration values for running an ICN node.\nRocksDB database backend (requires <code>persist-rocksdb</code> …\nSled database backend (requires <code>persist-sled</code> feature).\nSQLite database backend (requires <code>persist-sqlite</code> feature).\nStorage backends supported by the node.\nApply CLI overrides onto this configuration.\nOverride configuration values with <code>ICN_*</code> environment …\nEnable demo mode with preloaded test data and memory-only …\nPeers this node has joined in a federation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from a TOML or YAML file. The format is …\nInitialize a DAG store based on this configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many days between automatic key rotations.\nEnsure directories for all configured paths exist.\nPersist this configuration to the given path in TOML …\nForce stub services for development and testing\nAdditional trusted credential issuer DIDs\nRequest body for submitting a mesh job. Note: <code>id</code> and …\nRequest body for submitting an execution receipt\nBuild an Axum <code>Router</code> using an already initialized …\nConstruct a router for tests or embedding with optional …\nBearer token required via the <code>Authorization</code> header\nPath to a file containing the bearer token\nSelect the appropriate network service based on <code>NodeConfig</code>.\nOptional path to a configuration file (TOML or YAML)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier of the key within the HSM.\nPath to an HSM library for key retrieval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnvironment variable name containing the passphrase for …\nEncrypted private key file for the node identity.\nLoad or generate the node identity based on the provided …\nPath to store or load the node DID string.\nPath to store or load the node private key (bs58 encoded).\nBase64 encoded bincode <code>JobSpec</code> bytes.\nDeprecated JSON representation of the job spec.\nTrusted issuer DID(s) for credential verification\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad parameters from the given file path. If the file does …\nUpdate a parameter and persist changes to disk.")