searchState.loadedDescShard("icn_node", 0, "ICN Node Library This library exposes functionality to …\nICN Node (<code>icn-node</code>)\nStored parameters for a registered zero-knowledge circuit.\nIn-memory registry mapping circuit slugs and versions to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch a circuit record if present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGroth16 proving key bytes.\nRegister a new circuit version.\nCorresponding verifying key bytes.\nList all known versions for a circuit slug.\nFile-based persistence.\nIn-memory store, volatile.\nConfiguration values for running an ICN node.\nRocksDB database backend (requires <code>persist-rocksdb</code> …\nSled database backend (requires <code>persist-sled</code> feature).\nSQLite database backend (requires <code>persist-sqlite</code> feature).\nStorage backends supported by the node.\nAdditional listen addresses\nApply CLI overrides onto this configuration.\nOverride configuration values with <code>ICN_*</code> environment …\nBootstrap retry interval in seconds\nBootstrap peers to connect to on startup\nConnection timeout in milliseconds\nEnable demo mode with preloaded test data and memory-only …\nEnable mDNS peer discovery\nEnable P2P networking\nCapabilities this node advertises for mesh execution.\nPeers this node has joined in a federation.\nFederations this node is a member of.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad configuration from a TOML or YAML file. The format is …\nHeartbeat interval in milliseconds\nInitialize a DAG store based on this configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKademlia DHT replication factor\nHow many days between automatic key rotations.\nPrimary listen address for P2P networking\nMaximum number of peers to maintain connections with\nMaximum peers allowed per IP address\nPeer discovery interval in seconds\nEnsure directories for all configured paths exist.\nCustom protocol ID for network isolation\nRequest timeout in milliseconds\nPersist this configuration to the given path in TOML …\nForce stub services for development and testing\nAdditional trusted credential issuer DIDs\nDevelopment mode - mixed services, suitable for local …\nProduction mode - uses all production services, persistent …\nRuntime configuration mode for explicit service selection\nRequest body for submitting a mesh job. Note: <code>id</code> and …\nRequest body for submitting an execution receipt\nTesting mode - uses stub services, in-memory storage, …\nBuild an Axum <code>Router</code> using an already initialized …\nConstruct a router with explicit runtime mode …\nBearer token required via the <code>Authorization</code> header\nPath to a file containing the bearer token\nSelect the appropriate network service based on <code>NodeConfig</code>.\nOptional path to a configuration file (TOML or YAML)\nGet appropriate mana ledger backend for this mode\nGet appropriate mana ledger path for this mode\nGet appropriate storage backend for this mode\nGet appropriate storage path for this mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier of the key within the HSM.\nPath to an HSM library for key retrieval.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnvironment variable name containing the passphrase for …\nEncrypted private key file for the node identity.\nLoad or generate the node identity based on the provided …\nPath to store or load the node DID string.\nPath to store or load the node private key (bs58 encoded).\nBase64 encoded bincode <code>JobSpec</code> bytes.\nDeprecated JSON representation of the job spec.\nTrusted issuer DID(s) for credential verification\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad parameters from the given file path. If the file does …\nUpdate a parameter and persist changes to disk.")