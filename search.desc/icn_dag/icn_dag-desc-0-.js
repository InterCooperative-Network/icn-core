searchState.loadedDescShard("icn_dag", 0, "ICN DAG Crate\nSimple file-based <code>StorageService</code> storing one JSON file per …\nSimple in-memory implementation of <code>StorageService</code> for …\nDefines the interface for a DAG block storage backend. …\nCast to [<code>Any</code>] for downcasting when the concrete type is …\nMutable variant of [<code>as_any</code>].\nBackup all DAG blocks from <code>store</code> into files under <code>path</code>.\nChecks if a block with the given CID exists in the store. …\nDeletes a block from the store by its CID. Returns <code>Ok(())</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a block from the store by its CID. Returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve all blocks stored in the backend. The default …\nCreate a new empty store.\nCreate a new store rooted at <code>storage_path</code>, creating the …\nPlaceholder function demonstrating use of common types.\nPuts a block into the store. If a block with the same CID …\nRestore DAG blocks into <code>store</code> from files under <code>path</code>.\nVerify integrity of every block in the given store.\nReturns the argument unchanged.\nInsert a block into the traversal index.\nCalls <code>U::from(self)</code>.\nCreate an empty traversal index.\nRemove a block and all references to it from the index.\nPerform a depth‑first traversal starting from <code>start</code>.\nCounts DAG block fetches.\nCounts DAG block inserts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new sled backed DAG store at the given path.")