searchState.loadedDescShard("icn_dag", 0, "ICN DAG Crate\nAsynchronous version of <code>StorageService</code>.\nMetadata associated with a stored DAG block.\nBasic metadata describing a <code>DagBlock</code>.\nSimple file-based <code>StorageService</code> storing one JSON file per …\nSimple in-memory implementation of <code>StorageService</code> for …\nDefines the interface for a DAG block storage backend. …\nAsynchronous file-based <code>AsyncStorageService</code> using <code>tokio::fs</code>…\nCast to [<code>Any</code>] for downcasting when the concrete type is …\nCast to [<code>Any</code>] for downcasting.\nMutable variant of [<code>as_any</code>].\nDID of the block author.\nBackup all DAG blocks from <code>store</code> into files under <code>path</code>.\nAsynchronous variant of <code>backup</code>.\nChecks if a block with the given CID exists in the store. …\nChecks if a block with the given CID exists in the store.\nDeletes a block from the store by its CID. Returns <code>Ok(())</code> …\nDeletes a block from the store by its CID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a block from the store by its CID. Returns …\nRetrieves a block from the store by its CID.\nGet metadata for a block if present.\nRetrieve metadata for a block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks contained in the block.\nRetrieve all blocks stored in the backend. The default …\nRetrieve all blocks stored in the backend.\nCreate <code>DagBlockMetadata</code> from a <code>DagBlock</code>.\nCreate a new empty store.\nCreate a new store rooted at <code>storage_path</code>, creating the …\nCreate a new store rooted at <code>storage_path</code>, creating the …\nMark the block as pinned, preventing pruning.\nMark the block as pinned.\nWhether the block is pinned and should not be pruned.\nPlaceholder function demonstrating use of common types.\nRemove blocks whose TTL has expired and are not pinned. …\nDelete expired blocks that are not pinned.\nPuts a block into the store. If a block with the same CID …\nPuts a block into the store.\nRestore DAG blocks into <code>store</code> from files under <code>path</code>.\nAsynchronous variant of <code>restore</code>.\nUpdate the TTL metadata for the given block.\nUpdate TTL metadata for a block.\nSize of the block’s data payload in bytes.\nCreation timestamp of the block.\nOptional expiration timestamp (seconds since epoch).\nRemove the pinned flag from the block.\nRemove the pinned flag.\nVerify integrity of every block in the given store.\nAsynchronous variant of <code>verify_all</code>.\nReturns the argument unchanged.\nInsert a block into the traversal index.\nCalls <code>U::from(self)</code>.\nCreate an empty traversal index.\nRemove a block and all references to it from the index.\nPerform a depth‑first traversal starting from <code>start</code>.\nCounts DAG block fetches.\nCounts DAG block inserts.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new sled backed DAG store at the given path.")