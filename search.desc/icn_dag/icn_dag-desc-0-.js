searchState.loadedDescShard("icn_dag", 0, "ICN DAG Crate\nAsynchronous version of <code>StorageService</code>.\nMetadata associated with a stored DAG block.\nWrapper to adapt synchronous <code>StorageService</code> …\nBasic metadata describing a <code>DagBlock</code>.\nSimple file-based <code>StorageService</code> storing one JSON file per …\nSimple in-memory implementation of <code>StorageService</code> for …\nDefines the interface for a DAG block storage backend. …\nAsynchronous file-based <code>AsyncStorageService</code> using <code>tokio::fs</code>…\nCast to [<code>Any</code>] for downcasting when the concrete type is …\nCast to [<code>Any</code>] for downcasting.\nMutable variant of [<code>as_any</code>].\nDID of the block author.\nBackup all DAG blocks from <code>store</code> into files under <code>path</code>.\nAsynchronous variant of <code>backup</code>.\nChoose canonical root from <code>(Cid, height)</code> candidates.\nCompute a Merkle root hash from a set of top-level CIDs.\nDAG Conflict Resolution Protocol\nChecks if a block with the given CID exists in the store. …\nChecks if a block with the given CID exists in the store.\nDetermine the current root CID of the DAG.\nRead the current root hash from disk if it exists.\nRead the current root hash from disk if present.\nDeletes a block from the store by its CID. Returns <code>Ok(())</code> …\nDeletes a block from the store by its CID.\nFederation Sync Protocol Implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a block from the store by its CID. Returns …\nRetrieves a block from the store by its CID.\nGet metadata for a block if present.\nRetrieve metadata for a block.\nHelper crate for encoding/decoding root hashes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinks contained in the block.\nRetrieve all blocks stored in the backend. The default …\nRetrieve all blocks stored in the backend.\nCreate <code>DagBlockMetadata</code> from a <code>DagBlock</code>.\nCreate a new empty store.\nCreate a new store rooted at <code>storage_path</code>, creating the …\nCreate a new store rooted at <code>storage_path</code>, creating the …\nMark the block as pinned, preventing pruning.\nMark the block as pinned.\nWhether the block is pinned and should not be pruned.\nPlaceholder function demonstrating use of common types.\nRemove blocks whose TTL has expired and are not pinned. …\nDelete expired blocks that are not pinned.\nDAG pruning and compaction utilities\nPuts a block into the store. If a block with the same CID …\nPuts a block into the store.\nRestore DAG blocks into <code>store</code> from files under <code>path</code>.\nAsynchronous variant of <code>restore</code>.\nUpdate the TTL metadata for the given block.\nUpdate TTL metadata for a block.\nSize of the block’s data payload in bytes.\nDAG snapshot export/import for federation migration and …\nDAG synchronization monitoring and missing block detection\nCreation timestamp of the block.\nOptional expiration timestamp (seconds since epoch).\nRemove the pinned flag from the block.\nRemove the pinned flag.\nVerify integrity of every block in the given store.\nAsynchronous variant of <code>verify_all</code>.\nAnalyzing evidence and determining resolution\nDifferent nodes have different views of the same chain …\nEvidence that supports a particular conflict resolution\nPosition a node takes in a conflict\nConfiguration for conflict resolution behavior\nManages conflict detection and resolution for DAG …\nTypes of DAG conflicts that can occur\nBlocks reference different versions of the same content\nCircular dependencies detected\nRepresents a detected conflict in the DAG\nConflict detected but resolution not started\nBlock has earlier timestamp\nResolution failed, manual intervention needed\nFederation consensus vote\nFirst block wins (by timestamp)\nGathering information from federation nodes\nBlock has higher reputation author\nBlock is part of longer chain\nLongest chain wins\nMissing critical blocks create inconsistency\nBlock has more subsequent references\nBlock validated by more nodes\nMulti-criteria decision (combines multiple factors)\nBlock with most references wins\nBlock with highest reputation author wins\nResolution determined, propagating decision\nCurrent status of conflict resolution\nStrategies for resolving DAG conflicts\nResolution complete and applied\nTwo blocks claim to be roots simultaneously\nEnable automatic resolution (vs manual only)\nNode’s confidence in their position (0.0 - 1.0)\nUnique identifier for this conflict\nType of conflict\nThe blocks that are in conflict\nTimestamp when node declared this position\nDetect conflicts in the current DAG state\nTimestamp when conflict was detected\nEvidence supporting this position\nMaximum time to wait for evidence gathering (seconds)\nThe common ancestor where the fork began\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active conflicts\nGet resolution history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum conflicts to track simultaneously\nMinimum nodes that must participate in resolution\nCreate a new conflict resolver\nNodes that contributed to each side of the conflict\nWhich side of the conflict this node supports\nCurrent resolution status\nResolution strategy to use\nResolve a specific conflict using the configured strategy\nPriority levels for block announcements\nAnnounce new blocks to peers\nRequest specific blocks from a peer\nRequest specific blocks\nResponse with requested blocks\nReport a detected conflict to peers\nResolution decision for a conflict\nConflict resolution\nPerforming delta sync\nDelta sync from specific point\nRequest delta sync from a specific point\nResponse with delta changes\nSync operation failed\nMain federation sync protocol handler\nConfiguration for federation sync protocol\nFull sync with peer\nNo sync operation in progress\nState tracking for sync operations with peers\nPriority levels for block requests\nRequesting specific blocks\nRequesting sync status from peer\nResolving conflicts\nNetwork message types for federation sync\nRepresents an active sync operation\nStatus of ongoing sync operations\nTypes of sync operations\nStatistics for federation sync operations\nRequest sync status from a peer\nResponse with current sync status\nNumber of active sync operations\nBlocks involved in this operation\nEnable conflict resolution functionality\nEnable conflict resolution\nEnable delta sync optimization\nFailed sync attempts counter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet peer states for monitoring\nGet sync statistics\nHandle incoming sync message from a peer\nNumber of healthy peers (low failure count)\nInitialize sync with a new peer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBlocks we know this peer has\nLast known root hash from this peer\nLast successful sync timestamp\nTimestamp of last successful sync\nMaximum blocks to request in a single message\nMaximum number of concurrent sync operations\nCreate a new federation sync handler\nUnique operation ID\nOperation type\nPeer node identity\nTarget peer\nPerform delta sync with peer from a specific point\nBlocks we’ve requested from this peer\nStart timestamp\nCurrent status\nInterval between periodic sync checks (seconds)\nCurrent sync operation status\nTimeout for sync operations (seconds)\nTotal number of peers\nReturns the argument unchanged.\nInsert a block into the traversal index.\nCalls <code>U::from(self)</code>.\nCreate an empty traversal index.\nRemove a block and all references to it from the index.\nPerform a depth‑first traversal starting from <code>start</code>.\nCounts DAG block fetches.\nCounts DAG block inserts.\nRecord describing a resource available for mutual aid.\nRegistry service storing <code>AidResource</code> records in a DAG …\nHuman readable description.\nFind resources that contain the specified tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the resource record.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered resources.\nCreate a new registry using the provided store.\nDID of the entity offering the resource.\nQuantity available, if applicable.\nRegister a new aid resource and return its CID.\nArbitrary classification tags.\nConfiguration for DAG compaction\nDAG pruning and compaction manager\nConfiguration for DAG pruning operations\nStatistics from a pruning operation\nCompact blocks older than this age (in seconds)\nCompression algorithm to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum age of blocks to keep (in seconds)\nMaximum size of compacted chunks\nMaximum total size of DAG (in bytes)\nMinimum number of blocks to keep regardless of other …\nBlock types to never prune\nPreserve blocks referenced by pinned blocks\nPerform DAG pruning based on configuration\nSynchronous version of prune for non-async stores\nRecord describing a contributor action.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppend a contribution record to the DAG and return its CID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new sled backed DAG store at the given path.\nA complete DAG snapshot\nDAG snapshot manager\nNo-op progress implementation\nConfiguration for snapshot creation\nDAG snapshot metadata\nProgress callback for snapshot operations\nApply snapshot to the store\nSynchronous version of apply_snapshot\nTotal number of blocks in snapshot\nCompression to use\nHash of the snapshot content\nCreate a snapshot of the DAG\nSynchronous version of create_snapshot\nTimestamp when snapshot was created\nNode that created the snapshot\nSnapshot description\nExport snapshot to file\nVersion of the snapshot format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport snapshot from file\nInclude all blocks (true) or only specific roots (false)\nInclude metadata with blocks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum age of blocks to include (in seconds, None for all)\nRoot CIDs to include (if include_all is false)\nTotal size of all blocks in bytes\nVerify snapshot integrity\nPriority levels for missing blocks\nDAG synchronization monitor\nInformation about a missing block\nAlert for missing blocks\nSync monitoring configuration\nSync monitoring statistics\nEnable automatic re-anchoring of missing blocks\nHow often to check for missing blocks (in seconds)\nCheck for missing blocks and update tracking\nSynchronous version for non-async stores\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate alerts for missing blocks\nGet current missing blocks\nGet missing blocks by priority\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum age for a missing block before alert (in seconds)\nMaximum number of missing blocks to track\nNodes to request missing blocks from\nRequest a missing block from peers")