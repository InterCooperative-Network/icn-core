searchState.loadedDescShard("icn_crdt", 0, "ICN CRDT\nCore trait that all CRDT types must implement.\nConfiguration for CRDT behavior and optimization.\nErrors that can occur during CRDT operations.\nA CRDT operation with its associated metadata.\nResult type for CRDT operations.\nStatistics about CRDT operations and performance.\nHelper trait for converting values to/from CRDT-compatible …\nTrait for CRDTs that support causal ordering via vector …\nContains the error value\nUnique identifier for a node in the CRDT network. This …\nTrait for CRDTs that can be observed for changes. Useful …\nContains the success value\nThe type of operations that can be applied to this CRDT.\nMetadata associated with CRDT operations for causality and …\nUpdate the vector clock when applying an operation.\nApply an operation to this CRDT. Returns Ok(()) if the …\nGet the string representation.\nCheck if this CRDT is causally ready to receive operations …\nNumber of conflicts resolved.\nGet a unique identifier for this CRDT instance.\nCRDT Map implementation for complex nested state …\nWhether to enable operation compression for network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a NodeId from a DID.\nGrow-only Counter (G-Counter) CRDT implementation.\nHow often to perform garbage collection of old operations …\nCRDT Synchronization and Gossip Protocol implementation.\nCheck if this CRDT has observed all changes up to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast synchronization timestamp.\nLast-Write-Wins Register (LWW-Register) CRDT …\nMaximum age of operations to keep (in seconds).\nMaximum number of operations to keep in memory for …\nMerge this CRDT with another instance of the same type.\nNumber of merge operations performed.\nMetadata for causality and tracking.\nCreate a new NodeId from a string.\nCreate new operation metadata.\nCreate a new CRDT operation.\nThe node that generated this operation.\nRegister a callback to be invoked when the CRDT state …\nThe actual operation data.\nOptional operation identifier for deduplication.\nTotal number of operations applied.\nNumber of operations currently in memory.\nOR-Set (Observed-Remove Set) CRDT implementation.\nPN-Counter (Increment/Decrement Counter) CRDT …\nCurrent size of the CRDT state in bytes.\nTimestamp when the operation was created (for debugging).\nGet the current state value of this CRDT.\nVector Clock implementation for tracking causality in …\nGet the current vector clock for this CRDT.\nVector clock at the time of operation.\nGet the current version/timestamp of this CRDT for change …\nCreate new operation metadata with an operation ID.\nA CRDT Map that stores key-value pairs where values are …\nDelta containing operations for efficient synchronization.\nOperations that can be applied to a CRDT Map.\nStatistics about the CRDT Map.\nInsert or update a value for a key.\nRemove a key from the map.\nUpdate an existing CRDT value at a key.\nNumber of active keys in the map.\nGet all keys that have ever been in the map (including …\nMerge a delta into this map.\nCheck if a key exists in the map (not tombstoned).\nNumber of nodes that have contributed operations.\nCreate a delta containing only operations newer than the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGarbage collect old tombstones that are no longer needed.\nGet the CRDT value for a key.\nGet a mutable reference to the CRDT value for a key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the map is empty.\nGet all active key-value pairs.\nGet all active keys in the map.\nSize of the largest CRDT value in bytes (approximate).\nGet the number of active entries.\nCreate a new CRDT Map with the given ID.\nOperations to apply.\nInsert or update a value for a key.\nRemove a key from the map.\nGet statistics about this map.\nNumber of tombstoned (removed) keys.\nTotal number of keys ever seen.\nTotal size of all values in bytes (approximate).\nUpdate an existing CRDT value using its operation.\nA grow-only counter that can only be incremented.\nOperations that can be applied to a G-Counter.\nStatistics about a G-Counter.\nIncrement the counter by the specified amount on the given …\nGet all nodes that have contributed to this counter.\nNumber of nodes that have contributed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the contribution from a specific node.\nGet the current total value of the counter.\nCheck if this counter has any contributions from the given …\nIncrement the counter by the specified amount for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLargest contribution from any single node.\nSmallest contribution from any contributing node.\nCreate a new G-Counter with the given ID.\nGet a breakdown of contributions per node.\nGet statistics about this counter.\nThe total value across all nodes.\nCreate a new G-Counter for a specific node with an initial …\nMain CRDT synchronization engine.\nConfiguration for the gossip protocol.\nA gossip message containing CRDT operations.\nA CRDT operation with its associated metadata for …\nResponse to a gossip message.\nHelper trait for serializing CRDT operations for gossip.\nStatistics about gossip synchronization.\nTrait for CRDT synchronization transport layer.\nRepresents a peer in the gossip network.\nAdd an operation to be gossiped.\nAdd a peer to the known peers list.\nNetwork address for communication.\nAverage synchronization latency (in milliseconds).\nBroadcast a message to multiple peers.\nUnique identifier for the CRDT instance.\nType identifier for the CRDT (for deserialization).\nGet the type identifier for this CRDT.\nDeserialize an operation from gossip.\nDiscover new peers in the network.\nForce discovery of new peers.\nWhether to use delta compression for efficiency.\nNumber of failed peer communications.\nNumber of peers to gossip with in each round.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current list of known peers.\nGet synchronization statistics.\nGet the current vector clock.\nHow often to perform gossip rounds (in milliseconds).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the peer is currently reachable.\nNumber of known peers.\nLast known vector clock of the peer.\nTimestamp of last successful communication.\nMaximum size of the operation buffer.\nMaximum number of operations to include in a single gossip …\nMetadata about the operation.\nCreate a new CRDT synchronizer.\nUnique identifier for the peer.\nHow long to keep operations in the buffer for anti-entropy …\nThe actual operation data (serialized).\nOperations to synchronize.\nOperations the responder has that the sender might not.\nTotal operations received.\nTotal operations sent.\nCheck if a peer is reachable.\nProbability of gossiping with a random peer vs. a known …\nNumber of reachable peers.\nAcknowledgment of received operations.\nRemove a peer from the known peers list.\nResponder’s node ID.\nResponder’s current vector clock.\nSend a gossip message to a peer.\nSender’s node ID.\nSender’s current vector clock.\nMessage sequence number for deduplication.\nSerialize an operation for gossip.\nStart the gossip protocol (runs indefinitely).\nNumber of successful peer communications.\nForce synchronization with a specific peer.\nTimestamp when message was created.\nTotal number of gossip rounds performed.\nClear the register (set to None).\nA register that stores a single value with last-write-wins …\nOperations that can be applied to an LWW-Register.\nSnapshot of an LWW-Register for synchronization.\nWrite a new value to the register.\nMetadata about a write operation for debugging and …\nApply a snapshot from another register.\nClear the register (set to None).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value stored in the register.\nGet the age of the current value (current vector clock …\nGet metadata about the current value.\nGet the timestamp of the current value.\nGet the node that wrote the current value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the register has a value.\nCreate a new LWW-Register with the given ID.\nNode that performed the write.\nSequence number for tie-breaking.\nSequence number.\nCreate a snapshot of the current state for synchronization.\nWhen the write occurred.\nTimestamp of current value.\nCurrent value.\nVector clock at time of write.\nVector clock.\nCheck if this register has been written by the given node.\nCreate a new LWW-Register with an initial value.\nWrite a new value to the register.\nNode that wrote current value.\nAdd an element to the set with the given tag.\nUnique tag for tracking individual add/remove operations.\nAn observed-remove set that tracks both additions and …\nDelta containing operations for efficient synchronization.\nOperations that can be applied to an OR-Set.\nStatistics about an OR-Set.\nRemove an element from the set with the given remove_tag. …\nAdd an element to the set.\nGet all elements that have ever been added (including …\nCheck if an element is currently in the set.\nGet all nodes that have contributed operations to this set.\nNumber of elements currently in the set.\nCreate a compact delta for synchronization containing only …\nGet all elements currently in the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all add tags for an element.\nGet all remove tags for an element.\nCheck if an element has ever been added to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the set is empty.\nCreate a new OR-Set with the given ID and node ID.\nNode that performed the operation.\nNumber of nodes that have contributed operations.\nOperations to apply.\nRemove an element from the set.\nRemove a specific tagged instance of an element.\nSequence number for operations within the same timestamp.\nGet the number of elements currently in the set.\nGet statistics about this set.\nLogical timestamp when the operation occurred.\nTotal number of add operations performed.\nTotal number of distinct elements ever added.\nTotal number of remove operations performed.\nDecrement the counter by the specified amount on the given …\nIncrement the counter by the specified amount on the given …\nA counter that supports both increment and decrement …\nOperations that can be applied to a PN-Counter.\nStatistics about a PN-Counter.\nAdd a delta value (can be positive or negative).\nGet all nodes that have contributed to this counter.\nNumber of nodes that have contributed.\nThe current net value (increments - decrements).\nDecrement the counter by the specified amount for the …\nGet detailed breakdown showing increments and decrements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the total decrements from a specific node.\nGet the total increments from a specific node.\nGet the net contribution from a specific node.\nGet the current value of the counter (increments - …\nCheck if this counter has any contributions from the given …\nIncrement the counter by the specified amount for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHighest net contribution from any node.\nLowest net contribution from any node.\nNumber of nodes with negative net contributions.\nCreate a new PN-Counter with the given ID.\nGet a breakdown of net contributions per node.\nNumber of nodes with positive net contributions.\nGet statistics about this counter.\nGet the total magnitude of all operations (useful for …\nTotal activity (increments + decrements).\nTotal of all decrement operations.\nTotal of all increment operations.\nCreate a new PN-Counter for a specific node with an …\nNumber of nodes with zero net contributions.\nA vector clock for tracking causality between distributed …\nCompare this vector clock with another to determine causal …\nCheck if this vector clock dominates another (is ahead in …\nReturns the argument unchanged.\nRestore from compact representation.\nRemove timestamps for nodes that haven’t been seen in a …\nGet the current timestamp for a specific node.\nCheck if this vector clock happened-before another vector …\nGet a deterministic hash of this vector clock for …\nIncrement the timestamp for the given node.\nCalls <code>U::from(self)</code>.\nCheck if this vector clock is concurrent with another (no …\nUpdate this vector clock with another vector clock by …\nCreate a new empty vector clock.\nGet all node IDs tracked by this vector clock.\nSet the timestamp for a specific node.\nCreate a compact representation for network transmission.\nGet the total number of events across all nodes.\nCreate a new vector clock with an initial timestamp for …")