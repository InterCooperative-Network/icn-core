searchState.loadedDescShard("icn_crdt", 0, "ICN CRDT\nCore trait that all CRDT types must implement.\nConfiguration for CRDT behavior and optimization.\nErrors that can occur during CRDT operations.\nA CRDT operation with its associated metadata.\nResult type for CRDT operations.\nStatistics about CRDT operations and performance.\nHelper trait for converting values to/from CRDT-compatible …\nTrait for CRDTs that support causal ordering via vector …\nContains the error value\nUnique identifier for a node in the CRDT network. This …\nTrait for CRDTs that can be observed for changes. Useful …\nContains the success value\nThe type of operations that can be applied to this CRDT.\nMetadata associated with CRDT operations for causality and …\nUpdate the vector clock when applying an operation.\nApply an operation to this CRDT. Returns Ok(()) if the …\nGet the string representation.\nCheck if this CRDT is causally ready to receive operations …\nNumber of conflicts resolved.\nGet a unique identifier for this CRDT instance.\nWhether to enable operation compression for network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a NodeId from a DID.\nGrow-only Counter (G-Counter) CRDT implementation.\nHow often to perform garbage collection of old operations …\nCheck if this CRDT has observed all changes up to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast synchronization timestamp.\nMaximum age of operations to keep (in seconds).\nMaximum number of operations to keep in memory for …\nMerge this CRDT with another instance of the same type.\nNumber of merge operations performed.\nMetadata for causality and tracking.\nCreate a new NodeId from a string.\nCreate new operation metadata.\nCreate a new CRDT operation.\nThe node that generated this operation.\nRegister a callback to be invoked when the CRDT state …\nThe actual operation data.\nOptional operation identifier for deduplication.\nTotal number of operations applied.\nNumber of operations currently in memory.\nOR-Set (Observed-Remove Set) CRDT implementation.\nPN-Counter (Increment/Decrement Counter) CRDT …\nCurrent size of the CRDT state in bytes.\nTimestamp when the operation was created (for debugging).\nGet the current state value of this CRDT.\nVector Clock implementation for tracking causality in …\nGet the current vector clock for this CRDT.\nVector clock at the time of operation.\nGet the current version/timestamp of this CRDT for change …\nCreate new operation metadata with an operation ID.\nA grow-only counter that can only be incremented.\nOperations that can be applied to a G-Counter.\nStatistics about a G-Counter.\nIncrement the counter by the specified amount on the given …\nGet all nodes that have contributed to this counter.\nNumber of nodes that have contributed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the contribution from a specific node.\nGet the current total value of the counter.\nCheck if this counter has any contributions from the given …\nIncrement the counter by the specified amount for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLargest contribution from any single node.\nSmallest contribution from any contributing node.\nCreate a new G-Counter with the given ID.\nGet a breakdown of contributions per node.\nGet statistics about this counter.\nThe total value across all nodes.\nCreate a new G-Counter for a specific node with an initial …\nAdd an element to the set with the given tag.\nUnique tag for tracking individual add/remove operations.\nAn observed-remove set that tracks both additions and …\nDelta containing operations for efficient synchronization.\nOperations that can be applied to an OR-Set.\nStatistics about an OR-Set.\nRemove an element from the set with the given remove_tag. …\nAdd an element to the set.\nGet all elements that have ever been added (including …\nCheck if an element is currently in the set.\nGet all nodes that have contributed operations to this set.\nNumber of elements currently in the set.\nCreate a compact delta for synchronization containing only …\nGet all elements currently in the set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all add tags for an element.\nGet all remove tags for an element.\nCheck if an element has ever been added to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the set is empty.\nCreate a new OR-Set with the given ID and node ID.\nNode that performed the operation.\nNumber of nodes that have contributed operations.\nOperations to apply.\nRemove an element from the set.\nRemove a specific tagged instance of an element.\nSequence number for operations within the same timestamp.\nGet the number of elements currently in the set.\nGet statistics about this set.\nLogical timestamp when the operation occurred.\nTotal number of add operations performed.\nTotal number of distinct elements ever added.\nTotal number of remove operations performed.\nDecrement the counter by the specified amount on the given …\nIncrement the counter by the specified amount on the given …\nA counter that supports both increment and decrement …\nOperations that can be applied to a PN-Counter.\nStatistics about a PN-Counter.\nAdd a delta value (can be positive or negative).\nGet all nodes that have contributed to this counter.\nNumber of nodes that have contributed.\nThe current net value (increments - decrements).\nDecrement the counter by the specified amount for the …\nGet detailed breakdown showing increments and decrements …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the total decrements from a specific node.\nGet the total increments from a specific node.\nGet the net contribution from a specific node.\nGet the current value of the counter (increments - …\nCheck if this counter has any contributions from the given …\nIncrement the counter by the specified amount for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHighest net contribution from any node.\nLowest net contribution from any node.\nNumber of nodes with negative net contributions.\nCreate a new PN-Counter with the given ID.\nGet a breakdown of net contributions per node.\nNumber of nodes with positive net contributions.\nGet statistics about this counter.\nGet the total magnitude of all operations (useful for …\nTotal activity (increments + decrements).\nTotal of all decrement operations.\nTotal of all increment operations.\nCreate a new PN-Counter for a specific node with an …\nNumber of nodes with zero net contributions.\nA vector clock for tracking causality between distributed …\nCompare this vector clock with another to determine causal …\nCheck if this vector clock dominates another (is ahead in …\nReturns the argument unchanged.\nRestore from compact representation.\nRemove timestamps for nodes that haven’t been seen in a …\nGet the current timestamp for a specific node.\nCheck if this vector clock happened-before another vector …\nGet a deterministic hash of this vector clock for …\nIncrement the timestamp for the given node.\nCalls <code>U::from(self)</code>.\nCheck if this vector clock is concurrent with another (no …\nUpdate this vector clock with another vector clock by …\nCreate a new empty vector clock.\nGet all node IDs tracked by this vector clock.\nSet the timestamp for a specific node.\nCreate a compact representation for network transmission.\nGet the total number of events across all nodes.\nCreate a new vector clock with an initial timestamp for …")