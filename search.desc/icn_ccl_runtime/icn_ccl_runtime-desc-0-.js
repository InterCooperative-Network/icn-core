searchState.loadedDescShard("icn_ccl_runtime", 0, "ICN CCL Runtime\nHigh-level CCL runtime interface\nCCL Runtime errors\nContract address type\nContract function call parameters\nContract call result\nContract deployment metadata\nContract event emitted during execution\nContract deployment status\nTime epoch for scheduling and coordination\nWASM bytecode\nCall a contract function\nHelper function to get current timestamp\nDeploy a new contract\nContract execution engine with WASM sandboxing and …\nFederation-aware contract execution and cross-federation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet contract metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all contracts\nEconomic metering and mana consumption for CCL contracts\nCreate a new CCL runtime instance\nPause a contract (governance action)\nResume a paused contract\nSecurity module with capability-based access control and …\nStandard library contracts for democratic governance and …\n<code>ToString::to_string</code>, but without panic on OOM.\nFormal verification and property testing for CCL contracts\nSimple contract executor (simplified version without full …\nContract execution context\nResult of contract execution\nCall a contract function (simplified)\nCheck if resource limit is exceeded\nConsume mana for operation\nDeploy a new contract (simplified)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new contract executor\nContract scope determines who can access the contract\nCross-federation call request\nCross-federation call response\nCross-federation protocol handler\nAvailable within a federation\nFederation identifier\nInformation about a known federation\nFederation registry for managing known federations\nFederation validator information\nGlobally accessible\nLimited to a specific organization\nOrganization identifier\nValidator signature for cross-federation calls\nAdd a validator to the federation\nCheck if a DID can access a contract with this scope\nCheck if reading contract state is allowed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active validators\nHandle incoming cross-federation call\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new cross-federation protocol handler\nRemove a validator from the federation\nSubmit a cross-federation call request\nUpdate trust score for a federation\nAggregate usage statistics across all users\nEconomic enforcement mechanisms\nMana amount type\nMana market mechanisms for price discovery\nMana metering system for contract execution\nEconomic metering configuration\nUsage statistics for economic analysis\nApply economic penalties for violations\nCalculate function call cost\nCalculate compute cost based on gas consumption\nCalculate deployment cost for a contract\nCalculate current mana price based on supply and demand\nCalculate storage cost for data\nCharge for compute usage\nCharge mana for an operation\nCharge for storage usage\nCheck if a DID has sufficient mana balance\nConvert between mana and other token types\nEnforce minimum balance for contract deployment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet aggregate usage statistics\nGet mana balance for a DID\nGet usage statistics for a DID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMint initial mana for a new member\nCreate a new mana metering system\nProvide economic incentives for good behavior\nRefund unused mana\nUpdate price factors based on network usage\nCreate with custom configuration\nAccess identity credentials\nAccess economic data\nBurn existing tokens\nSecurity capabilities that contracts can request\nCapability-based security enforcement\nCreate governance proposals\nMake cross-federation calls\nDeterministic execution enforcement\nEmit events to DAG\nExecute governance proposals\nGovernance administration\nMint new tokens\nModify contract state\nRead from DAG storage\nResource usage enforcement\nResource limits for contract execution\nSchedule future contract calls\nSecurity configuration for the CCL runtime\nTransfer mana between accounts\nWrite to DAG storage\nAllowed WASM imports\nCheck call depth\nCheck if a DID has permission to call a contract in the …\nCheck if a capability is allowed for a contract\nCheck compute usage\nCheck if a DID has permission to deploy contracts\nCheck event count\nCheck if a DID has governance permissions\nCheck memory usage\nCheck storage usage\nDefault capabilities granted to new contracts\nDefault resource limits for new contracts\nRequired credentials for contract deployment\nGenerate deterministic randomness from seed\nEnable capability enforcement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrant additional capabilities to a contract (governance …\nCreate a high-security configuration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an operation is deterministic\nMaximum call depth (default: 10)\nMaximum compute units (default: 10M instructions)\nMaximum events per call (default: 100)\nMaximum execution time in seconds (default: 30)\nMaximum memory in bytes (default: 64MB)\nMaximum stack size in bytes (default: 1MB)\nMaximum storage per call in bytes (default: 1MB)\nRevoke capabilities from a contract (governance action)\nEnable strict determinism checks\nCreate a trusted configuration with more permissions\nValidate WASM code against security policies\nCapability enum for security\nError type for contract operations\nContract event emitted during execution\nCredit line identifier\nDemocratic governance contract implementation\nEpoch for time-based operations\nJob identifier for marketplace\nJob marketplace contract for coordinating work\nMutual credit system contract\nProposal identifier\nAccept a bid and assign the job\nAdd a new member (via governance)\nComplete job execution\nExecute proposal actions (governance admin only)\nExtend credit to another member\nFinalize a proposal after voting period\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet balance for a member\nGet bids for a job\nGet credit line information\nGet job information\nGet proposal by ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if DID is a member\nList all active proposals\nList active credit lines for a member\nList open jobs\nGet member count\nCreate a new governance contract\nCreate new mutual credit contract\nPost a new job\nSubmit a new proposal\nRemove a member (via governance)\nSubmit a bid for a job\nTransfer credits through the network\nCast a vote on a proposal\nContract certification levels\nTotal supply should equal sum of all balances\nContract invariant definition\nContract types for verification\nCustom condition with predicate\nFormal verifier for contract correctness\nInvariant check result\nInvariant checker for contract state\nInvariant condition types\nSeverity levels for invariant violations\nBalance should never be negative for any account\nPerformance issue found in static analysis\nTypes of performance issues\nProperty-based test result\nProperty-based tester for contracts\nSecurity issue found in static analysis\nTypes of security issues\nStatic analysis results\nStatic analyzer for contract code\nTest failure information\nProposal votes should not exceed member count\nVerification report for a contract\nCheck all enabled invariants for a governance contract\nCheck all enabled invariants for a mutual credit contract\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTest governance contract properties\nTest marketplace contract properties\nTest mutual credit contract properties\n<code>ToString::to_string</code>, but without panic on OOM.\nGenerate comprehensive verification report")