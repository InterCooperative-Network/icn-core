searchState.loadedDescShard("icn_core_traits", 0, "ICN Core Traits\nEconomic service traits and types\nError types for ICN Core Traits\nGovernance service traits and types\nMesh service traits and types\nNetwork service traits and types\nReputation service traits and types\nEconomic health metrics\nEconomic policy\nEconomic provider trait\nMana provider trait for mana-based economics\nMana transaction record\nPricing models\nResource allocation result\nResource priority levels\nResource provider trait for resource management\nResource specification\nResource utilization metrics\nTransaction types\nAdd mana to a DID (e.g., from regeneration)\nAllocate resources for a request\nCalculate pricing for a resource or service\nCheck resource availability\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet available resources\nGet economic health metrics\nGet economic policy for a resource\nGet mana balance for a DID\nGet mana transaction history\nGet mana regeneration rate for a DID\nGet resource utilization metrics\nCheck if DID has sufficient mana for operation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess economic transaction\nRelease allocated resources\nSpend mana for a DID\nCommon error wrapper\nConfiguration error\nErrors that can occur when working with core traits\nEconomic service is unavailable or failed\nGovernance service is unavailable or failed\nMesh service is unavailable or failed\nNetwork service is unavailable or failed\nReputation service is unavailable or failed\nService provider is not available\nCreate a configuration error\nCreate an economic service error\nReturns the argument unchanged.\nCreate a governance service error\nCalls <code>U::from(self)</code>.\nCreate a mesh service error\nCreate a network service error\nCreate a reputation service error\nCreate a service not available error\nGovernance provider trait\nProposal data for creation\nProposal information\nProposal provider trait\nProposal status\nVote option\nVote results\nVoting provider trait\nCalculate voting weight for a DID\nCast a vote on a proposal\nCheck governance permissions\nCreate a new proposal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active proposals\nGet proposal details\nGet proposal by ID\nGet vote results for a proposal\nCheck if a DID has voted on a proposal\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList proposals by status\nSubmit a new proposal\nUpdate proposal status\nExecutor capabilities\nExecutor information\nExecutor performance metrics\nExecutor provider trait for executor management\nExecutor registration\nExecutor status\nJob bid from executor\nJob execution status\nJob information\nJob provider trait for job management\nJob execution results\nJob specification\nJob status information\nJob submission request\nMesh provider trait for distributed job execution\nMesh network statistics\nResource requirements for job execution\nResource usage statistics\nCancel a job\nCreate a new job\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet available executors\nGet executor capabilities\nGet executor performance metrics\nGet job details\nGet job execution results\nGet job status\nGet mesh network statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList jobs by status\nRegister an executor\nSubmit bid for a job\nSubmit a job for distributed execution\nUpdate executor status\nUpdate job status\nSimplified network trait for basic operations\nA message was received\nA message was sent\nNetwork error occurred\nNetwork events that can be observed\nCore network service trait\nProvider trait for network services\nNetwork statistics\nA peer connected\nA peer disconnected\nPeer identifier for networking\nAverage latency in milliseconds\nBroadcast a message to all peers\nNumber of connected peers\nCreate a new network service instance\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet connected peers\nGet the local peer ID\nGet network statistics\nGet list of connected peers\nGet the service type name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provider is available\nCheck if connected to a specific peer\nCheck if the service is running\nNumber of received messages\nNumber of sent messages\nSend a message to a specific peer\nSend data to a peer\nStart the network service\nStop the network service\nSubscribe to network events\nConnection uptime in seconds\nReputation calculation completed\nNew reputation entry created\nReputation events that can be observed\nAdvanced reputation provider with async operations\nReputation entry removed\nReputation store trait for managing reputation data\nReputation score updated\nSimple reputation provider for basic operations\nCalculate reputation score based on various factors\nCalculate trust path between two DIDs\nReturns the argument unchanged.\nGet all reputation scores\nGet reputation as a normalized score (0.0 to 1.0)\nGet reputation score for a DID\nGet reputation score\nGet reputation score asynchronously\nGet reputation trend over time\nGet top reputation scores\nCheck if a DID has a reputation score\nCalls <code>U::from(self)</code>.\nCheck if DID meets minimum reputation threshold\nRemove reputation score for a DID\nSet reputation score for a DID\nSubscribe to reputation events\nUpdate reputation score for a DID\nUpdate reputation based on execution quality")