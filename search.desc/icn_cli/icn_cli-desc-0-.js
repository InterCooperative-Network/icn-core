searchState.loadedDescShard("icn_cli", 0, "ICN CLI (<code>icn-cli</code>)\nAccount queries\nCount constraints for a circuit\nBackup the DAG store to the specified directory\nGet mana balance for an account\nCooperative Contract Language operations\nCompile a CCL source file\nCompile a CCL file to WASM and upload to the node\nDAG block operations\nExplain constructs within a CCL policy\nFederation management commands\nGenerate a Groth16 proving key and sign the verifying key\nGenerate a dummy zero-knowledge credential proof\nRetrieve a DAG block by its CID (provide CID as JSON …\nGet reputation score for an identity\nGovernance operations\nIdentity operations\nGet node information (version, name, status message)\nQuery mesh job status by ID\nList all mesh jobs\nJoin a federation by specifying a peer\nKey management\nLeave a federation\nLint a CCL source file for errors\nList peers known to the node\nMesh job operations\nRetrieve metadata for a DAG block by CID\nFetch Prometheus metrics text\nNetwork operations\nFetch local peer ID and list of discovered peers\nPin a DAG block with optional TTL\nSend a ping to a peer\nBenchmark a circuit with Criterion\nGet a specific proposal by its ID\nList all proposals\nPrune expired blocks\nStore a DAG block (provide block as JSON string, or ‘-’…\nReputation queries\nRestore the DAG store from the specified directory\nShow node DID and public key\nDisplay network statistics\nGet node status (online, peers, block height)\nGet status for a specific job\nShow federation status\nSubmit a new proposal (provide proposal request as JSON …\nSubmit a new mesh job\nSubmit a mesh job (JSON string or ‘-’ for stdin)\nTally votes and close a proposal\nUnpin a DAG block\nVerify blocks in the DAG store\nVerify a zero-knowledge credential proof (JSON string or …\nVerify multiple proofs from a JSON array\nCast a vote on a proposal (provide vote request as JSON …\nZero-knowledge tooling\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSubmit a new mesh job to the node\nSend a ping to the specified peer using the stubbed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")