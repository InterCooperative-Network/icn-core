searchState.loadedDescShard("icn_cli", 0, "ICN CLI (<code>icn-cli</code>)\nAccount queries\nAdd a trust relationship to a federation\nAdd member cooperative to federation\nMutual aid resource registry\nCount constraints for a circuit\nBackup the DAG store to the specified directory\nGet mana balance for an account\nCheck token balance for an account\nBootstrap trust with another federation\nAdd cross-federation trust bridge\nBurn tokens from an account\nCancel a running job\nCooperative Contract Language operations\nCompile a CCL source file\nCompile a CCL file to WASM and upload to the node\nConfigure trust policy for a federation\nCooperative discovery and management\nGenerate a cooperative template interactively\nCredential lifecycle management\nDAG block operations\nDID document operations\nDiscover federations on the network\nEmergency response coordination\nExplain constructs within a CCL policy\nFederation management commands\nGet federation trust statistics\nGenerate DID document for federation\nGenerate a Groth16 proving key and sign the verifying key\nGenerate a dummy zero-knowledge credential proof\nRequest proof generation from the node\nGet trust relationship between two entities\nRetrieve a DAG block by its CID (provide CID as JSON …\nGet federation metadata\nGet reputation score for an identity\nGovernance operations\nIdentity operations\nGet node information (version, name, status message)\nInitialize a new federation\nDeveloper onboarding wizard - create DID, submit test job, …\nQuery mesh job status by ID\nList all mesh jobs\nJoin a federation by specifying a peer\nKey management\nLeave a federation\nLint a CCL source file for errors\nList trust relationships for an entity\nList trust relationships in a federation\nList open aid requests\nList available aid resources\nList peers known to the node\nList member cooperatives in federation\nMesh job operations\nRetrieve metadata for a DAG block by CID\nFederation metadata management commands\nFetch Prometheus metrics text\nGet mesh execution metrics\nMint new scoped tokens\nMonitoring commands using metrics\nGet trust network neighbors\nNetwork operations\nInteractive cooperative onboarding wizard\nFederation onboarding wizard - prompts for coop info, …\nFind trust paths between two entities\nFetch local peer ID and list of discovered peers\nPin a DAG block with optional TTL\nSend a ping to a peer\nGet a cooperative profile by DID\nBenchmark a circuit with Criterion\nGet progress information for a job\nGet a specific proposal by its ID\nList all proposals\nFind providers of a specific capability\nPrune expired blocks\nPublish DID document to federation\nStore a DAG block (provide block as JSON string, or ‘-’…\nConfigure federation quorum policies\nRecalculate trust scores\nRegister a new cooperative in the federation\nRegister a new aid resource\nRemove trust relationship\nRemove a trust relationship from a federation\nRemove member cooperative from federation\nReputation queries\nSubmit a new aid request\nResolve DID document from federation\nRestore the DAG store from the specified directory\nResume a failed job from checkpoint\nUpdate federation scope configuration\nGet trust score for an entity\nGet trust scores for multiple entities\nSearch for cooperatives in the federation\nSearch entities by trust criteria\nSet federation metadata\nInteractive node setup wizard\nShow node DID and public key\nShow registry statistics\nGet trust graph statistics\nDisplay network statistics\nGet node status (online, peers, block height)\nGet status for a specific job\nShow federation status\nSubmit a new proposal (provide proposal request as JSON …\nSubmit a new mesh job\nSubmit a mesh job (JSON string or ‘-’ for stdin)\nSynchronize federation state\nStream output from a job (tail-like behavior)\nTally votes and close a proposal\nToken operations (mint, transfer, balance)\nTransfer tokens between accounts\nTrust management and graph operations\nAdd a trust relationship with another cooperative\nFederation trust management commands\nTrust management commands\nList trust relationships for a cooperative\nUnpin a DAG block\nUpdate trust relationship\nDisplay node uptime using the metrics endpoint\nValidate trust for an operation\nValidate trust for a federation operation\nVerify blocks in the DAG store\nVerify DID document\nVerify a zero-knowledge credential proof (JSON string or …\nVerify a proof via the node\nVerify multiple proofs from a JSON array\nVerify a revocation proof (JSON string or ‘-’ for …\nCast a vote on a proposal (provide vote request as JSON …\nInteractive cooperative formation wizard\nZero-knowledge tooling\nCredential lifecycle management CLI commands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCancel a running mesh job\nGet mesh execution metrics\nGet progress information for a mesh job\nResume a failed mesh job from checkpoint\nSubmit a new mesh job to the node\nStream/tail output from a mesh job\nSend a ping to the specified peer using the stubbed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnchor a credential disclosure to the DAG\nSimple cooperative membership structure\nCredential disclosure (for anchoring)\nCredential lifecycle commands\nCredential metadata for listing\nCredential presentation context\nCredential status information\nCredential verification result\nCross-federation credential verification\nRun example credential flows\nExample credential flows\nIssue a new credential\nCredential issuance commands\nList credentials by holder or issuer\nIssue a cooperative membership credential\nPresent a credential for verification\nIssue a reputation credential\nSimple reputation credential structure\nReputation update cycle\nSimple reputation levels for credentials\nRevoke a credential\nIssue a service provider credential\nSimple service provider structure\nIssue a skill credential\nSimple skill credential structure\nFull skill-to-voting flow\nShow credential status and history\nVerify a presented credential\nCreate a credential presentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a cooperative membership credential\nGenerate a reputation credential\nGenerate a skill credential\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify a credential presentation")