searchState.loadedDescShard("icn_identity", 0, "Minimal identity primitives: key-gen, DID:key, signing, …\nSize of an encoded Ed25519 signature in bytes.\nTrait for resolving a <code>Did</code> to the verifying key used for …\nEd25519 signature.\nRepresents a verifiable proof that a job was executed. …\nSimple in-memory implementation of <code>KeyStorage</code> and …\nSimple in-memory <code>MembershipResolver</code> backed by a map of …\nSimple resolver that understands the <code>did:key</code> method.\nTrait for rotating signing keys.\nTrait representing storage for signing keys associated …\nEnforces scoped permissions by consulting a …\nResolves whether a DID belongs to a particular <code>NodeScope</code>.\nResolver for the <code>did:peer</code> method (algorithm 0).\nThe length of a ed25519 <code>Signature</code>, in bytes.\nWrapper for raw Ed25519 signature bytes with optional …\nSign the provided message bytestring using <code>Self</code> (e.g. a …\ned25519 signing key which can be used to produce …\nAn ed25519 public key.\nResolve verifying keys for <code>did:web</code> identifiers using a …\nAdd a DID as a member of the provided scope.\nConvert this <code>SigningKey</code> into a <code>SecretKey</code> reference\nView this public key as a byte array.\nCheck that <code>actor</code> is a member of <code>scope</code>, returning an error …\nCooperative Registry for Federation Discovery\nCooperative Identity Schemas for Federation Discovery\nCPU time consumed by the job in milliseconds.\nReturn a <code>did:key</code> DID for the given Ed25519 public key.\nConstruct a <code>did:peer</code> identifier (algorithm 0) from a …\nConstruct a <code>did:web</code> identifier from a domain and optional …\nEnhanced DID resolution system with support for multiple …\nDID of the executor node that performed the job.\nFederation integration for ICN\nFederation management system for ICN\nFederation Trust Framework\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerive this public key from its corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nConstruct a <code>SigningKey</code> from a <code>SecretKey</code>\nConstruct a <code>VerifyingKey</code> from a slice of bytes.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nConstruct from an <code>ed25519_dalek::Signature</code>.\nConstruct a <code>SigningKey</code> from the bytes of a <code>VerifyingKey</code> …\nParse an Ed25519 signature from a byte slice.\nGenerate an ed25519 signing key.\nGenerate an Ed25519 key-pair using the OS CSPRNG.\nRetrieve the signing key for the given DID, if available.\nInsert a verifying key for the given <code>did:web</code> string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the DID is a member of the given scope.\nReturns whether this is a <em>weak</em> public key, i.e., if this …\nUnique identifier of the job that was executed.\nCreate a new resolver with an empty key map.\nCreate a new enforcer using the provided membership …\nCreate an empty resolver.\nParse a <code>did:web</code> DID into its domain and path segments.\nBytes for the <code>R</code> component of a signature.\nPlaceholder function demonstrating use of common types for …\nRemove a member from the scope if present.\nResolve the given DID to an Ed25519 verifying key.\nCID of the deterministic result output by the job …\nGenerate a new key for the DID and return the updated DID …\nBytes for the <code>s</code> component of a signature.\nCryptographic signature of the receipt fields (job_id, …\nSign the given message and return a digital signature\nConvenience wrapper around signing raw bytes with an …\nSigns this receipt with the provided Ed25519 SigningKey. …\nStore the signing key for the given DID.\nWhether the job execution completed successfully.\nReturn the inner byte array.\nConvert this <code>SigningKey</code> into a <code>SecretKey</code>\nConvert this public key to a byte array.\nConvert back into an <code>ed25519_dalek::Signature</code>.\nReturn this verifying key in Edwards form.\nConvert this signing key to a 64-byte keypair.\nConvert this verifying key into Montgomery form.\nConvert this signing key into a Curve25519 scalar. This is …\nConvert this signing key into a byte representation of an …\nCreates the canonical message bytes used when signing an …\nConvert this signature into a byte vector.\nTrust Verification &amp; Attestation System\nTrust Verification Engine\nAttempt to sign the given message, returning a digital …\nSign a message with this signing key’s secret key.\n<code>ToString::to_string</code>, but without panic on OOM.\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this keypair’s …\nVerifies the receipt signature against the public key …\nVerifies the signature of this receipt against the …\nVerify a message/signature pair with an Ed25519 …\nStrictly verify a signature on a message with this signing …\nStrictly verify a signature on a message with this keypair…\nVerify the receipt using a custom <code>DidResolver</code>.\nGet the <code>VerifyingKey</code> for this <code>SigningKey</code>.\nParse a <code>did:key</code> DID into the associated verifying key.\nExtract the verifying key from a <code>did:peer</code> identifier …\nZero-knowledge proof helpers used by the identity …\nRegistry for discovering cooperatives in the federation\nSearch filters for cooperative discovery\nResult of a cooperative search\nStatistics about the cooperative registry\nAdd a trust relationship between cooperatives\nFilter by cooperative type\nFilter by geographic scope\nFilter by federation membership\nList all cooperatives offering a specific capability\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a cooperative profile by DID\nGet statistics about the cooperative registry\nGet trust relationships for a specific cooperative\nInclude cooperatives with cross-federation trust\nInclude cooperatives with inherited trust\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of results\nLoad cooperatives from DAG storage into cache …\nMatching capabilities\nFilter by minimum trust level\nMinimum trust score (0.0 to 1.0)\nCreate a new cooperative registry\nThe cooperative profile\nRegister a new cooperative profile in the registry\nRelevance score (0.0 to 1.0)\nFilter by required capabilities\nSearch for cooperatives matching the given criteria\nSearch query for name/description\nSort by trust score descending\nFilter by trust context\nTrust context used for filtering\nWhether trust crosses federation boundaries\nWhether trust is inherited or direct\nTrust level if filtered by trusted_by\nOverall trust score (0.0 to 1.0)\nFilter by minimum trust level from a specific cooperative\nAgricultural cooperatives\nBasic trust - basic information sharing and public …\nCommunity land trusts and commons management\nConsumer cooperatives owned by the people who use the …\nCapability or service offered by a cooperative\nHelper for creating standard cooperative membership …\nComprehensive profile of a cooperative stored in the DAG\nTypes of cooperatives in the ICN federation\nResearch and education cooperatives\nEnergy cooperatives\nCredit unions and financial cooperatives\nFull trust - can share sensitive information and resources\nGeneral purpose cooperative\nGeographic scope of a cooperative’s operations\nHealthcare cooperatives\nHousing cooperatives for shared living\nMulti-stakeholder cooperatives with various types of …\nNo trust - no cooperation\nPartial trust - limited cooperation and resource sharing\nPlatform cooperatives for digital services\nHelper for creating service provider credentials\nTrust level between cooperatives\nTrust relationship between two cooperatives\nWorker cooperatives owned and managed by their workers\nAdd a capability to the cooperative profile\nAdd a trusted cooperative relationship\nGet string representation of the trust level\nThe cooperative making the trust attestation\nWhether this capability is currently available\nList of capabilities/services offered\nType of capability (e.g., “compute”, “storage”, “…\nContact information\nType of cooperative\nCountry code (ISO 3166-1)\nCheck if this trust covers a specific scope\nCreation timestamp\nHuman-readable description\nBrief description of the cooperative’s mission\nDID of the cooperative\nTimestamp when trust was established\nPricing or exchange model (e.g., “time_bank”, “…\nExpiration timestamp (if any)\nFederation memberships\nYear founded\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeographic scope of operations\nGet available capabilities of a specific type\nWhether the cooperative operates globally\nCheck if this cooperative offers a specific capability\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this trust relationship is valid (not expired)\nHuman-readable justification\nLegal structure information\nCity or locality\nMember count (approximate)\nHuman-readable name\nCreate a new cooperative profile\nPublic keys for federation communication\nWhether this trust relationship is reciprocal\nState/province/region\nStandard schema identifiers for cooperative credentials\nDigital signature from the cooperative’s DID\nResource requirements or specifications\nThe cooperative being trusted\nLevel of trust\nScope of trust (e.g., “mesh_computing”, “governance…\nTrust relationships with other cooperatives\nLast updated timestamp\nWebsite URL\nSchema for cooperative membership credentials\nSchema for cooperative profiles stored in DAG\nSchema for federation membership credentials\nSchema for service provider credentials\nSchema for trust relationship attestations\nGenerate CID for a schema\nA verifiable credential issued by a DID subject to …\nA credential containing only a subset of claims.\nArbitrary claims asserted by the issuer.\nDisclosed claims.\nDisclose a subset of fields and generate a proof for the …\nOptional expiration timestamp as seconds since the Unix …\nOptional expiration timestamp carried from the original …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDID of the credential holder.\nDID of the credential holder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the credential is expired.\nReturns <code>true</code> if the credential is expired.\nDID of the issuer.\nDID of the issuer.\nCreate a new unsigned credential.\nClaims that should remain private when sharing the …\nOptional credential schema reference.\nOptional schema reference.\nCreate a disclosure containing only the specified claim …\nSign all claims individually using the issuer’s key.\nPer-claim signatures generated by the issuer.\nSignatures for disclosed claims.\nVerify all disclosed claim signatures against the issuer …\nVerify a single claim against the issuer’s verifying key.\nSimple in-memory store for issued credentials.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCredential indicating the issuer has delegated authority …\nDID receiving the delegated authority.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDID of the delegator.\nCreate and sign a new delegated credential.\nSignature from the issuer over the issuer and delegatee …\nVerify this credential against the provided verifying key.\nVerify a chain of delegated credentials starting from …\nConfiguration for DID resolution\nEnhanced DID resolver with caching and multiple method …\nBuilder for creating EnhancedDidResolver with custom …\nResolution statistics for monitoring\nAdd a web DID key mapping\nBatch resolve multiple DIDs efficiently\nCache TTL in seconds\nClear the resolution cache\nEnable fallback to other methods if primary fails\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet resolution statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum cache size (number of entries)\nPreferred method order for resolution\nCreate a new enhanced DID resolver\nPreload DIDs into cache (useful for known federation …\nResolve DID with caching and fallback\nTimeout for web-based resolution in seconds\nCreate with default configuration\nActive member\nSharing is active\nAdvisory only\nApplies to all federation members\nApplication pending\nAssociate member for specific purposes\nAutomatic enforcement\nNetwork bandwidth\nCCL contract code\nComplementary resources\nComputational resources\nConsensus-based decision making\nCross-federation proposal\nCross-federation proposal created\nTypes of cross-federation proposals\nData sharing policy\nDemocratic voting with equal weights\nMethods for discovering federations\nPolicy enforcement levels\nExisting member connections\nReference to external policy\nFederation capabilities\nNew federation discovered\nTypes of federation events\nInformation about a federation\nConfiguration for federation integration\nComprehensive federation integration engine\nStatistics about federation integration\nPerformance metrics for federation interaction\nFederation policy\nRecommendation for federation membership\nState of a federation relationship\nFull member with all privileges\nDiscovered through governance proposals\nFederation governance model\nGovernance participation policy\nHierarchical governance with roles\nHigh trust score\nHybrid model combining multiple approaches\nJoint governance initiative\nManually configured\nManual review required\nDiscovered through existing federation members\nApplies to specific member types\nFederation membership established\nStatus of membership in a federation\nTypes of federation membership\nDiscovered through network peers\nObserver member with limited privileges\nApplies to specific operations\nSharing is paused\nPolicy content representation\nPolicy scope\nTypes of federation policies\nInter-federation protocol upgrade\nQuality of service guarantees\nQuality of service metrics\nReasons for federation recommendation\nDiscovered through reputation networks\nResource access policy\nResource sharing arrangement\nStatus of resource sharing\nResource sharing agreement\nResource sharing initiated\nTypes of resources that can be shared\nResource usage statistics\nApplies to specific resources\nSecurity and compliance policy\nSpecialized services\nTerms for resource sharing\nSimilar governance model\nData storage\nStrategic alignment\nStructured policy definition\nSuspended membership\nFederation synchronization completed\nTemporary member with expiration\nMembership terminated\nSharing has ended\nSharing is being terminated\nTrust attestation from other entities\nTrust metrics for a federation\nTrust and reputation policy\nTrust policy coordination\nTrust relationship with a federation\nTrust relationship updated\nWarning on violation\nWeighted voting based on stake or contribution\nNumber of active memberships\nNumber of active resource shares\nActive resource shares\nResource allocation limits\nNumber of trust attestations\nAttestations received\nAttestor DID\nActual availability\nResource availability\nAverage response time\nAverage response time\nAverage trust score\nAverage usage\nPotential benefits\nFederation capabilities\nPolicy content (CCL code or reference)\nProposal content\nCreation time\nData transferred\nDescription of the federation\nHow often to discover new federations\nDuration of sharing agreement\nEnable automatic trust establishment\nEnable cross-federation governance participation\nEnable predictive federation recommendations\nEnable cross-federation resource sharing\nEnforcement level\nError rate\nAttestation reason/evidence\nPricing or exchange rates\nNumber of failed operations\nFederation identifier\nFederation identifier\nFederation identifier\nRecommended federation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRecommendation generated at\nGet federation integration statistics\nGovernance model\nFederation information\nInteroperability features\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast synchronization time\nLast verification time\nMaximum number of federations to join automatically\nMaximum concurrent operations\nMaximum error rate\nMaximum response time\nCurrent member count\nOur membership status\nMinimum availability percentage\nMinimum reputation required for cross-federation operations\nMinimum throughput\nMinimum trust score required for federation membership\nHuman-readable name\nCreate a new federation integration engine\nOverall trust score (0.0 to 1.0)\nPeak usage\nPending proposals\nNumber of pending recommendations\nPerformance metrics\nFederation policies\nPolicy identifier\nPolicy type\nProposal identifier\nProposal type\nProposing federation\nSupported protocol versions\nQuality of service guarantees\nQuality of service metrics\nReasons for recommendation\nRecommendation score\nReliability score based on uptime and performance\nType of resource shared\nResources consumed\nPotential risks\nMember satisfaction score\nApplicable scope\nTrust score history\nSecurity score based on security practices\nAvailable services\nAttestation signature\nSLA compliance rate\nStart the federation integration engine\nSharing start time\nSharing status\nStop the federation integration engine\nNumber of successful operations\nSupported resource types\nFederation synchronization interval\nGet event receiver for federation events\nConditions for termination\nSharing terms\nActual throughput\nAttestation timestamp\nTotal number of known federations\nTotal trust relationships\nTotal usage amount\nTransparency score based on openness\nTrust metrics\nTrust policy applied\nCurrent trust score\nTrust score given\nTrust score history\nNumber of usage sessions\nCurrent usage statistics\nVoting deadline\nVoting status\nActive member with full rights\nRequires approval from federation admin\nComputing resource sharing\nRequires consensus from existing members\nCustom federation type\nCustom policy with specific requirements\nData sharing and storage\nImplementation of FederationMembershipService\nEconomic/financial cooperation\nCapabilities that a federation member can provide\nInformation about a federation\nComplete federation management system\nMember information within a federation\nService for managing federation membership\nRegistry for managing federations\nQuery for searching federations\nFederation status\nTypes of federations\nGeneral purpose cooperation\nGeographic scope for federations\nGovernance and decision-making\nIn-memory implementation of FederationRegistry\nRequires invitation from existing members\nMember has left the federation\nMembership policy for federations\nMember status within a federation\nOpen to all nodes\nPending approval/activation\nMember was removed/banned\nResearch and development\nSuspended member\nAdd member to federation\nFederation creator/administrator\nComputational capabilities\nCreate a new federation\nCreate a new federation\nWhen the federation was created\nDescription of the federation’s purpose\nUnique federation identifier\nFederation type/category\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeographic presence\nGeographic scope if applicable\nGet capabilities for a DID in a specific federation\nGet member reputation in context\nGet federation information\nGet federation information\nGet federations for a DID\nGet federations for a specific DID\nGet federation members\nGet trust scope for a DID (federation-based)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a DID is a member of a federation\nJoin a federation\nLeave a federation\nList all federations\nList federations\nMembership policy\nGet membership service\nPublic metadata\nHuman-readable name\nNetwork capabilities\nGet registry\nRemove member from federation\nRequired capabilities for members\nSearch federations by criteria\nSearch federations\nSpecialized services\nFederation status\nStorage capabilities\nUpdate federation information\nUpdate member capabilities\nUpdate member presence\nActive member with full rights\nActive and operational\nTrust validation passed\nAssertion/signing\nAuthentication\nBootstrap session between two federations\nStatus of a bootstrap session\nConfiguration for cross-federation trust bridges\nCapability delegation\nCapability invocation\nType of verification challenge\nBootstrap completed successfully\nWeight based on contribution history\nCoordinator/facilitator role\nCustom trust context with specified name\nCustom weight assignment\nCustom role\nCustom challenge\nTrust for data sharing and privacy-sensitive operations\nTrust validation failed\nDID ownership proof\nPolicy for DID document verification\nResult of DID document verification\nDissolved - no longer active\nDissolving - in process of shutdown\nEqual weight for all members\nEstablishing trust\nFormer member\nSession expired\nBootstrap failed\nDID document for federation-level identity\nMetadata for federation DID document\nDID document verification engine for federations\nFederation identifier\nFederation member information\nFederation metadata containing configuration and member …\nPublic key in a federation DID document\nRoles a member can have within a federation\nScope configuration for a federation\nService endpoint in a federation DID document\nStatus of a federation\nTrust bootstrapping protocol for federations\nCross-federation trust bridge\nTrust policy specific to a federation\nForming - not yet fully operational\nFounding member\nGeneral purpose trust for basic cooperation\nGeographic scope definition\nTrust for governance activities (voting, proposals, …\nGovernance committee member\nTrust for identity verification and credential validation\nTrust for network infrastructure and routing\nSession initiated\nVerification failed\nJSON Web Key\nKey agreement/encryption\nPurpose for which a key can be used\nMember leaving the federation\nStandard member\nStatus of a federation member\nWeight based on member size\nMembership criteria for joining the federation\nFederation membership proof\nTrust for mutual credit and economic transactions\nVerification requires additional information\nWaiting for response\nProbationary member with limited rights\nPublic key bytes\nMultibase-encoded public key\nQuorum policy for federation decisions\nTrust for resource sharing (compute, storage, network …\nScoped trust relationship that includes context and …\nSignature challenge\nSize limits for federation\nSuspended member with no rights\nSuspended - temporarily inactive\nTechnical committee member\nTrust attestation\nWeight based on trust level\nTrust committee member\nDifferent trust contexts for federation activities\nTrust inheritance configuration\nTrust policy engine for validating trust relationships and …\nTrust policy rule for validation\nTrust validation result\nRequirements for trust verification\nVerification passed\nVerification challenge for bootstrap\nVerification material for a method\nVerification method for DID operations\nVerifying credentials\nHow voting weights are assigned to members\nAdd a cross-federation trust bridge\nAdd federation membership for a DID\nAdd a scoped trust relationship to a federation\nAdd a member to the federation\nAdd a verification policy\nAdd a policy rule\nAdd a trust anchor\nAdd a trusted DID document\nWhether cross-federation trust is allowed\nWhether cross-federation trust is allowed\nWhether cross-federation verification is allowed\nTrust contexts that can flow across this bridge\nTrust contexts this rule applies to\nMinimum percentage required for approval (0.0-1.0)\nGet string representation of the trust context\nAssertion methods\nRequired attestor trust levels\nAuthentication methods\nBase trust relationship\nWhether trust can flow bidirectionally across this bridge\nBridge configuration\nTrust degradation when crossing the bridge\nCross-federation bridges\nCapability delegation methods\nCapability invocation methods\nChallenge data\nChallenge ID\nChallenge mechanisms enabled\nChallenge type\nVerification challenges\nCheck if federation meets quorum for a decision type\nClean up expired sessions\nComplete trust establishment\nWhether challenge is completed\nSpecific trust context\nTrust context this policy applies to\nKey controller\nController DID\nCountries included\nCreation timestamp\nCreation timestamp\nCreation timestamp\nCustom criteria\nCustom validation logic identifier\nDeactivated status\nChallenge deadline\nDecision type this policy applies to\nTrust degradation factor per inheritance level (0.0-1.0)\nDescription of the federation’s purpose\nService description\nMember DID\nFederation DID document\nTimestamp when bridge was established\nExpected response\nOptional expiration timestamp\nExpiration timestamp\nFederation this trust relationship belongs to (if any)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource federation\nParse trust context from string\nGeographic scope (if applicable)\nGet active members\nGet active bootstrap sessions\nGet federation memberships for a DID\nWhether the scope is global\nFederation identifier\nFederation DID\nKey ID\nService ID\nMethod ID\nWhether this trust can be inherited by child cooperatives\nTrust inheritance rules\nTrust inheritance configuration\nInitiate trust bootstrap with another federation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a DID is a member of a specific federation\nJoin timestamp\nKey agreement methods\nKey type (e.g., “Ed25519VerificationKey2020”)\nLast activity timestamp\nLocal federation ID\nLocal areas included\nMaximum trust level that can flow across the bridge\nMaximum inheritance depth (how many levels down trust can …\nMaximum document age (seconds)\nMaximum inheritance depth allowed\nMaximum number of member cooperatives\nMaximum total membership across all cooperatives\nList of member cooperatives\nMembership criteria\nAdditional metadata for this scoped trust\nDocument metadata\nSession metadata\nMethod type\nMinimum number of attestations required\nMinimum trust level that can be inherited\nMinimum number of members to remain active\nMinimum trust level required\nMinimum trust level required\nMinimum trust level required\nName of the policy rule\nHuman-readable name\nPolicy name\nCreate a new trust policy engine\nCreate new federation metadata\nCreate a new DID verifier\nCreate a new bootstrap engine\nNext update deadline\nWhether periodic re-verification is required\nProbationary period (seconds)\nProcess bootstrap response\nCooperative profile\nService properties\nProposed trust contexts\nProposed trust level\nPublic key bytes\nPublic keys for federation operations\nKey purpose\nQuorum policies for different types of decisions\nMinimum percentage of members required for quorum (0.0-1.0)\nRegions/states included\nRemote federation ID\nRemove a member from the federation\nWhether federation membership is required\nWhether unanimous consent is required\nRequired attestations\nRequired capabilities\nRequired cooperative types\nRequired verification methods\nRequired key purposes\nRequired trust anchors\nResolve DID document from federation network\nRe-verification interval (seconds)\nRoles within the federation\nPolicy rules\nFederation scope configuration\nSectoral scope (industry/domain focus)\nService endpoint URL\nService type\nService endpoints\nSession ID\nSet federation status\nSize limits\nFederation status\nMember status\nSession status\nTarget federation\nTrust relationship between federations\nTrust policy configuration\nTrust relationships with other members\nLast updated timestamp\nLast updated timestamp\nValidate trust for a specific context and operation\nVerification material\nVerification methods\nTrust verification requirements\nVerify a DID document\nVerify trust chain between DIDs\nVersion of the document\nVoting deadline in seconds\nVoting weight\nVoting weight assignment\nDID that was verified\nDID that failed verification\nDID under verification\nReason for failure\nRequired additional information\nTrust level established\nVerification path\nEffective trust level after all calculations\nReason for denial\nTrust path taken (for inherited or bridged trust)\nCounts credentials issued by <code>CredentialIssuer::issue</code>.\nCounts successful zero-knowledge proof verifications.\nCounts failed zero-knowledge proof verifications.\nSimple in-memory implementation of <code>RevocationRegistry</code>.\nRegistry of issued credentials used to check revocation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if a credential has been revoked.\nCreate a new empty registry.\nRecord a newly issued credential by CID.\nMark a credential as revoked. Returns <code>true</code> if the …\nChallenge was accepted and trust was revoked/reduced\nNew attestation created\nAttestation revoked\nExisting attestation updated\nTrust challenge created\nTrust challenge resolved\nStatus of a trust challenge\nIn-memory implementation of TrustAttestationStore for …\nMulti-party trust attestation record containing multiple …\nChallenge is pending review\nChallenge was rejected and trust remains\nTrust score recalculated\nA single attestation in a multi-party trust relationship\nStore for managing trust attestations and challenges\nTrust audit event for maintaining immutable history\nTrust challenge record for disputing trust relationships\nTypes of trust audit events\nChallenge is under investigation\nChallenge was withdrawn by challenger\nDID of the entity performing the action\nAdd an attestation to this record\nAggregated trust score based on reputation weighting\nAll attestations for this subject in this context\nDID of the cooperative making this attestation\nCalculate aggregated trust score using simple averaging …\nUnique identifier for this challenge\nSpecific attestation being challenged (optional)\nDID of the entity whose trust is being challenged\nDID of the entity challenging the trust\nTrust context for this attestation\nTrust context for all attestations in this record\nTrust context being challenged\nTrust context for the action\nCID of this record when anchored in DAG\nCID when anchored in DAG\nCID when anchored in DAG\nAdditional event data\nUnique identifier for this audit event\nType of trust event\nOptional evidence or justification for the attestation\nEvidence supporting the challenge\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet attesters who have vouched for this subject\nRetrieve audit events for a subject\nRetrieve a challenge by ID\nRetrieve a trust record by subject and context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimestamp when this record was last updated\nList challenges by status\nCreate a new trust attestation (unsigned)\nCreate a new multi-party trust record\nCreate a new trust challenge\nCreate a new empty store\nReason for the challenge\nRemove an attestation by attester DID\nSet evidence for this challenge\nSign this attestation with the provided signing key\nCryptographic signature by the attester\nCurrent status of the challenge\nStore an audit event\nStore a trust challenge\nStore a multi-party trust record\nDID of the entity being attested to (target of trust)\nDID of the entity being attested to\nDID of the entity affected by the action\nTimestamp when attestation was created\nTimestamp when challenge was created\nTimestamp of the event\nCreate the canonical message bytes for signing\nTrust level being attested\nUpdate challenge status\nVerify all attestations in this record\nVerify the signature of this attestation\nVerify the attestation using a DID resolver\nChallenge resolution options\nConfiguration for the trust verification engine\nMain trust verification engine\nTrust verification result\nNumber of valid attestations\nTime-to-live for trust attestations in seconds\nTotal reputation of attesters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet trust audit trail for a subject\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssues found during verification\nMinimum number of attestations required for trust …\nMinimum aggregate reputation score required for attesters\nMinimum reputation required to challenge trust\nCreate a new trust verification engine\nResolve a trust challenge\nSubmit a new trust attestation\nSubmit a trust challenge\nAggregated trust score\nCID of verification record in DAG\nWhether trust is verified\nVerify trust for a subject in a given context\nVerifier implementation for the Bulletproofs proving …\nSimple verifier used for testing that always returns <code>true</code> …\nSupported circuits for Groth16 credential proofs.\nProver implementation for Groth16 proofs using circuits …\nVerifier implementation for Groth16 proofs.\nCaller reputation below required threshold.\nThe proof structure is invalid or malformed.\nThe proof backend isn’t supported by the verifier.\nVerification failed due to an unspecified reason.\nErrors that can occur when verifying zero-knowledge proofs.\nTrait for generating zero-knowledge proofs for credentials.\nTrait for verifying revocation proofs that prove a …\nTrait for verifying zero-knowledge credential proofs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new prover wrapping the provided proving key and …\nCreate a new verifier from the prepared verifying key and …\nGenerate a proof for the provided circuit using credential …\n<code>ToString::to_string</code>, but without panic on OOM.\nVerify the supplied <code>ZkCredentialProof</code>. Returns <code>Ok(true)</code> if …\nVerify the supplied <code>ZkCredentialProof</code> using a cached …\nVerify the supplied <code>ZkRevocationProof</code>.\nRun setup for the provided circuit.\nManage Groth16 proving and verifying keys on disk.\nSource of Groth16 parameters when generating keys.\nUse pre-generated parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the proving key previously stored on disk.\nGenerate new parameters for <code>circuit</code> and store them under …\nAccess the in-memory proving key.\nVerify the stored verifying key signature with the …")