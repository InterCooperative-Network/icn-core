searchState.loadedDescShard("icn_identity", 0, "Minimal identity primitives: key-gen, DID:key, signing, …\nSize of an encoded Ed25519 signature in bytes.\nTrait for resolving a <code>Did</code> to the verifying key used for …\nEd25519 signature.\nRepresents a verifiable proof that a job was executed. …\nSimple in-memory implementation of <code>KeyStorage</code> and …\nSimple in-memory <code>MembershipResolver</code> backed by a map of …\nSimple resolver that understands the <code>did:key</code> method.\nTrait for rotating signing keys.\nTrait representing storage for signing keys associated …\nEnforces scoped permissions by consulting a …\nResolves whether a DID belongs to a particular <code>NodeScope</code>.\nResolver for the <code>did:peer</code> method (algorithm 0).\nThe length of a ed25519 <code>Signature</code>, in bytes.\nWrapper for raw Ed25519 signature bytes with optional …\nSign the provided message bytestring using <code>Self</code> (e.g. a …\ned25519 signing key which can be used to produce …\nAn ed25519 public key.\nResolve verifying keys for <code>did:web</code> identifiers using a …\nAdd a DID as a member of the provided scope.\nConvert this <code>SigningKey</code> into a <code>SecretKey</code> reference\nView this public key as a byte array.\nCheck that <code>actor</code> is a member of <code>scope</code>, returning an error …\nCPU time consumed by the job in milliseconds.\nReturn a <code>did:key</code> DID for the given Ed25519 public key.\nConstruct a <code>did:peer</code> identifier (algorithm 0) from a …\nConstruct a <code>did:web</code> identifier from a domain and optional …\nDID of the executor node that performed the job.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDerive this public key from its corresponding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nConstruct a <code>SigningKey</code> from a <code>SecretKey</code>\nConstruct a <code>VerifyingKey</code> from a slice of bytes.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nConstruct from an <code>ed25519_dalek::Signature</code>.\nConstruct a <code>SigningKey</code> from the bytes of a <code>VerifyingKey</code> …\nParse an Ed25519 signature from a byte slice.\nGenerate an ed25519 signing key.\nGenerate an Ed25519 key-pair using the OS CSPRNG.\nRetrieve the signing key for the given DID, if available.\nInsert a verifying key for the given <code>did:web</code> string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the DID is a member of the given scope.\nReturns whether this is a <em>weak</em> public key, i.e., if this …\nUnique identifier of the job that was executed.\nCreate a new resolver with an empty key map.\nCreate a new enforcer using the provided membership …\nCreate an empty resolver.\nParse a <code>did:web</code> DID into its domain and path segments.\nBytes for the <code>R</code> component of a signature.\nPlaceholder function demonstrating use of common types for …\nRemove a member from the scope if present.\nResolve the given DID to an Ed25519 verifying key.\nCID of the deterministic result output by the job …\nGenerate a new key for the DID and return the updated DID …\nBytes for the <code>s</code> component of a signature.\nCryptographic signature of the receipt fields (job_id, …\nSign the given message and return a digital signature\nConvenience wrapper around signing raw bytes with an …\nSigns this receipt with the provided Ed25519 SigningKey. …\nStore the signing key for the given DID.\nWhether the job execution completed successfully.\nReturn the inner byte array.\nConvert this <code>SigningKey</code> into a <code>SecretKey</code>\nConvert this public key to a byte array.\nConvert back into an <code>ed25519_dalek::Signature</code>.\nReturn this verifying key in Edwards form.\nConvert this signing key to a 64-byte keypair.\nConvert this verifying key into Montgomery form.\nConvert this signing key into a Curve25519 scalar. This is …\nConvert this signing key into a byte representation of an …\nCreates the canonical message bytes used when signing an …\nConvert this signature into a byte vector.\nAttempt to sign the given message, returning a digital …\nSign a message with this signing key’s secret key.\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this signing key’s …\nVerify a signature on a message with this keypair’s …\nVerifies the receipt signature against the public key …\nVerifies the signature of this receipt against the …\nVerify a message/signature pair with an Ed25519 …\nStrictly verify a signature on a message with this signing …\nStrictly verify a signature on a message with this keypair…\nVerify the receipt using a custom <code>DidResolver</code>.\nGet the <code>VerifyingKey</code> for this <code>SigningKey</code>.\nParse a <code>did:key</code> DID into the associated verifying key.\nExtract the verifying key from a <code>did:peer</code> identifier …\nZero-knowledge proof helpers used by the identity …\nA verifiable credential issued by a DID subject to …\nA credential containing only a subset of claims.\nArbitrary claims asserted by the issuer.\nDisclosed claims.\nDisclose a subset of fields and generate a proof for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDID of the credential holder.\nDID of the credential holder.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDID of the issuer.\nDID of the issuer.\nCreate a new unsigned credential.\nClaims that should remain private when sharing the …\nOptional credential schema reference.\nOptional schema reference.\nCreate a disclosure containing only the specified claim …\nSign all claims individually using the issuer’s key.\nPer-claim signatures generated by the issuer.\nSignatures for disclosed claims.\nVerify all disclosed claim signatures against the issuer …\nVerify a single claim against the issuer’s verifying key.\nSimple in-memory store for issued credentials.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifier implementation for the Bulletproofs proving …\nSimple verifier used for testing that always returns <code>true</code> …\nSupported circuits for Groth16 credential proofs.\nProver implementation for Groth16 proofs using circuits …\nVerifier implementation for Groth16 proofs.\nCaller reputation below required threshold.\nThe proof structure is invalid or malformed.\nThe proof backend isn’t supported by the verifier.\nVerification failed due to an unspecified reason.\nErrors that can occur when verifying zero-knowledge proofs.\nTrait for generating zero-knowledge proofs for credentials.\nTrait for verifying revocation proofs that prove a …\nTrait for verifying zero-knowledge credential proofs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new prover wrapping the provided proving key and …\nCreate a new verifier from the prepared verifying key and …\nGenerate a proof for the provided circuit using credential …\nVerify the supplied <code>ZkCredentialProof</code>. Returns <code>Ok(true)</code> if …\nVerify the supplied <code>ZkCredentialProof</code> using a cached …\nVerify the supplied <code>ZkRevocationProof</code>.\nManage Groth16 proving and verifying keys on disk.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad the proving key previously stored on disk.\nGenerate new parameters for <code>circuit</code> and store them under …\nAccess the in-memory proving key.\nVerify the stored verifying key signature with the …")