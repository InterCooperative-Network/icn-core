searchState.loadedDescShard("icn_network", 0, "Networking for ICN (<code>icn-network</code>)\nPrefix for DID document records stored in the DHT.\nPrefix for federation info records stored in the DHT.\nLegacy type aliases for compatibility\nNetwork service trait definition.\nComprehensive network statistics for monitoring and …\nWrapper around a peer’s stable identifier used within …\nPrefix for service advertisement records stored in the DHT.\nA network message signed by the sender.\nStub implementation for testing.\nAdvanced adaptive routing for ICN network\nDeadline for bid submissions (Unix timestamp)\nBroadcast a pre-signed message. Default implementation …\nConfirm quorum status by querying the network with retries.\nConnect to a peer at the given multiaddress.\nProposed cost in mana\nDID of the job creator\nDecode a raw byte slice into a <code>ProtocolMessage</code>.\nDiscover federations known to connected peers.\nReturns a boxed object from a boxed trait object if the …\nReturns an <code>Arc</code>-ed object from an <code>Arc</code>-ed trait object if …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nEstimated execution time in seconds\nExecutor’s capabilities for job execution\nDID of the executor submitting the bid\nFederations the executor belongs to\nTrust scope for the executor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct from a raw string.\nRetrieve a record previously stored via [<code>store_record</code>]. …\nBroadcast a governance proposal with retry logic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nUnique job identifier\nID of the job being bid on\nBrief job specification for filtering\nLast measured round-trip latency in milliseconds.\nCID of the job manifest with full details\nMaximum mana willing to pay\nMaximum observed round-trip latency in milliseconds.\nThe underlying payload.\nMinimum observed round-trip latency in milliseconds.\nResources being offered\nExecutor’s current reputation score\nPlaceholder function for testing network operations.\nSend a pre-signed message. Default implementation returns …\nDID of the sender.\nNetwork service factory for ICN\nCreate a <code>SignedMessage</code> by signing <code>message</code> with <code>signing_key</code> …\nSignature over the message and DID.\nStore a record in the network DHT. Keys should take the …\nSubscribe to signed messages. Default implementation …\nBorrow the underlying string representation.\n<code>ToString::to_string</code>, but without panic on OOM.\nVerify the signature contained in a <code>SignedMessage</code>.\nIntegration with the existing network service\nConfiguration for adaptive routing behavior\nAdaptive routing engine that provides intelligent route …\nNetwork partition detected\nNetwork topology information\nNew route discovered\nRoute performance improved\nInformation about a network route\nPerformance metrics for route monitoring\nWeights for different factors in route selection\nRoute became unhealthy\nEvents emitted by the adaptive routing system\nNumber of routes currently maintained\nAverage route discovery time\nAverage number of routes per destination\nEstimated bandwidth capacity\nWeight for bandwidth factor (higher is better)\nCalculate a composite score for route selection\nDestination DID\nRoute discovery timestamp (Unix timestamp)\nNumber of failed route attempts\nFind the best route to a destination\nForce route discovery for a destination\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all known destinations\nGet network topology information\nGet current routing performance metrics\nGet routes to a specific destination\nPercentage of healthy routes\nWeight for hop count factor (lower is better)\nIntermediate peers in the route\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this route is currently healthy\nLast time this route was used (Unix timestamp)\nEstimated latency for this route (milliseconds)\nWeight for latency factor (lower is better)\nMaximum latency threshold for route selection\nMaximum number of routes to maintain per destination\nMinimum reputation score to consider a peer\nMinimum success rate to consider a route healthy\nOverall network connectivity score (0.0 to 1.0)\nCreate a new adaptive routing engine\nCreate a new adaptive network service\nNumber of alternative routes to try in parallel\nTime window for measuring route performance\nNumber of destinations with available routes\nUpdate route performance based on a failed transmission\nRecord the result of using a route\nUpdate route performance based on a successful transmission\nWeight for peer reputation factor (higher is better)\nHow often to refresh route information\nWeight factors for route selection\nSend a message using adaptive routing\nStart the adaptive routing engine\nSuccess rate over the performance window\nWeight for success rate factor (higher is better)\nNumber of successful route selections\nGet event receiver for routing events\nTotal number of known destinations\nTotal number of routes maintained\nTotal number of routing decisions made\nNumber of times this route has been used\nError occurred during the libp2p noise handshake phase\nErrors that can occur during mesh network operations …\nFailure decoding a received network message\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nProduction implementation of <code>NetworkService</code> backed by …\nConfiguration options for the libp2p networking backend.\nAdd a bootstrap peer from a multiaddr string.\nAttempt to connect to the given peer multiaddress.\nCreate a development-friendly network configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve a record from the DHT\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the current listening addresses for this node\nReturn the local peer’s identifier.\nSpawn the networking service using the given configuration.\nInterval for automatic peer discovery queries\nCreate a production-ready network configuration with …\nPut a record into the DHT\nSet listen addresses from string representations.\nGracefully shut down the networking task\nValidate the network configuration for production …\nTotal bytes received over the network.\nTotal bytes sent over the network.\nCurrent number of peers in the Kademlia routing table.\nTotal messages received over the network.\nTotal messages sent over the network.\nCurrent number of connected peers.\nAverage ping round-trip time in milliseconds.\nLast observed ping round-trip time in milliseconds.\nMaximum observed ping round-trip time in milliseconds.\nMinimum observed ping round-trip time in milliseconds.\nBenchmarking environment - optimized for performance …\nBootstrap peer information\nDevelopment environment - prefers real networking but …\nCreation failed\nSuccessfully created libp2p service\nNetwork service environment types\nUnified network service configuration\nResult of network service creation\nFactory for creating network services\nNetwork service creation options\nBuilder for network service options\nProduction environment - requires real networking\nFallback to stub service\nTesting environment - may use stub services\nMultiaddress\nWhether to allow fallback to stub services\nBootstrap interval in seconds\nBootstrap peers\nNetwork configuration\nConnection timeout in milliseconds\nCreate a network service based on options\nCreate a service with automatic environment detection\nCreate a service for production with strict requirements\nCreate a service for testing with custom configuration\nEnable mDNS discovery\nTarget environment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeartbeat interval in milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKademlia replication factor\nListen addresses\nMaximum number of peers\nMaximum peers per IP\nCustom network identifier for isolation\nPeer discovery interval in seconds\nPeer ID\nConvenience functions for common network service creation …\nCustom network protocol ID\nRequest timeout in milliseconds\nTime provider for network operations\nWhether this peer is trusted\nOptional priority weight\nCreate a local development network service\nCreate a production-ready network service\nCreate a fast testing service")