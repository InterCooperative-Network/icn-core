searchState.loadedDescShard("icn_action", 0, "ICN Action Encoding and QR/NFC Support\nTypes of actions that can be encoded in QR codes or NFC …\nErrors that can occur during action processing\nGeneric action with custom parameters\nJoin a federation/cooperative\nQR code error correction levels\nQR code output formats\nMetadata for QR code generation\nShare content by CID\nShare identity (DID)\nSubmit a job to the mesh\nTransfer tokens\nVerify a credential\nVote on a proposal\nVote choices for governance proposals\nAction URL encoding and decoding\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQR code generation for ICN actions\nEncodes and decodes actions to/from URLs\nDecode an icn:// URL into an action\nDecode a compact URL\nEncode an action as an icn:// URL\nCreate a shortened URL for QR codes (returns base64 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQR code generator for ICN actions\nUtility functions for QR code operations\nCreate a QR metadata configuration for common use cases\nDisplay QR code in terminal (basic ASCII art version …\nEstimate the optimal size for a QR code based on data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a compact QR code for an action (uses base64 …\nGenerate QR code for an action directly\nGenerate a QR code for an action as PNG bytes (stub when …\nGenerate a QR code for an action with custom metadata …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChoose error correction level based on use case\nGenerate QR code and save to file")