searchState.loadedDescShard("icn_governance", 0, "ICN Governance Crate\nNewly created and under discussion before voting opens\nManages governance proposals and voting.\nFull proposal record stored in the governance module.\nTrait for governance execution hooks.\nUnique identifier for a governance proposal.\nCurrent lifecycle state of a proposal.\nParameters for submitting a new proposal\nThe type of action a proposal intends to perform.\nSpecific remediation actions for dispute resolution.\nProposal containing one or more resolution actions.\nA single vote on a proposal.\nPossible voting options.\nActively collecting votes\nAdds a new member eligible to vote.\nGovernance automation for ICN\nRecord a vote for the specified proposal.\nAutomatically close all proposals whose voting deadlines …\nFinalizes voting on a proposal and updates its status …\nCID of proposal body stored in the DAG\nDelegate <code>from</code> member’s vote to <code>to</code> member.\nExecutes an accepted proposal. New members are added when …\nMark any proposals past their deadline as <code>Rejected</code> without …\nFederation Trust Governance\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRebuild module state by replaying events from the store.\nFetch a proposal by ID if it exists.\nInserts a proposal that originated from another node into …\nInserts a vote that originated from another node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn all currently stored proposals.\nReturns a reference to the current member set.\nCreates a new GovernanceModule with an in-memory backend.\nCreates a new GovernanceModule with a sled persistent …\nTransition a proposal from <code>Deliberation</code> to <code>VotingOpen</code>.\nOptional quorum override for this proposal\nRanked Choice Voting implementation for ICN governance\nRemoves an existing member, preventing them from voting.\nRevoke any delegation for <code>from</code>.\nRegister a callback executed when proposals are run via […\nSets the minimum number of votes required for a proposal …\nSets the fraction of <code>Yes</code> votes required for acceptance.\nPlaceholder function demonstrating use of common types for …\nCreate and store a new proposal in the governance module.\nCounts yes/no/abstain votes for a proposal, considering …\nOptional threshold override for this proposal\n<code>ToString::to_string</code>, but without panic on OOM.\nCore voting primitives and traits for ICN governance\nCreates an in-memory governance module backed by the …\nAccess revoked\nReminder that voting period is ending soon\nEconomic action was taken\nTypes of policy enforcement actions\nResult of proposal execution\nFinal reminder before voting closes\nConfiguration for governance automation\nAutomated governance engine\nStatistics about governance automation\nTypes of governance events that can be automated\nInitial voting notification\nMana penalty applied\nParameter was changed\nPermission was granted or revoked\nPolicy enforcement action taken\nPolicy error occurred\nNew policy was installed\nPolicy violation information\nState tracking for automated proposal processing\nProposal automatically executed\nNew proposal submitted\nProposal reached quorum\nTypes of voting reminders\nSide effects of governance execution\nTemporary restriction imposed\nVote cast on a proposal\nNotification that voting has closed\nVoting reminder sent\nCurrent status of voting on a proposal\nWarning issued\nProposals eligible for automatic execution\nAutomatic execution threshold (proposals with this support …\nAverage participation rate across proposals\nAverage support rate for proposals with quorum\nEligible voters for this proposal\nTotal number of eligible voters\nEnable automatic policy enforcement\nEnable predictive proposal analysis\nError message if execution failed\nWhether execution has been attempted\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current automation statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGas/mana consumed during execution\nMaximum number of concurrent proposal processing tasks\nMinimum participation rate required for valid votes\nCreate a new governance automation engine\nCurrent participation rate\nPredicted final outcome (if prediction is enabled)\nProcess a new proposal submission\nProcess a vote cast on a proposal\nProposal details\nHow often to check for new proposals\nMaximum time a proposal can remain active\nProposals still collecting votes\nProposals that have reached quorum\nWhether quorum has been reached\nExecution receipt if available\nReminders that have been sent\nSide effects of the execution\nStart the governance automation engine\nStop the governance automation engine\nWhen the proposal was submitted\nWhether execution was successful\nCurrent support percentage\nGet event receiver for governance events\nTotal number of active proposals\nNumber of votes cast\nVotes received so far\nVoting reminder intervals\nCurrent voting status\nBudget allocation proposal targeting a specific recipient.\nAmount of mana to allocate.\nApply a <code>BudgetProposal</code> by crediting the recipient in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHuman readable description of the allocation purpose.\nAccount receiving the allocated funds.\nAbstain from voting\nActive and functioning\nAdd member to federation\nAdvisory member with limited voting rights\nAction is allowed\nApplication approved\nCancelled\nCommittee chair with enhanced privileges\nCommittee decision on a violation\nStatus of a trust committee\nConfirm violation and apply sanctions\nViolation confirmed, sanctions applied\nTemporary suspension from certain contexts\nBridge federations\nCustom violation type\nData privacy violation\nVote options for committee decisions\nAction is denied\nDismiss as unfounded\nViolation dismissed as unfounded\nPermanently dissolved\nEconomic misconduct\nExecute a proposal\nExecuted successfully\nPermanent expulsion from federation\nProposal failed\nFailed to meet requirements\nFederation governance engine that enforces trust-aware …\nError types for federation governance\nFederation membership trust gate\nProposal within a federation context\nFull federation suspension\nGovernance action that requires trust validation\nGovernance error types\nGovernance manipulation\nResult of governance action validation\nIdentity misrepresentation\nInfrastructure abuse\nMalicious behavior\nStandard voting member\nMembership action types\nResult of membership application evaluation\nModify federation membership\nObserver without voting rights\nOpen for voting\nProposal passed\nPassed and ready for execution\nApplication pending additional review\nStatus of a federation proposal\nApplication rejected\nRecommend remediation without sanctions\nCase closed with remediation\nRemove member from federation\nJust reported, under initial review\nAction requires additional validation\nResource abuse\nRestore suspended member\nSubmit a proposal\nSuspend member\nTemporarily suspended\nGovernance policy with trust requirements\nTrust committee governance structure\nTrust committee member\nRoles within a trust committee\nTemporary trust level reduction\nTrust sanction types\nTrust threshold policy for federation activities\nTrust violation record\nUnder investigation by committee\nUnder review/restructuring\nInvestigation complete, pending decision\nUpdate trust relationships\nStatus of a trust violation case\nTypes of trust violations\nVote on a proposal\nResult of voting on a proposal\nWarning issued to member\nAction this policy applies to\nWhether member is currently active\nActivity name this policy applies to\nAdd member to trust committee\nAdd a governance policy\nAdditional requirements\nWhether cross-federation participation is allowed\nApply sanctions based on committee decision\nRequired committee approval percentage (0.0-1.0)\nCommittee decisions on this violation\nMinimum committee approval percentage (0.0-1.0)\nCommittee member votes on a violation\nProposal content\nTrust context of the violation\nTrust contexts this member can evaluate\nCreate a new trust committee\nCreation timestamp\nWhen committee was formed\nAdditional custom requirements\nWhen decision was made\nDetailed description\nMember DID\nEvaluate membership application\nEvidence supporting the violation\nFederation this proposal belongs to\nFederation this committee serves\nFederation where violation occurred\nFederation this gate applies to\nFinalize a proposal and determine the result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet committee by ID\nGet proposal by ID\nGet proposals by status\nGet violations for a member\nCheck if member has active sanctions\nProposal ID\nCommittee ID\nUnique violation ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen member was added to committee\nList all proposals in a federation\nTrust contexts this committee handles\nCommittee member making decision\nCommittee members\nMinimum number of existing member attestations\nMinimum trust level required\nMinimum trust level required\nMinimum trust level from existing members\nMinimum member votes required\nCreate a new federation governance engine\nCommittee policies\nProbationary period for new members (seconds)\nProposer DID\nQuorum requirement (0.0-1.0)\nReasoning for the decision\nRecommended sanctions\nRemove member from trust committee\nReport a trust violation\nWhen violation was reported\nReporter DID\nWhether federation membership is required\nWhether unanimous committee approval is required\nRequired trust context\nRequired trust context\nRequired trust contexts to be evaluated\nRole in the committee\nApplied sanctions\nSet membership trust gate for federation\nSet trust threshold policy\nProposal status\nCommittee status\nCurrent status\nSubmit a proposal with trust validation\nTrust context required for participation\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate if an action is allowed for a given actor\nValidate trust threshold for an activity\nType of violation\nDID of the violating member\nCast a vote on a proposal with trust validation\nDecision vote\nVotes cast\nVoting deadline\nMinimum voting threshold (0.0-1.0)\nVoting weight (default 1.0)\nCounts votes cast.\nCounts executed proposals.\nCounts proposal submissions.\nBallot validator for ranked choice ballots\nRanked choice voting system implementation\nExecute ranked choice voting algorithm\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ranked choice voting system\nCreate a new ranked choice ballot validator\nReset the validator state for a new election\nOperations that may be subject to scoped policy checks …\nIn-memory implementation of <code>ScopedPolicyEnforcer</code> based on …\nTrait for enforcing scoped policies on DAG operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new enforcer with the given allowed members for …\nUnique identifier for a ballot\nTrait for validating ballots across different voting …\nCandidate information for elections\nUnique identifier for a candidate\nElection configuration and metadata\nUnique identifier for an election\nRules for determining voter eligibility\nRanked choice ballot implementation\nResults of a ranked choice voting tally\nResults from a single round of ranked choice voting\nDigital signature for ballot verification\nComprehensive error types for voting operations\nVoting period specification\nCore trait for voting system implementations\nCheck for duplicate votes from the same voter\nContent stored in DAG for additional election data\nCount votes from a collection of ballots\nElection creation timestamp\nCreator of the election\nCustom eligibility criteria stored in DAG\nGet the voter’s first choice candidate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if the voting period has ended\nCheck if the voting period has not started yet\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the voting period is currently active\nCheck if a voter is eligible to participate\nMinimum reputation score (if applicable)\nCreate a new ranked choice ballot\nGet the voter’s nth choice candidate (0-indexed)\nOrdered list of candidate preferences (1st choice, 2nd …\nRequired DID credentials or patterns\nRequired federation membership\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate a ballot’s format and eligibility\nValidate the format and structure of a ballot\nValidate that preferences don’t contain duplicates\nVerify the cryptographic signature of a ballot")