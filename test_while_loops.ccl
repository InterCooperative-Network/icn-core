// Comprehensive while loop test - should be fully working based on WASM implementation

fn test_basic_while() -> Integer {
    let counter = 0;
    while counter < 5 {
        counter = counter + 1;
    }
    return counter; // Should return 5
}

fn test_nested_while() -> Integer {
    let outer = 0;
    let result = 0;
    
    while outer < 3 {
        let inner = 0;
        while inner < 2 {
            result = result + 1;
            inner = inner + 1;
        }
        outer = outer + 1;
    }
    
    return result; // Should return 6 (3 * 2)
}

fn test_while_with_conditions(limit: Integer) -> Integer {
    let count = 0;
    let sum = 0;
    
    while count < limit {
        if count > 2 {
            sum = sum + count;
        }
        count = count + 1;
    }
    
    return sum;
}

fn test_while_early_exit() -> Integer {
    let i = 0;
    while i < 100 {
        if i == 7 {
            return i; // Early exit
        }
        i = i + 1;
    }
    return 999; // Should not reach here
}

fn run() -> Integer {
    // Test all while loop patterns
    let basic = test_basic_while();        // Should be 5
    let nested = test_nested_while();      // Should be 6  
    let conditional = test_while_with_conditions(5); // Should be 3+4 = 7
    let early = test_while_early_exit();   // Should be 7
    
    // Return sum to verify all worked: 5 + 6 + 7 + 7 = 25
    return basic + nested + conditional + early;
} 