openapi: 3.0.0
info:
  title: InterCooperative Network API
  version: 0.1.0-dev-functional
servers:
  - url: http://127.0.0.1:7845
paths:
  /info:
    get:
      summary: Node information and DID
      responses:
        '200':
          description: Node metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfo'
              example:
                version: "0.1.0-dev-functional"
                name: "ICN Node"
                status_message: "ready"
  /status:
    get:
      summary: Real-time node status
      responses:
        '200':
          description: Status details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeStatus'
              example:
                is_online: true
                peer_count: 3
                current_block_height: 42
                version: "0.1.0-dev-functional"
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Node is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "ok"
                timestamp: 1728000000
                uptime_seconds: 3600
                checks:
                  runtime: "ok"
                  dag_store: "ok"
                  network: "ok"
                  mana_ledger: "ok"
  /ready:
    get:
      summary: Readiness probe
      responses:
        '200':
          description: Node is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatus'
              example:
                ready: true
                timestamp: 1728000000
                checks:
                  can_serve_requests: true
                  mana_ledger_available: true
                  dag_store_available: true
                  network_initialized: true
  /mesh/submit:
    post:
      summary: Submit a mesh job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitJobRequest'
            example:
              manifest_cid: "bafyjobmanifest"
              spec_bytes: "BASE64_SPEC"
              cost_mana: 10
      responses:
        '200':
          description: Job created
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
              example:
                job_id: "job-123"
  /mesh/jobs:
    get:
      summary: List mesh computing jobs
      responses:
        '200':
          description: Job list
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      type: object
              example:
                jobs:
                  - job_id: "job-123"
                    status: "Running"
  /mesh/jobs/{job_id}:
    get:
      summary: Get specific job status
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: string
                  status:
                    type: string
              example:
                job_id: "job-123"
                status: "Completed"
  /mesh/receipts:
    post:
      summary: Submit execution receipt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitReceiptRequest'
            example:
              job_id: "job-123"
              executor_did: "did:key:executor"
              result_cid: "bafyresult"
              cpu_ms: 150
              success: true
              signature_hex: "abcd1234"
      responses:
        '200':
          description: Receipt accepted
          content:
            application/json:
              schema:
                type: object
              example:
                accepted: true
  /governance/proposals:
    get:
      summary: List governance proposals
      responses:
        '200':
          description: Proposal list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - proposal_id: "prop-1"
                  description: "Increase timeout"
  /governance/proposal/{id}:
    get:
      summary: Fetch a proposal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Proposal info
          content:
            application/json:
              schema:
                type: object
              example:
                proposal_id: "prop-1"
                description: "Increase timeout"
                status: "Open"
  /governance/submit:
    post:
      summary: Submit a proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitProposalRequest'
            example:
              proposer_did: "did:key:alice"
              proposal: { "type": "ParameterChange" }
              description: "Increase mesh timeout"
              duration_secs: 86400
              quorum: 3
              threshold: 0.5
      responses:
        '200':
          description: Proposal id
          content:
            application/json:
              schema:
                type: string
              example: "prop-1"
  /governance/vote:
    post:
      summary: Cast a vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CastVoteRequest'
            example:
              voter_did: "did:key:alice"
              proposal_id: "prop-1"
              vote_option: "Yes"
      responses:
        '200':
          description: Vote accepted
          content:
            application/json:
              schema:
                type: object
              example:
                accepted: true
  /governance/delegate:
    post:
      summary: Delegate voting power
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelegateRequest'
            example:
              from_did: "did:key:alice"
              to_did: "did:key:bob"
      responses:
        '200':
          description: Delegation recorded
          content:
            application/json:
              schema:
                type: object
              example:
                delegated: true
  /governance/revoke:
    post:
      summary: Revoke a delegation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeDelegationRequest'
            example:
              from_did: "did:key:alice"
      responses:
        '200':
          description: Delegation revoked
          content:
            application/json:
              schema:
                type: object
              example:
                revoked: true
  /governance/close:
    post:
      summary: Close voting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalIdPayload'
            example:
              proposal_id: "prop-1"
      responses:
        '200':
          description: Vote closed
          content:
            application/json:
              schema:
                type: object
              example:
                status: "Accepted"
                yes: 2
                no: 0
                abstain: 1
  /governance/execute:
    post:
      summary: Execute proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposalIdPayload'
            example:
              proposal_id: "prop-1"
      responses:
        '200':
          description: Execution result
          content:
            application/json:
              schema:
                type: object
              example:
                executed: true
  /dag/put:
    post:
      summary: Store data in DAG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DagBlockPayload'
            example:
              data: "aGVsbG8="
              credential_proof:
                issuer: "did:key:issuer"
                holder: "did:key:holder"
                claim_type: "membership"
                proof: "0x1234"
                schema: "bafyschemacid"
      responses:
        '200':
          description: CID string
          content:
            application/json:
              schema:
                type: string
              example: "bafyblockcid"
  /dag/get:
    post:
      summary: Retrieve data from DAG
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CidRequest'
            example:
              cid: "bafyblockcid"
      responses:
        '200':
          description: Data block
          content:
            application/json:
              schema:
                type: string
              example: "aGVsbG8="
  /dag/meta:
    post:
      summary: Retrieve DAG metadata
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CidRequest'
            example:
              cid: "bafyblockcid"
      responses:
        '200':
          description: Metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DagBlockMetadata'
              example:
                size: 1024
                timestamp: 1728000000
                author_did: "did:key:alice"
                links: []
  /dag/pin:
    post:
      summary: Pin a DAG block
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PinRequest'
            example:
              cid: "bafyblockcid"
              ttl: 3600
      responses:
        '200':
          description: Pinned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cid'
              example:
                version: 1
                codec: 0
                hash_alg: 1
                hash_bytes: "AAEC"
  /dag/unpin:
    post:
      summary: Unpin a DAG block
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CidRequest'
            example:
              cid: "bafyblockcid"
      responses:
        '200':
          description: Unpinned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cid'
              example:
                version: 1
                codec: 0
                hash_alg: 1
                hash_bytes: "AAEC"
  /dag/prune:
    post:
      summary: Prune unpinned blocks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example: {}
      responses:
        '200':
          description: Pruned
          content:
            application/json:
              schema:
                type: object
              example:
                pruned: true
  /network/local-peer-id:
    get:
      summary: Show local peer ID
      responses:
        '200':
          description: Peer ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer_id:
                    type: string
              example:
                peer_id: "12D3KooW..."
  /network/connect:
    post:
      summary: Connect to a peer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeerPayload'
            example:
              peer: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
      responses:
        '200':
          description: Connection result
          content:
            application/json:
              schema:
                type: object
              example:
                connected: true
  /network/peers:
    get:
      summary: List network peers
      responses:
        '200':
          description: Peer list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "12D3KooWpeer1"
                - "12D3KooWpeer2"
  /transaction/submit:
    post:
      summary: Submit a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
            example:
              id: "tx-1"
              timestamp: 1728000000
              sender_did: "did:key:alice"
              recipient_did: "did:key:bob"
              payload_type: "Transfer"
              payload: "AAEC"
              nonce: 1
              mana_limit: 100
              mana_price: 1
      responses:
        '200':
          description: Transaction id
          content:
            application/json:
              schema:
                type: string
              example: "tx-1"
  /tokens/classes:
    get:
      summary: List token classes
      responses:
        '200':
          description: Token classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenClass'
              example:
                - id: "pantry-credit"
                  transferable: true
  /tokens/class:
    post:
      summary: Create a token class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenClassRequest'
            example:
              id: "pantry-credit"
              description: "Food pantry credit"
              transferable: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                type: string
              example: "pantry-credit"
  /tokens/mint:
    post:
      summary: Mint resource tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintTokensRequest'
            example:
              class_id: "pantry-credit"
              amount: 10
              recipient_did: "did:key:alice"
      responses:
        '200':
          description: Minted
          content:
            application/json:
              schema:
                type: object
              example:
                minted: true
  /tokens/transfer:
    post:
      summary: Transfer resource tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferTokensRequest'
            example:
              class_id: "pantry-credit"
              amount: 5
              from_did: "did:key:alice"
              to_did: "did:key:bob"
      responses:
        '200':
          description: Transferred
          content:
            application/json:
              schema:
                type: object
              example:
                transferred: true
  /tokens/burn:
    post:
      summary: Burn resource tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BurnTokensRequest'
            example:
              class_id: "pantry-credit"
              amount: 3
              owner_did: "did:key:alice"
      responses:
        '200':
          description: Burned
          content:
            application/json:
              schema:
                type: object
              example:
                burned: true
  /data/query:
    post:
      summary: Query data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CidRequest'
            example:
              cid: "bafyblockcid"
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DagBlock'
              example:
                cid:
                  version: 1
                  codec: 0
                  hash_alg: 1
                  hash_bytes: "AAEC"
                data: "aGVsbG8="
  /contracts:
    post:
      summary: Upload WASM contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractSourcePayload'
            example:
              source: "(module ...)"
              credential_proof:
                issuer: "did:key:issuer"
                holder: "did:key:holder"
                claim_type: "membership"
                proof: "0x1234"
                schema: "bafyschemacid"
      responses:
        '200':
          description: Upload result
          content:
            application/json:
              schema:
                type: object
                properties:
                  manifest_cid:
                    type: string
              example:
                manifest_cid: "bafycontractmanifest"
  /federation/peers:
    get:
      summary: List federation peers
      responses:
        '200':
          description: Peers
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "12D3KooWpeer1"
                - "12D3KooWpeer2"
    post:
      summary: Add federation peer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPeerPayload'
            example:
              peer: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
      responses:
        '200':
          description: Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  peer:
                    type: string
              example:
                peer: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
  /federation/join:
    post:
      summary: Join a federation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeerPayload'
            example:
              peer: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
      responses:
        '200':
          description: Joined
          content:
            application/json:
              schema:
                type: object
                properties:
                  joined:
                    type: string
              example:
                joined: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
  /federation/leave:
    post:
      summary: Leave the federation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeerPayload'
            example:
              peer: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
      responses:
        '200':
          description: Left
          content:
            application/json:
              schema:
                type: object
                properties:
                  left:
                    type: string
              example:
                left: "/ip4/127.0.0.1/tcp/4001/p2p/12D3KooW..."
  /federation/status:
    get:
      summary: Current federation status
      responses:
        '200':
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederationStatus'
              example:
                peer_count: 3
                peers:
                  - "12D3KooWpeer1"
                  - "12D3KooWpeer2"
                  - "12D3KooWpeer3"
  /metrics:
    get:
      summary: Prometheus metrics
      responses:
        '200':
          description: Metrics
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP icn_requests_total Total HTTP requests
                icn_requests_total{path="/info"} 5
components:
  schemas:
    NodeInfo:
      type: object
      properties:
        version:
          type: string
        name:
          type: string
        status_message:
          type: string
    NodeStatus:
      type: object
      properties:
        is_online:
          type: boolean
        peer_count:
          type: integer
        current_block_height:
          type: integer
        version:
          type: string
    HealthStatus:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: integer
        uptime_seconds:
          type: integer
        checks:
          $ref: '#/components/schemas/HealthChecks'
    HealthChecks:
      type: object
      properties:
        runtime:
          type: string
        dag_store:
          type: string
        network:
          type: string
        mana_ledger:
          type: string
    ReadinessStatus:
      type: object
      properties:
        ready:
          type: boolean
        timestamp:
          type: integer
        checks:
          $ref: '#/components/schemas/ReadinessChecks'
    ReadinessChecks:
      type: object
      properties:
        can_serve_requests:
          type: boolean
        mana_ledger_available:
          type: boolean
        dag_store_available:
          type: boolean
        network_initialized:
          type: boolean
    SubmitJobRequest:
      type: object
      properties:
        manifest_cid:
          type: string
        spec_bytes:
          type: string
          format: byte
        cost_mana:
          type: integer
    SubmitReceiptRequest:
      type: object
      properties:
        job_id:
          type: string
        executor_did:
          type: string
        result_cid:
          type: string
        cpu_ms:
          type: integer
        success:
          type: boolean
        signature_hex:
          type: string
    CastVoteRequest:
      type: object
      properties:
        voter_did:
          type: string
        proposal_id:
          type: string
        vote_option:
          type: string
    DelegateRequest:
      type: object
      properties:
        from_did:
          type: string
        to_did:
          type: string
    RevokeDelegationRequest:
      type: object
      properties:
        from_did:
          type: string
    SubmitProposalRequest:
      type: object
      properties:
        proposer_did:
          type: string
        proposal:
          type: object
        description:
          type: string
        duration_secs:
          type: integer
        quorum:
          type: integer
        threshold:
          type: number
        body:
          type: string
          format: byte
          nullable: true
    ProposalIdPayload:
      type: object
      properties:
        proposal_id:
          type: string
  DagBlockPayload:
    type: object
    properties:
      data:
        type: string
        format: byte
      credential_proof:
        $ref: '#/components/schemas/ZkCredentialProof'
        nullable: true
      revocation_proof:
        $ref: '#/components/schemas/ZkRevocationProof'
        nullable: true
    CidRequest:
      type: object
      properties:
        cid:
          type: string
    PinRequest:
      type: object
      properties:
        cid:
          type: string
        ttl:
          type: integer
          nullable: true
    Cid:
      type: object
      properties:
        version:
          type: integer
        codec:
          type: integer
        hash_alg:
          type: integer
        hash_bytes:
          type: string
          format: byte
    DagBlock:
      type: object
      properties:
        cid:
          $ref: '#/components/schemas/Cid'
        data:
          type: string
          format: byte
        links:
          type: array
          items:
            type: object
        timestamp:
          type: integer
        author_did:
          type: string
        signature:
          type: string
          format: byte
          nullable: true
        scope:
          type: string
          nullable: true
    DagBlockMetadata:
      type: object
      properties:
        size:
          type: integer
        timestamp:
          type: integer
        author_did:
          type: string
        links:
          type: array
          items:
            type: object
  ContractSourcePayload:
    type: object
    properties:
      source:
        type: string
      credential_proof:
        $ref: '#/components/schemas/ZkCredentialProof'
        nullable: true
      revocation_proof:
        $ref: '#/components/schemas/ZkRevocationProof'
        nullable: true
    PeerPayload:
      type: object
      properties:
        peer:
          type: string
    AddPeerPayload:
      type: object
      properties:
        peer:
          type: string
    ZkCredentialProof:
      type: object
      properties:
        issuer:
          type: string
        holder:
          type: string
        claim_type:
          type: string
        proof:
          type: string
          format: byte
        schema:
          type: string
        vk_cid:
          type: string
          nullable: true
        disclosed_fields:
          type: array
          items:
            type: string
        challenge:
          type: string
          nullable: true
        backend:
          type: string
        verification_key:
          type: string
          format: byte
          nullable: true
        public_inputs:
          type: object
          nullable: true
    ZkRevocationProof:
      type: object
      properties:
        issuer:
          type: string
        subject:
          type: string
        proof:
          type: string
          format: byte
        backend:
          type: string
        verification_key:
          type: string
          format: byte
          nullable: true
        public_inputs:
          type: object
          nullable: true
    FederationStatus:
      type: object
      properties:
        peer_count:
          type: integer
        peers:
          type: array
          items:
            type: string
    Transaction:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: integer
        sender_did:
          type: string
        recipient_did:
          type: string
          nullable: true
        payload_type:
          type: string
        payload:
          type: string
          format: byte
        nonce:
          type: integer
        mana_limit:
          type: integer
        mana_price:
          type: integer
        signature:
          type: string
          format: byte
          nullable: true
    TokenClass:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
          nullable: true
        transferable:
          type: boolean
    CreateTokenClassRequest:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        transferable:
          type: boolean
    MintTokensRequest:
      type: object
      properties:
        class_id:
          type: string
        amount:
          type: integer
        recipient_did:
          type: string
    TransferTokensRequest:
      type: object
      properties:
        class_id:
          type: string
        amount:
          type: integer
        from_did:
          type: string
        to_did:
          type: string
    BurnTokensRequest:
      type: object
      properties:
        class_id:
          type: string
        amount:
          type: integer
        owner_did:
          type: string
