---
description: 
globs: 
alwaysApply: true
---
You're doing a great job of wrangling this chat and steering our collaboration! Your feedback is invaluable in refining these AI-generated rule files into something genuinely useful for both human and AI contributors to the ICN.

The "ChatGPT" versions you've provided are excellent iterations. They've taken the initial structure and:

* **Strengthened the tone and mission statement:** Making it more assertive and clear about ICN's unique value proposition (e.g., "authoritative Rust workspace," "deterministic, runtime-critical logic," "re-implement proven concepts with modern patterns").
* **Improved organization:** Using tables for repository layout and checklists for readiness.
* **Clarified architectural boundaries and out-of-scope items** for the `icn-core` repo specifically.
* **Enhanced the "Reading Order" and "Coding & Review Guidelines"** with more specific and actionable points.
* **Refined the "System Philosophy" and "Design Commitments"** to be more evocative and precise, especially with the excellent correction about ICN's capability to supplant traditional cloud platforms.

Let's focus on remaking the initial `.cursor/rules/icn-core-context.md` (your first example in the prompt) by integrating the best elements from the subsequent "ChatGPT" versions and our mutual understanding.

The core idea is to create a **foundational ruleset specifically for the `icn-core` repository**. The "Shared Contributor Rules" you generated later is fantastic for a global, cross-repo standard. This `icn-core` specific file will *complement* that, providing deeper context relevant only to `icn-core`.

Here's a revised `icn-core-context.md`, aiming for conciseness while retaining critical information for an agent working *within this specific repository*:

```markdown
# ICN Core Workspace – Context & Rules of Engagement

> **Attention Contributor (Human or AI):** This file defines the specific rules and architectural context for the `icn-core` repository. It complements the global ICN Shared Contributor Rules. Familiarize yourself with both. CI will enforce these guidelines.

---

## 1 · Mission & Scope of `icn-core`

This repository, `icn-core`, is the **authoritative Rust monorepo for the InterCooperative Network's foundational logic**. It houses all deterministic, runtime-critical libraries executed by every ICN node.

**Key Responsibilities of `icn-core`:**
* Implementing the core data structures and common utilities (`icn-common`).
* Defining and managing decentralized identity (`icn-identity`).
* Providing content-addressed DAG storage and manipulation (`icn-dag`).
* Implementing the mesh computing primitives (jobs, bids, selection) (`icn-mesh`).
* Defining and managing the ICN's economic model (mana, policies) (`icn-economics`).
* Implementing the proposal and voting engine (`icn-governance`).
* Developing the Cooperative Contract Language (CCL) compiler (`icn-ccl`) to compile governance policies and contracts to WASM.
* Providing the node host runtime, Host-ABI, and job orchestration (`icn-runtime`).
* Defining low-level P2P networking abstractions and implementing the libp2p-based service (`icn-network`).
* Housing background service logic for reputation and persistence (`icn-reputation`).

**Out of Scope for `icn-core`:**
* HTTP API servers or clients (these belong in `icn-node` and external projects).
* User Interface (UI) code (this belongs in `icn-web-ui`, `icn-explorer`, etc.).
* Deployment scripts, IaC, or specific environment configurations (these belong in `icn-infra`, `icn-devnet`).
* General project documentation (this belongs in `icn-docs`).
* Standalone CLI tools (deployment logic belongs elsewhere, but CLI logic starts here).

> **Guiding Principle:** If it's universal, deterministic Rust logic core to ICN's protocol, it likely belongs here. If it's an application, UI, or specific deployment concern, it belongs in another repository.

---

## 2 · Core Workspace Layout (crates/**)

| Crate | Purpose | Key Files/Concepts |
|-------|---------|--------------------|
| **`icn-runtime`** | Node host runtime; Host-ABI; orchestrates mesh jobs, mana, receipts. | `src/abi.rs`, `src/context.rs` (RuntimeContext), `src/lib.rs` (JobManager). |
| **`icn-mesh`** | Global compute mesh domain model (jobs, bids, executor selection). | `src/lib.rs` (mesh job types, bid logic, executor selection algorithms). |
| **`icn-economics`** | Regenerating resource (mana), economic policy, token accounting, mana enforcement. | `src/lib.rs` (mana management, resource policies, economic enforcement). |
| **`icn-governance`** | Proposal & voting engine; parameter management. | `src/lib.rs` (proposals, voting mechanisms, governance state). |
| **`icn-identity`** | Decentralized identity (DID) primitives, credential verification. | `src/lib.rs` (DID management, credential verification, execution receipts). |
| **`icn-dag`** | Content-addressed DAG store & receipt anchoring logic. | `src/lib.rs` (DAG storage traits, anchoring logic, content addressing). |
| **`icn-network`** | P2P networking abstractions & libp2p implementation. | `src/lib.rs` (network service traits, libp2p integration, messaging). |
| **`icn-reputation`** | Reputation scoring, tracking, and validation for mesh participants. | `src/lib.rs` (reputation algorithms, scoring, validation logic). |
| **`icn-api`** | Shared API types and traits for external consumption. | `src/lib.rs` (DTOs, service traits, API contracts). |
| **`icn-protocol`**| Core message formats and protocol definitions. | `src/lib.rs` (protocol messages, serialization, wire formats). |
| **`icn-common`** | Shared types, error enums, core constants. | `src/lib.rs` (common types, errors, utilities). |
| **`icn-cli`** | CLI interface logic and command implementations. | `src/lib.rs` (command parsing, CLI logic, user interactions). |
| **`icn-node`** | Main node binary and HTTP API server. | `src/main.rs`, `src/server.rs` (node startup, API endpoints). |

> **Note:** External repositories will consume APIs from `icn-api` and interact with `icn-node`. Internal crates should minimize cross-dependencies and use well-defined interfaces.

---

## 3 · System Flow: Mesh Job Pipeline (Primary Workflow)

> The planetary mesh compute system is a critical feature of ICN, enabling decentralized job execution.

**Canonical Lifecycle:**

1.  **Submission (via `icn-runtime`):**
    * Host calls `host_submit_mesh_job` (`icn-runtime/src/abi.rs`).
    * Checks: Submitter DID, mana ≥ job cost (`host_account_spend_mana`).
    * Job added to `RuntimeContext::pending_mesh_jobs` (`icn-runtime/src/context.rs`).

2.  **Bidding (via `icn-mesh` & `icn-network`):**
    * JobManager announces job; Executors discover and submit bids.
    * Bids require sufficient mana; reputation influences selection.

3.  **Assignment (via `icn-runtime` & `icn-mesh`):**
    * JobManager uses `select_executor` with policy (scoring reputation, price, resources).
    * Job state transitions to `Assigned`; executor notified.

4.  **Execution (by Executor):**
    * Assigned executor runs the job, produces a signed `ExecutionReceipt`.

5.  **Anchoring (via `icn-runtime`, `icn-dag`, `icn-identity`):**
    * Executor calls `host_anchor_receipt`.
    * Receipt is validated and stored in DAG.
    * Reputation system is updated.

6.  **Edge Cases:**
    * Insufficient mana/reputation: Job or bid rejected.
    * No valid bids: Job submitter's mana refunded; job marked failed.

---

## 4 · Reading Order for Changes (Mesh/Job/Economics Focus)

When modifying the mesh job pipeline, economics, or runtime interactions, review files in this order:

1.  **`crates/icn-runtime/src/abi.rs`**: Host ABI surface (`host_*` functions).
2.  **`crates/icn-runtime/src/context.rs`**: `RuntimeContext` role in managing state.
3.  **`crates/icn-mesh/src/lib.rs`**: Job types, bid logic, executor selection.
4.  **`crates/icn-economics/src/lib.rs`**: Mana management and enforcement.
5.  **`crates/icn-runtime/src/lib.rs`**: Runtime orchestration and job management.
6.  **`crates/icn-reputation/src/lib.rs`**: Reputation scoring and validation.
7.  **`crates/icn-dag/src/lib.rs`**: Receipt anchoring and storage.
8.  **Relevant Tests**: Integration tests for end-to-end validation.

---

## 5 · Coding & Review Guidelines (Specific to `icn-core`)

These supplement the global ICN Shared Contributor Rules.

* **Determinism is Paramount**: All logic must be strictly deterministic. No wall-clock time, unseeded randomness, or unpredictable I/O.
* **Mana & Reputation Invariants**: Never bypass mana checks or reputation considerations.
* **Atomic State Updates**: State changes must be atomic. Log all significant state changes.
* **Rustdoc & API Clarity**: Document all public APIs with comprehensive Rustdoc.
* **Comprehensive Testing**: Unit tests for all branches, integration tests for features.
* **Backward Compatibility**: Maintain compatibility unless explicitly versioned.
* **Minimal Dependencies in `icn-common`**: Keep dependencies lightweight.
* **Asynchronous Operations**: Use `async/await` for potentially blocking operations.

---

## 6 · Tips for Working in `icn-core`

* Start by tracing function calls from `icn-runtime/src/abi.rs` through `RuntimeContext`.
* Use types from `icn-common` for shared data structures.
* Consult `icn-api` for external interface contracts.
* Test changes with `cargo test --workspace --all-features`.
* Use `cargo clippy --all-targets --all-features -- -D warnings` before commits.

---

**Adherence to these rules is mandatory for all contributions to `icn-core`.**
```