// Test governance contract for cluster submission
// This contract calculates voting thresholds and proposal outcomes

fn calculate_voting_threshold(total_members: Integer, proposal_type: Integer) -> Integer {
    let base_threshold = total_members / 2;
    let type_multiplier = proposal_type * 10;
    return base_threshold + type_multiplier;
}

fn evaluate_proposal_outcome(votes_for: Integer, votes_against: Integer, threshold: Integer) -> Integer {
    let total_votes = votes_for + votes_against;
    let meets_threshold = total_votes / threshold;
    let majority_check = votes_for / votes_against;
    
    if meets_threshold > 0 {
        if majority_check > 0 {
            return 1; // Approved
        } else {
            return 0; // Rejected
        }
    } else {
        return 2; // Insufficient participation
    }
}

fn calculate_mana_cost_for_proposal(proposal_type: Integer, members_affected: Integer) -> Mana {
    let base_cost = proposal_type * 50;
    let scale_factor = members_affected * 5;
    return base_cost + scale_factor;
}

fn run() -> Integer {
    let total_members = 25;
    let proposal_type = 2;
    let threshold = calculate_voting_threshold(total_members, proposal_type);
    let outcome = evaluate_proposal_outcome(18, 5, threshold);
    let cost = calculate_mana_cost_for_proposal(proposal_type, total_members);
    
    return outcome * 100 + cost;
} 