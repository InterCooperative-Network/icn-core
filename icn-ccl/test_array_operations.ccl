// Comprehensive array operations test - verifying production-ready array system

fn test_array_creation_and_length() -> Integer {
    let numbers = [1, 2, 3, 4, 5];
    return array_len(numbers); // Should return 5
}

fn test_array_push_operations() -> Integer {
    let items = [10, 20];
    array_push(items, 30);
    array_push(items, 40);
    
    return array_len(items); // Should return 4 after pushes
}

fn test_array_pop_operations() -> Integer {
    let values = [100, 200, 300];
    let last_option = array_pop(values);
    
    // For now, let's return the array length after pop instead
    // since Option handling isn't fully implemented yet
    return array_len(values); // Should return 2 after pop
}

fn test_array_access_and_assignment() -> Integer {
    let data = [5, 10, 15, 20];
    
    // Test array access
    let second = data[1]; // Should be 10
    
    // Test array assignment (if supported)
    data[2] = 25; // Change 15 to 25
    let updated = data[2]; // Should be 25
    
    return second + updated; // Should return 10 + 25 = 35
}

fn test_array_method_syntax() -> Integer {
    let collection = [1, 2, 3, 4, 5, 6];
    return collection.length(); // Should return 6
}

fn test_complex_array_manipulation() -> Integer {
    let governance_votes = [45, 23, 67, 89, 12];
    
    // Add more votes
    array_push(governance_votes, 78);
    array_push(governance_votes, 91);
    
    // Calculate some governance metrics
    let total_votes = array_len(governance_votes);
    let last_vote = array_pop(governance_votes);
    
    return total_votes + last_vote; // Should return 7 + 91 = 98
}

fn test_nested_array_operations() -> Integer {
    let proposal_scores = [60, 70, 80];
    let member_counts = [25, 30, 35];
    
    // Simulate vote tallying
    let total_proposals = array_len(proposal_scores);
    let total_members = array_len(member_counts);
    
    // Add new data
    array_push(proposal_scores, 90);
    array_push(member_counts, 40);
    
    let final_proposals = array_len(proposal_scores);
    let final_members = array_len(member_counts);
    
    return (final_proposals + final_members) - (total_proposals + total_members); // Should be 2
}

fn run() -> Integer {
    // Test all array operation patterns
    let creation = test_array_creation_and_length();         // Should be 5
    let push_ops = test_array_push_operations();             // Should be 4
    let pop_ops = test_array_pop_operations();               // Should be 2
    let access = test_array_access_and_assignment();         // Should be 35
    let methods = test_array_method_syntax();                // Should be 6
    let complex = test_complex_array_manipulation();         // Should be 98
    let nested = test_nested_array_operations();             // Should be 2
    
    // Return sum to verify all worked: 5 + 4 + 2 + 35 + 6 + 98 + 2 = 152
    return creation + push_ops + pop_ops + access + methods + complex + nested;
} 