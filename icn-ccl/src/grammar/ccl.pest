// CCL 0.1 Grammar - Cooperative Contract Language
// This grammar defines the syntax for legally-binding contracts, governance rules, and economic agreements

//////////////////////////
// Lexical Elements
//////////////////////////

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ 
    "//" ~ (!"\n" ~ ANY)* |
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

// Identifiers and Keywords
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
keyword = @{ 
    "contract" | "role" | "proposal" | "fn" | "state" | "import" | "export" |
    "when" | "then" | "if" | "else" | "match" | "for" | "while" | "loop" | 
    "let" | "mut" | "return" | "break" | "continue" |
    "true" | "false" | "Some" | "None" | "Ok" | "Err" |
    "transfer" | "mint" | "burn" | "emit" | "require" |
    "can" | "requires" | "extends" | "scope" | "version" |
    "eligible" | "quorum" | "threshold" | "duration" | "execution" |
    "majority" | "supermajority" | "consensus" | "unanimous" |
    "struct" | "enum" | "const"
}

// Literals
integer = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
string = @{ "\"" ~ ( "\\\"" | (!"\"" ~ ANY) )* ~ "\"" }
boolean = { "true" | "false" }

// Special literals
did_literal = @{ "did:" ~ (ASCII_ALPHANUMERIC | ":" | "-" | "_")+ }
scope_literal = @{ "\"" ~ (ASCII_ALPHANUMERIC | ":" | "_" | "-" | ".")+ ~ "\"" }
timestamp_literal = @{ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} ~ "T" ~ ASCII_DIGIT{2} ~ ":" ~ ASCII_DIGIT{2} ~ ":" ~ ASCII_DIGIT{2} ~ "Z" }

//////////////////////////
// Top-level Structure
//////////////////////////

program = { SOI ~ (import_stmt | contract_decl | fn_decl | struct_decl | enum_decl | const_decl)* ~ EOI }

//////////////////////////
// Import Statements
//////////////////////////

import_stmt = { "import" ~ string ~ ("as" ~ identifier)? ~ ";" }
export_stmt = { "export" ~ identifier ~ ";" }

//////////////////////////
// Contract Declarations
//////////////////////////

contract_decl = {
    "contract" ~ identifier ~ "{" ~
        contract_meta* ~
        contract_body* ~
    "}"
}

contract_meta = {
    scope_meta | version_meta | extends_meta
}

scope_meta = { "scope:" ~ scope_literal ~ ";" }
version_meta = { "version:" ~ string ~ ";" }
extends_meta = { "extends:" ~ identifier ~ ";" }

contract_body = _{
    role_decl |
    proposal_decl |
    fn_decl |
    state_decl |
    struct_decl |
    enum_decl |
    const_decl
}

//////////////////////////
// Role Declarations
//////////////////////////

role_decl = {
    "role" ~ identifier ~ ("extends" ~ identifier)? ~ "{" ~
        role_body* ~
    "}"
}

role_body = {
    can_clause | requires_clause
}

can_clause = {
    "can:" ~ "[" ~ permission_list? ~ "]" ~ ";"
}

requires_clause = {
    "requires:" ~ "[" ~ requirement_list? ~ "]" ~ ";"
}

permission_list = {
    identifier ~ ("," ~ identifier)*
}

requirement_list = {
    requirement ~ ("," ~ requirement)*
}

requirement = {
    identifier ~ ":" ~ expr
}

//////////////////////////
// Proposal Declarations
//////////////////////////

proposal_decl = {
    "proposal" ~ identifier ~ "{" ~
        proposal_field* ~
    "}"
}

proposal_field = {
    proposal_meta | voting_config | execution_block
}

proposal_meta = {
    description_meta | eligible_meta | duration_meta
}

description_meta = { "description:" ~ string ~ ";" }
eligible_meta = { "eligible:" ~ identifier ~ ";" }
duration_meta = { "duration:" ~ duration_expr ~ ";" }

voting_config = {
    quorum_config | threshold_config
}

quorum_config = { "quorum:" ~ percentage ~ ";" }
threshold_config = { "threshold:" ~ threshold_type ~ ";" }

threshold_type = {
    "majority" | "supermajority" ~ "(" ~ fraction ~ ")" | "consensus" | "unanimous"
}

percentage = @{ ASCII_DIGIT+ ~ "%" }
fraction = @{ ASCII_DIGIT+ ~ "/" ~ ASCII_DIGIT+ }
duration_expr = { integer ~ duration_unit }
duration_unit = { "days" | "hours" | "minutes" | "seconds" }

execution_block = {
    "execution:" ~ "{" ~ statement* ~ "}"
}

//////////////////////////
// Function Declarations
//////////////////////////

fn_decl = {
    "fn" ~ identifier ~ type_parameters? ~ "(" ~ parameter_list? ~ ")" ~ return_type? ~ block
}

type_parameters = {
    "<" ~ type_parameter_list ~ ">"
}

type_parameter_list = {
    type_parameter ~ ("," ~ type_parameter)*
}

type_parameter = {
    identifier ~ (":" ~ type_bounds)?
}

type_bounds = {
    type_bound ~ ("+" ~ type_bound)*
}

type_bound = {
    identifier
}

parameter_list = {
    parameter ~ ("," ~ parameter)*
}

parameter = {
    identifier ~ ":" ~ type_expr
}

return_type = {
    "->" ~ type_expr
}

//////////////////////////
// Type System
//////////////////////////

type_expr = {
    basic_type | array_type | map_type | option_type | result_type | generic_instantiation | custom_type | type_parameter_ref
}

basic_type = {
    "Integer" | "String" | "Boolean" | "Bool" | "Mana" | "Did" | "Timestamp" | "Duration"
}

array_type = {
    "[" ~ type_expr ~ "]" | "Array" ~ "<" ~ type_expr ~ ">"
}

map_type = {
    "map" ~ "<" ~ type_expr ~ "," ~ type_expr ~ ">" | "Map" ~ "<" ~ type_expr ~ "," ~ type_expr ~ ">"
}

option_type = {
    "Option" ~ "<" ~ type_expr ~ ">"
}

result_type = {
    "Result" ~ "<" ~ type_expr ~ "," ~ type_expr ~ ">"
}

custom_type = {
    identifier
}

generic_instantiation = {
    identifier ~ "<" ~ type_expr_list ~ ">"
}

type_expr_list = {
    type_expr ~ ("," ~ type_expr)*
}

type_parameter_ref = {
    identifier
}

//////////////////////////
// State Declarations
//////////////////////////

state_decl = {
    "state" ~ identifier ~ ":" ~ type_expr ~ ("=" ~ expr)? ~ ";"
}

//////////////////////////
// Struct and Enum Declarations
//////////////////////////

struct_decl = {
    "struct" ~ identifier ~ type_parameters? ~ "{" ~ field_list? ~ "}"
}

field_list = {
    field ~ ("," ~ field)*
}

field = {
    identifier ~ ":" ~ type_expr
}

enum_decl = {
    "enum" ~ identifier ~ type_parameters? ~ "{" ~ variant_list? ~ "}"
}

variant_list = {
    variant ~ ("," ~ variant)*
}

variant = {
    identifier ~ ("(" ~ type_expr ~ ")")?
}

//////////////////////////
// Constant Declarations
//////////////////////////

const_decl = {
    "const" ~ identifier ~ ":" ~ type_expr ~ "=" ~ expr ~ ";"
}

//////////////////////////
// Statements and Blocks
//////////////////////////

block = {
    "{" ~ statement* ~ "}"
}

statement = {
    let_stmt | assignment_stmt | if_stmt | while_stmt | for_stmt | 
    match_stmt | return_stmt | break_stmt | continue_stmt | 
    emit_stmt | require_stmt | expr_stmt
}

let_stmt = {
    "let" ~ ("mut")? ~ identifier ~ (":" ~ type_expr)? ~ "=" ~ expr ~ ";"
}

assignment_stmt = {
    identifier ~ "=" ~ expr ~ ";" |
    identifier ~ "[" ~ expr ~ "]" ~ "=" ~ expr ~ ";" |
    identifier ~ "." ~ identifier ~ "=" ~ expr ~ ";"
}

lvalue = {
    identifier | member_access | index_access
}

member_access = {
    expr ~ "." ~ identifier
}

index_access = {
    expr ~ "[" ~ expr ~ "]"
}

if_stmt = {
    "if" ~ expr ~ block ~ ("else" ~ "if" ~ expr ~ block)* ~ ("else" ~ block)?
}

while_stmt = {
    "while" ~ expr ~ block
}

for_stmt = {
    "for" ~ identifier ~ "in" ~ expr ~ block
}

match_stmt = {
    match_expr
}

return_stmt = {
    "return" ~ expr? ~ ";"
}

break_stmt = {
    "break" ~ ";"
}

continue_stmt = {
    "continue" ~ ";"
}

emit_stmt = {
    "emit" ~ identifier ~ "{" ~ field_init_list? ~ "}" ~ ";"
}

field_init_list = {
    field_init ~ ("," ~ field_init)*
}

field_init = {
    identifier ~ ":" ~ expr
}

require_stmt = {
    "require" ~ "(" ~ expr ~ ")" ~ ";"
}

expr_stmt = {
    expr ~ ";"
}

//////////////////////////
// Expressions
//////////////////////////

expr = {
    logical_or
}

logical_or = {
    logical_and ~ ("||" ~ logical_and)*
}

logical_and = {
    equality ~ ("&&" ~ equality)*
}

equality = {
    comparison ~ (equality_op ~ comparison)*
}

equality_op = { "==" | "!=" }

comparison = {
    addition ~ (comparison_op ~ addition)*
}

comparison_op = { "<=" | ">=" | "<" | ">" }

addition = {
    multiplication ~ (addition_op ~ multiplication)*
}

addition_op = { "+" | "-" }

multiplication = {
    unary ~ (multiplication_op ~ unary)*
}

multiplication_op = { "*" | "/" | "%" }

unary = {
    ("!" | "-") ~ unary | postfix
}

postfix = {
    primary ~ (call_suffix | member_suffix | index_suffix)*
}

call_suffix = {
    "(" ~ arg_list? ~ ")"
}

member_suffix = {
    "." ~ identifier
}

index_suffix = {
    "[" ~ expr ~ "]"
}

arg_list = {
    expr ~ ("," ~ expr)*
}

primary = {
    literal | struct_literal | enum_value | array_literal |
    some_expr | none_expr | ok_expr | err_expr |
    match_expr | identifier | "(" ~ expr ~ ")"
}

literal = {
    integer | float | string | boolean | did_literal | timestamp_literal
}

array_literal = {
    "[" ~ (expr ~ ("," ~ expr)*)? ~ "]"
}

struct_literal = {
    identifier ~ "{" ~ field_init_list? ~ "}"
}

enum_value = {
    identifier ~ "::" ~ identifier
}

some_expr = {
    "Some" ~ "(" ~ expr ~ ")"
}

none_expr = {
    "None"
}

ok_expr = {
    "Ok" ~ "(" ~ expr ~ ")"
}

err_expr = {
    "Err" ~ "(" ~ expr ~ ")"
}

//////////////////////////
// Special Expressions for Governance
//////////////////////////

transfer_expr = {
    "transfer" ~ "(" ~ expr ~ "," ~ expr ~ "," ~ expr ~ ")"
}

mint_expr = {
    "mint" ~ "(" ~ expr ~ "," ~ expr ~ ")"
}

burn_expr = {
    "burn" ~ "(" ~ expr ~ "," ~ expr ~ ")"
}

//////////////////////////
// Match Expressions
//////////////////////////

match_expr = {
    "match" ~ expr ~ "{" ~ match_arm+ ~ "}"
}

match_arm = {
    pattern ~ ("if" ~ expr)? ~ "=>" ~ expr ~ ","?
}

pattern = {
    wildcard_pattern |
    literal_pattern |
    variable_pattern |
    struct_pattern |
    enum_pattern |
    tuple_pattern |
    array_pattern
}

wildcard_pattern = { "_" }

literal_pattern = {
    integer | float | string | boolean
}

variable_pattern = {
    identifier
}

struct_pattern = {
    identifier ~ "{" ~ struct_field_pattern_list? ~ "}"
}

struct_field_pattern_list = {
    struct_field_pattern ~ ("," ~ struct_field_pattern)*
}

struct_field_pattern = {
    identifier ~ ":" ~ pattern |
    identifier  // Shorthand for field: field
}

enum_pattern = {
    identifier ~ "::" ~ identifier ~ ("(" ~ pattern_list? ~ ")")?
}

pattern_list = {
    pattern ~ ("," ~ pattern)*
}

tuple_pattern = {
    "(" ~ pattern_list? ~ ")"
}

array_pattern = {
    "[" ~ pattern_list? ~ "]"
}

//////////////////////////
// Precedence and Associativity
//////////////////////////

// Operators are defined in order of precedence (lowest to highest)
// Left-associative by default in Pest when using repetition with ~ 