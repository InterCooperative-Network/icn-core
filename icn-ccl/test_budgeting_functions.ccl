// Simplified Budgeting Contract - Testing infinite loop fix
// This version avoids struct definitions to focus on core logic

const BUDGET_SMALL_LIMIT: Mana = 1000;
const BUDGET_MEDIUM_LIMIT: Mana = 10000;
const BUDGET_LARGE_LIMIT: Mana = 100000;

const APPROVAL_SIMPLE: Integer = 1;
const APPROVAL_COMMITTEE: Integer = 2;
const APPROVAL_ASSEMBLY: Integer = 3;

const DAY: Integer = 86400; // Seconds in a day

// Token/mana API helper functions (simplified)
fn get_token_balance(category: String, holder: Did) -> Mana {
    return 10000; // Stub return value
}

fn burn_tokens(category: String, holder: Did, amount: Mana) -> Bool {
    return true; // Stub return value
}

fn transfer_tokens(class: String, from: Did, to: Did, amount: Mana) -> Bool {
    return true; // Stub return value
}

// Core budgeting functions
fn get_category_available_funds(category: String) -> Mana {
    return get_token_balance(category, host_get_caller());
}

fn allocate_funds(category: String, amount: Mana) -> Bool {
    return burn_tokens(category, host_get_caller(), amount);
}

fn transfer_mana(recipient: Did, amount: Mana) -> Bool {
    return transfer_tokens("mana", host_get_caller(), recipient, amount);
}

// CRITICAL FUNCTION: Tests the infinite loop fix
fn array_contains_did(arr: Array<Did>, item: Did) -> Bool {
    let i = 0;
    while i < array_len_did(arr) {
        if arr[i] == item {
            return true;
        }
        i = i + 1;  // FIXED: This was causing infinite loops
    }
    return false;
}

// Function that uses the fixed array_contains_did
fn check_approval_exists(approved_by: Array<Did>, approver: Did) -> Bool {
    return array_contains_did(approved_by, approver);
}

fn get_required_approval_level(amount: Mana) -> Integer {
    if amount <= BUDGET_SMALL_LIMIT {
        return APPROVAL_SIMPLE;
    }
    if amount <= BUDGET_MEDIUM_LIMIT {
        return APPROVAL_COMMITTEE;
    }
    return APPROVAL_ASSEMBLY;
}

fn count_approvals(approvers: Array<Did>) -> Integer {
    return array_len_did(approvers);
}

// Budget validation function
fn validate_expenditure(amount: Mana, category: String, approvers: Array<Did>) -> Bool {
    let available_funds = get_category_available_funds(category);
    
    if amount > available_funds {
        return false;
    }
    
    let required_approval = get_required_approval_level(amount);
    let approval_count = count_approvals(approvers);
    
    return approval_count >= required_approval;
}

// Calculate budget health score (0-100)
fn calculate_budget_health(allocated: Mana, spent: Mana, time_remaining: Integer) -> Integer {
    if allocated == 0 {
        return 0;
    }
    
    let utilization = spent * 100 / allocated;
    let time_factor = time_remaining / DAY;
    
    if utilization > 90 {
        return 20; // Poor health
    }
    if utilization > 70 {
        return 50; // Moderate health
    }
    
    return 80; // Good health
}

// Main test function
fn run() -> Integer {
    // Test the infinite loop fix by calling array_contains_did
    let test_approvers = [host_get_caller()];
    let approver_exists = check_approval_exists(test_approvers, host_get_caller());
    
    if approver_exists {
        return 42; // Success - the loop worked correctly
    }
    
    return 99; // Should not reach here
} 