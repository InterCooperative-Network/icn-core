// ICN Cooperative Contract: Educational Governance System
// This contract manages cooperative educational institutions including:
// - Democratic curriculum development and approval
// - Student voice and participation in governance
// - Faculty evaluation and peer review processes
// - Resource allocation for educational programs

fn evaluate_curriculum_proposal(
    subject_area_relevance: Integer,
    learning_outcomes_clarity: Integer,
    resource_requirements: Integer,
    student_demand: Integer,
    faculty_expertise: Integer,
    community_benefit: Integer,
    innovation_factor: Integer
) -> Integer {
    // Returns proposal evaluation score 0-100
    let evaluation_score = 0;
    
    // Subject area relevance (0-20 points)
    let relevance_points = 0;
    let highly_relevant_check = subject_area_relevance / 85;
    let moderately_relevant_check = subject_area_relevance / 70;
    let somewhat_relevant_check = subject_area_relevance / 55;
    
    let relevance_points = 20 * highly_relevant_check + 
                          15 * (moderately_relevant_check - highly_relevant_check) + 
                          10 * (somewhat_relevant_check - moderately_relevant_check);
    
    // Learning outcomes clarity (0-18 points)
    let outcomes_points = 0;
    let excellent_clarity_check = learning_outcomes_clarity / 90;
    let good_clarity_check = learning_outcomes_clarity / 75;
    let fair_clarity_check = learning_outcomes_clarity / 60;
    
    let outcomes_points = 18 * excellent_clarity_check + 
                         14 * (good_clarity_check - excellent_clarity_check) + 
                         10 * (fair_clarity_check - good_clarity_check);
    
    // Resource requirements assessment (0-15 points) - lower requirements = higher score
    let resource_points = 0;
    let low_resource_check = 30 / resource_requirements; // 1 if requirements <= 30
    let medium_resource_check = 60 / resource_requirements; // 1 if requirements <= 60
    let high_resource_check = 90 / resource_requirements; // 1 if requirements <= 90
    
    let resource_points = 15 * low_resource_check + 
                         12 * (medium_resource_check - low_resource_check) + 
                         8 * (high_resource_check - medium_resource_check);
    
    // Student demand (0-15 points)
    let demand_points = 0;
    let high_demand_check = student_demand / 80;
    let medium_demand_check = student_demand / 60;
    let low_demand_check = student_demand / 40;
    
    let demand_points = 15 * high_demand_check + 
                       12 * (medium_demand_check - high_demand_check) + 
                       8 * (low_demand_check - medium_demand_check);
    
    // Faculty expertise (0-15 points)
    let expertise_points = 0;
    let expert_level_check = faculty_expertise / 85;
    let competent_level_check = faculty_expertise / 70;
    let basic_level_check = faculty_expertise / 55;
    
    let expertise_points = 15 * expert_level_check + 
                          12 * (competent_level_check - expert_level_check) + 
                          8 * (basic_level_check - competent_level_check);
    
    // Community benefit (0-12 points)
    let benefit_points = 0;
    let high_benefit_check = community_benefit / 80;
    let medium_benefit_check = community_benefit / 65;
    let low_benefit_check = community_benefit / 50;
    
    let benefit_points = 12 * high_benefit_check + 
                        9 * (medium_benefit_check - high_benefit_check) + 
                        6 * (low_benefit_check - medium_benefit_check);
    
    // Innovation factor (0-5 points)
    let innovation_points = 0;
    let highly_innovative_check = innovation_factor / 85;
    let moderately_innovative_check = innovation_factor / 70;
    let somewhat_innovative_check = innovation_factor / 55;
    
    let innovation_points = 5 * highly_innovative_check + 
                           4 * (moderately_innovative_check - highly_innovative_check) + 
                           2 * (somewhat_innovative_check - moderately_innovative_check);
    
    let total_score = relevance_points + outcomes_points + resource_points + 
                     demand_points + expertise_points + benefit_points + innovation_points;
    
    return total_score;
}

fn calculate_student_voice_weight(
    academic_standing: Integer,
    years_enrolled: Integer,
    participation_level: Integer,
    leadership_experience: Integer,
    program_relevance: Integer
) -> Integer {
    // Returns voting weight percentage (50-150)
    let base_weight = 100; // Base 100% voting weight
    
    // Academic standing adjustment
    let academic_adjustment = 0;
    let excellent_standing_check = academic_standing / 90;
    let good_standing_check = academic_standing / 75;
    let satisfactory_standing_check = academic_standing / 60;
    
    let academic_adjustment = 10 * excellent_standing_check + 
                             5 * (good_standing_check - excellent_standing_check) + 
                             0 * (satisfactory_standing_check - good_standing_check) + 
                             (0 - 10) * (1 - satisfactory_standing_check);
    
    // Years enrolled bonus (experience matters)
    let enrollment_bonus = 0;
    let senior_check = years_enrolled / 4; // 1 if >= 4 years
    let junior_check = years_enrolled / 3; // 1 if >= 3 years
    let sophomore_check = years_enrolled / 2; // 1 if >= 2 years
    
    let enrollment_bonus = 15 * senior_check + 
                          10 * (junior_check - senior_check) + 
                          5 * (sophomore_check - junior_check);
    
    // Participation level bonus
    let participation_bonus = 0;
    let high_participation_check = participation_level / 80;
    let medium_participation_check = participation_level / 60;
    let low_participation_check = participation_level / 40;
    
    let participation_bonus = 20 * high_participation_check + 
                             15 * (medium_participation_check - high_participation_check) + 
                             10 * (low_participation_check - medium_participation_check);
    
    // Leadership experience bonus
    let leadership_bonus = 0;
    let extensive_leadership_check = leadership_experience / 80;
    let some_leadership_check = leadership_experience / 60;
    let minimal_leadership_check = leadership_experience / 40;
    
    let leadership_bonus = 10 * extensive_leadership_check + 
                          7 * (some_leadership_check - extensive_leadership_check) + 
                          4 * (minimal_leadership_check - some_leadership_check);
    
    // Program relevance (relevant to the specific vote)
    let relevance_bonus = 0;
    let highly_relevant_check = program_relevance / 85;
    let moderately_relevant_check = program_relevance / 70;
    let somewhat_relevant_check = program_relevance / 55;
    
    let relevance_bonus = 5 * highly_relevant_check + 
                         3 * (moderately_relevant_check - highly_relevant_check) + 
                         1 * (somewhat_relevant_check - moderately_relevant_check);
    
    let final_weight = base_weight + academic_adjustment + enrollment_bonus + 
                      participation_bonus + leadership_bonus + relevance_bonus;
    
    // Cap between 50% and 150%
    let below_minimum = 50 / final_weight; // 1 if final_weight < 50
    let above_maximum = final_weight / 151; // 1 if final_weight > 150
    
    let capped_weight = final_weight * (1 - below_minimum - above_maximum) + 
                       50 * below_minimum + 150 * above_maximum;
    
    return capped_weight;
}

fn evaluate_faculty_performance(
    teaching_effectiveness: Integer,
    research_contribution: Integer,
    community_service: Integer,
    student_mentoring: Integer,
    collaborative_spirit: Integer,
    innovation_adoption: Integer
) -> Integer {
    // Returns performance score 0-100
    let performance_score = 0;
    
    // Teaching effectiveness (0-25 points)
    let teaching_points = 0;
    let excellent_teaching_check = teaching_effectiveness / 85;
    let good_teaching_check = teaching_effectiveness / 70;
    let satisfactory_teaching_check = teaching_effectiveness / 55;
    
    let teaching_points = 25 * excellent_teaching_check + 
                         20 * (good_teaching_check - excellent_teaching_check) + 
                         15 * (satisfactory_teaching_check - good_teaching_check);
    
    // Research contribution (0-20 points)
    let research_points = 0;
    let excellent_research_check = research_contribution / 80;
    let good_research_check = research_contribution / 65;
    let basic_research_check = research_contribution / 50;
    
    let research_points = 20 * excellent_research_check + 
                         15 * (good_research_check - excellent_research_check) + 
                         10 * (basic_research_check - good_research_check);
    
    // Community service (0-15 points)
    let service_points = 0;
    let high_service_check = community_service / 80;
    let medium_service_check = community_service / 65;
    let basic_service_check = community_service / 50;
    
    let service_points = 15 * high_service_check + 
                        12 * (medium_service_check - high_service_check) + 
                        8 * (basic_service_check - medium_service_check);
    
    // Student mentoring (0-15 points)
    let mentoring_points = 0;
    let excellent_mentoring_check = student_mentoring / 85;
    let good_mentoring_check = student_mentoring / 70;
    let basic_mentoring_check = student_mentoring / 55;
    
    let mentoring_points = 15 * excellent_mentoring_check + 
                          12 * (good_mentoring_check - excellent_mentoring_check) + 
                          8 * (basic_mentoring_check - good_mentoring_check);
    
    // Collaborative spirit (0-15 points)
    let collaboration_points = 0;
    let highly_collaborative_check = collaborative_spirit / 80;
    let moderately_collaborative_check = collaborative_spirit / 65;
    let somewhat_collaborative_check = collaborative_spirit / 50;
    
    let collaboration_points = 15 * highly_collaborative_check + 
                              12 * (moderately_collaborative_check - highly_collaborative_check) + 
                              8 * (somewhat_collaborative_check - moderately_collaborative_check);
    
    // Innovation adoption (0-10 points)
    let innovation_points = 0;
    let highly_innovative_check = innovation_adoption / 80;
    let moderately_innovative_check = innovation_adoption / 65;
    let somewhat_innovative_check = innovation_adoption / 50;
    
    let innovation_points = 10 * highly_innovative_check + 
                           8 * (moderately_innovative_check - highly_innovative_check) + 
                           5 * (somewhat_innovative_check - moderately_innovative_check);
    
    let total_performance = teaching_points + research_points + service_points + 
                           mentoring_points + collaboration_points + innovation_points;
    
    return total_performance;
}

fn allocate_educational_resources(
    program_enrollment: Integer,
    program_outcomes: Integer,
    resource_efficiency: Integer,
    community_impact: Integer,
    innovation_potential: Integer,
    equity_considerations: Integer
) -> Integer {
    // Returns resource allocation percentage (50-200)
    let base_allocation = 100; // Base 100% allocation
    
    // Enrollment-based adjustment
    let enrollment_factor = 100; // Default 100%
    let high_enrollment_check = program_enrollment / 80;
    let medium_enrollment_check = program_enrollment / 60;
    let low_enrollment_check = program_enrollment / 40;
    
    let enrollment_factor = 120 * high_enrollment_check + 
                           100 * (medium_enrollment_check - high_enrollment_check) + 
                           80 * (low_enrollment_check - medium_enrollment_check) + 
                           60 * (1 - low_enrollment_check);
    
    // Outcomes-based adjustment
    let outcomes_factor = 100; // Default 100%
    let excellent_outcomes_check = program_outcomes / 85;
    let good_outcomes_check = program_outcomes / 70;
    let fair_outcomes_check = program_outcomes / 55;
    
    let outcomes_factor = 130 * excellent_outcomes_check + 
                         110 * (good_outcomes_check - excellent_outcomes_check) + 
                         90 * (fair_outcomes_check - good_outcomes_check) + 
                         70 * (1 - fair_outcomes_check);
    
    // Resource efficiency factor
    let efficiency_factor = 100; // Default 100%
    let high_efficiency_check = resource_efficiency / 80;
    let medium_efficiency_check = resource_efficiency / 65;
    let low_efficiency_check = resource_efficiency / 50;
    
    let efficiency_factor = 120 * high_efficiency_check + 
                           105 * (medium_efficiency_check - high_efficiency_check) + 
                           90 * (low_efficiency_check - medium_efficiency_check) + 
                           75 * (1 - low_efficiency_check);
    
    // Community impact bonus
    let impact_bonus = 0;
    let high_impact_check = community_impact / 75;
    let medium_impact_check = community_impact / 60;
    let low_impact_check = community_impact / 45;
    
    let impact_bonus = 20 * high_impact_check + 
                      15 * (medium_impact_check - high_impact_check) + 
                      10 * (low_impact_check - medium_impact_check);
    
    // Innovation potential bonus
    let innovation_bonus = 0;
    let high_innovation_check = innovation_potential / 80;
    let medium_innovation_check = innovation_potential / 65;
    let low_innovation_check = innovation_potential / 50;
    
    let innovation_bonus = 15 * high_innovation_check + 
                          12 * (medium_innovation_check - high_innovation_check) + 
                          8 * (low_innovation_check - medium_innovation_check);
    
    // Equity considerations bonus
    let equity_bonus = 0;
    let high_equity_check = equity_considerations / 80;
    let medium_equity_check = equity_considerations / 65;
    let low_equity_check = equity_considerations / 50;
    
    let equity_bonus = 25 * high_equity_check + 
                      20 * (medium_equity_check - high_equity_check) + 
                      15 * (low_equity_check - medium_equity_check);
    
    // Calculate final allocation
    let enrollment_adjusted = base_allocation * enrollment_factor / 100;
    let outcomes_adjusted = enrollment_adjusted * outcomes_factor / 100;
    let efficiency_adjusted = outcomes_adjusted * efficiency_factor / 100;
    let bonus_adjusted = efficiency_adjusted + impact_bonus + innovation_bonus + equity_bonus;
    
    // Cap between 50% and 200%
    let below_minimum = 50 / bonus_adjusted; // 1 if bonus_adjusted < 50
    let above_maximum = bonus_adjusted / 201; // 1 if bonus_adjusted > 200
    
    let final_allocation = bonus_adjusted * (1 - below_minimum - above_maximum) + 
                          50 * below_minimum + 200 * above_maximum;
    
    return final_allocation;
}

// Main entry point - Example educational governance scenario
fn run() -> Integer {
    // Example: Democratic University Curriculum Committee Decision
    let subject_area_relevance = 85;    // High relevance to degree program
    let learning_outcomes_clarity = 90; // Very clear learning outcomes
    let resource_requirements = 45;     // Moderate resource needs
    let student_demand = 75;            // Good student interest
    let faculty_expertise = 80;         // Faculty well-qualified
    let community_benefit = 70;         // Good community value
    let innovation_factor = 60;         // Some innovative elements
    
    // Evaluate curriculum proposal
    let curriculum_score = evaluate_curriculum_proposal(
        subject_area_relevance,
        learning_outcomes_clarity,
        resource_requirements,
        student_demand,
        faculty_expertise,
        community_benefit,
        innovation_factor
    );
    
    // Calculate student voice weight for a senior student
    let student_weight = calculate_student_voice_weight(
        85, // Excellent academic standing
        4,  // Senior (4 years enrolled)
        80, // High participation level
        70, // Some leadership experience
        90  // Highly relevant to their program
    );
    
    // Evaluate faculty performance
    let faculty_performance = evaluate_faculty_performance(
        88, // Excellent teaching
        75, // Good research
        65, // Moderate service
        80, // Good mentoring
        85, // High collaboration
        70  // Good innovation adoption
    );
    
    // Allocate resources to this program
    let resource_allocation = allocate_educational_resources(
        75, // Good enrollment
        85, // Excellent outcomes
        80, // High efficiency
        70, // Good community impact
        65, // Moderate innovation potential
        90  // High equity considerations
    );
    
    // Return composite result encoding multiple metrics
    // Format: curriculum_score + student_weight * 1000 + faculty_performance * 10000 + resource_allocation * 100000
    let composite_result = curriculum_score + student_weight * 1000 + faculty_performance * 10000 + resource_allocation * 100000;
    
    return composite_result;
} 