// ICN Cooperative Contract: Simple Governance System
// This contract demonstrates correct CCL syntax for cooperative governance including:
// - Member voting with reputation weighting
// - Resource allocation based on priority scoring
// - Democratic decision-making with configurable thresholds

fn calculate_member_voting_power(
    member_reputation: Integer,
    years_of_membership: Integer,
    attendance_percentage: Integer
) -> Integer {
    // Returns voting power (0-200 scale)
    
    // Base voting power from reputation (0-100)
    let base_power = member_reputation;
    
    // Seniority bonus using integer division
    let senior_bonus = years_of_membership * 10; // 10 points per year
    
    // Attendance modifier using threshold checks
    let good_attendance = attendance_percentage / 80; // 1 if >= 80%, 0 otherwise
    let excellent_attendance = attendance_percentage / 95; // 1 if >= 95%, 0 otherwise
    
    let attendance_bonus = good_attendance * 10 + excellent_attendance * 10; // Up to 20 bonus
    
    let total_power = base_power + senior_bonus + attendance_bonus;
    
    // Cap at 200 to prevent excessive concentration
    let over_cap = total_power / 201; // 1 if > 200, 0 otherwise
    let final_power = total_power * (1 - over_cap) + 200 * over_cap;
    
    return final_power;
}

fn evaluate_proposal_approval(
    votes_for: Integer,
    votes_against: Integer,
    total_voting_power: Integer,
    proposal_type: Integer
) -> Integer {
    // Returns: 0 = rejected, 1 = approved, 2 = needs supermajority
    // proposal_type: 1 = simple decision, 2 = financial decision, 3 = governance change
    
    let total_votes = votes_for + votes_against;
    
    // Check minimum participation (at least 50% of voting power)
    let min_participation = total_voting_power / 2;
    let participation_met = total_votes / min_participation; // 1 if sufficient, 0 otherwise
    
    if participation_met == 0 {
        return 0; // Rejected due to low participation
    }
    
    // Calculate support percentage (simplified to avoid floating point)
    let support_percentage = votes_for * 100 / total_votes;
    
    // Determine threshold based on proposal type
    let required_threshold = 50; // Default simple majority
    
    // Financial decisions need 60%
    let is_financial = proposal_type / 2; // 1 if type >= 2, 0 otherwise
    let financial_only = is_financial * (1 - (proposal_type / 3)); // 1 if type == 2, 0 otherwise
    let required_threshold = required_threshold + financial_only * 10; // Add 10 for financial
    
    // Governance changes need 75%
    let is_governance = proposal_type / 3; // 1 if type >= 3, 0 otherwise
    let required_threshold = required_threshold + is_governance * 25; // Add 25 for governance
    
    // Check if threshold is met
    let threshold_met = support_percentage / required_threshold; // 1 if met, 0 otherwise
    
    return threshold_met;
}

fn calculate_resource_priority(
    project_impact: Integer,
    member_support_count: Integer,
    resource_cost: Integer,
    urgency_days: Integer
) -> Integer {
    // Returns priority score (0-100)
    
    // Impact score (0-30 points)
    let high_impact = project_impact / 80; // 1 if >= 80, 0 otherwise
    let med_impact = project_impact / 60; // 1 if >= 60, 0 otherwise
    let impact_score = high_impact * 30 + (med_impact - high_impact) * 20 + (1 - med_impact) * 10;
    
    // Support score (0-25 points)
    let strong_support = member_support_count / 5; // 1 if >= 5 members, 0 otherwise
    let some_support = member_support_count / 2; // 1 if >= 2 members, 0 otherwise
    let support_score = strong_support * 25 + (some_support - strong_support) * 15 + (1 - some_support) * 5;
    
    // Cost efficiency score (0-25 points, lower cost = higher score)
    let low_cost = 1 - (resource_cost / 1000); // Inverse relationship simplified
    let cost_score = low_cost * 25;
    if cost_score < 0 {
        let cost_score = 0;
    }
    if cost_score > 25 {
        let cost_score = 25;
    }
    
    // Urgency score (0-20 points)
    let very_urgent = 1 - (urgency_days / 7); // 1 if < 7 days, decreasing
    let urgent = 1 - (urgency_days / 30); // 1 if < 30 days, decreasing
    let urgency_score = very_urgent * 20 + (urgent - very_urgent) * 10;
    if urgency_score < 0 {
        let urgency_score = 0;
    }
    
    let priority_score = impact_score + support_score + cost_score + urgency_score;
    
    return priority_score;
}

fn allocate_cooperative_funds(
    total_budget: Integer,
    project_count: Integer,
    project_priority: Integer,
    max_allocation_percentage: Integer
) -> Integer {
    // Returns allocated amount for a project
    
    // Base allocation per project
    let base_allocation = total_budget / project_count;
    
    // Priority multiplier (50% to 150% based on priority)
    let multiplier = 50 + project_priority; // 50-150 range
    let adjusted_allocation = base_allocation * multiplier / 100;
    
    // Apply maximum allocation cap
    let max_allocation = total_budget * max_allocation_percentage / 100;
    let over_max = adjusted_allocation / (max_allocation + 1); // 1 if exceeds max
    let final_allocation = adjusted_allocation * (1 - over_max) + max_allocation * over_max;
    
    return final_allocation;
}

fn validate_cooperative_decision(
    decision_type: Integer,
    member_votes: Integer,
    total_members: Integer,
    financial_impact: Integer
) -> Integer {
    // Returns: 0 = invalid, 1 = valid
    
    // Check minimum participation
    let min_voters = total_members / 2; // At least 50% participation
    let participation_ok = member_votes / min_voters; // 1 if sufficient
    
    // Check financial decision constraints
    let is_financial = decision_type / 2; // 1 if financial decision (type >= 2)
    let high_financial_impact = financial_impact / 10000; // 1 if >= $10,000
    let needs_high_participation = is_financial * high_financial_impact;
    
    // High-impact financial decisions need 75% participation
    let high_min_voters = total_members * 75 / 100;
    let high_participation_ok = member_votes / high_min_voters;
    
    // Final validation
    let basic_valid = participation_ok;
    let financial_valid = high_participation_ok * needs_high_participation + 
                         (1 - needs_high_participation);
    
    let valid = basic_valid * financial_valid;
    
    return valid;
}

// Main entry point - Example cooperative governance scenario
fn run() -> Integer {
    // Example: Tech cooperative making a decision about new equipment purchase
    
    // Member voting scenario
    let member_reputation = 85;    // 85% reputation score
    let years_membership = 3;      // 3 years in cooperative
    let attendance = 90;           // 90% meeting attendance
    
    // Calculate voting power
    let voting_power = calculate_member_voting_power(
        member_reputation, years_membership, attendance
    );
    
    // Resource allocation scenario
    let project_impact = 88;       // High impact project
    let member_support = 6;        // 6 members support
    let resource_cost = 5000;      // $5,000 cost
    let urgency = 14;              // 14 days deadline
    
    // Calculate priority
    let priority = calculate_resource_priority(
        project_impact, member_support, resource_cost, urgency
    );
    
    // Budget allocation scenario
    let budget_allocation = allocate_cooperative_funds(
        25000,  // $25,000 total budget
        4,      // 4 competing projects
        priority, // Use calculated priority
        40      // 40% max allocation per project
    );
    
    // Validate the decision process
    let decision_valid = validate_cooperative_decision(
        2,     // Financial decision
        8,     // 8 members voted
        10,    // 10 total members
        5000   // $5,000 financial impact
    );
    
    // Return the budget allocation if decision is valid
    let result = budget_allocation * decision_valid;
    
    return result;
} 